
cmark.exe:     file format elf32-littleriscv


Disassembly of section .text.init:

80000000 <_start>:
80000000:	595552b7          	lui	t0,0x59555
80000004:	55528293          	addi	t0,t0,1365 # 59555555 <_start-0x26aaaaab>
80000008:	7c029073          	csrw	0x7c0,t0
8000000c:	70042117          	auipc	sp,0x70042
80000010:	d8410113          	addi	sp,sp,-636 # f0041d90 <STACK>
80000014:	6e008097          	auipc	ra,0x6e008
80000018:	076080e7          	jalr	118(ra) # ee00808a <main>

8000001c <_finish>:
8000001c:	50580297          	auipc	t0,0x50580
80000020:	fe428293          	addi	t0,t0,-28 # d0580000 <tohost>
80000024:	0ff00313          	li	t1,255
80000028:	00628023          	sb	t1,0(t0)
8000002c:	4305                	li	t1,1
8000002e:	0062a023          	sw	t1,0(t0)
80000032:	fe0005e3          	beqz	zero,8000001c <_finish>
80000036:	0001                	nop
80000038:	0001                	nop
8000003a:	0001                	nop
8000003c:	0001                	nop
8000003e:	0001                	nop
80000040:	0001                	nop
80000042:	0001                	nop
80000044:	0001                	nop
80000046:	0001                	nop
80000048:	0001                	nop

Disassembly of section .text:

ee000000 <whisperPrintfImpl>:
int
whisperPrintfImpl(const char* format, va_list ap)
{
  int count = 0;  // Printed character count

  for (const char* fp = format; *fp; fp++)
ee000000:	00054703          	lbu	a4,0(a0)
ee000004:	2c070ce3          	beqz	a4,ee000adc <whisperPrintfImpl+0xadc>
        {    // Width not yet implemented.
          while (*fp >= '0' && *fp <= '9')
            width = width * 10 + (*fp++ - '0');
        }

      switch (*fp)
ee000008:	f0040eb7          	lui	t4,0xf0040
ee00000c:	87aa                	mv	a5,a0
      if (*fp != '%')
ee00000e:	02500893          	li	a7,37
  int count = 0;  // Printed character count
ee000012:	4501                	li	a0,0
  tohost = c;
ee000014:	d0580e37          	lui	t3,0xd0580
      while (*fp == '0')
ee000018:	03000813          	li	a6,48
      if (*fp == '-')
ee00001c:	02d00293          	li	t0,45
      if (*fp == '*')
ee000020:	02a00f93          	li	t6,42
      switch (*fp)
ee000024:	02000f13          	li	t5,32
ee000028:	000e8e93          	mv	t4,t4
      else if (*fp >= '0' && *fp <= '9')
ee00002c:	43a5                	li	t2,9
ee00002e:	a809                	j	ee000040 <whisperPrintfImpl+0x40>
  tohost = c;
ee000030:	00ee0023          	sb	a4,0(t3) # d0580000 <STACK+0xe053e270>
  for (const char* fp = format; *fp; fp++)
ee000034:	0017c703          	lbu	a4,1(a5)
          ++count;
ee000038:	0505                	addi	a0,a0,1
  for (const char* fp = format; *fp; fp++)
ee00003a:	0785                	addi	a5,a5,1
ee00003c:	10070e63          	beqz	a4,ee000158 <whisperPrintfImpl+0x158>
      if (*fp == 0)
ee000040:	0017c603          	lbu	a2,1(a5)
      if (*fp != '%')
ee000044:	ff1716e3          	bne	a4,a7,ee000030 <whisperPrintfImpl+0x30>
      if (*fp == 0)
ee000048:	10060863          	beqz	a2,ee000158 <whisperPrintfImpl+0x158>
      ++fp;  // Skip %
ee00004c:	0785                	addi	a5,a5,1
      if (*fp == '%')
ee00004e:	0f160e63          	beq	a2,a7,ee00014a <whisperPrintfImpl+0x14a>
{
ee000052:	7139                	addi	sp,sp,-64
ee000054:	de22                	sw	s0,60(sp)
ee000056:	dc26                	sw	s1,56(sp)
ee000058:	da4a                	sw	s2,52(sp)
ee00005a:	d84e                	sw	s3,48(sp)
ee00005c:	d652                	sw	s4,44(sp)
ee00005e:	d456                	sw	s5,40(sp)
ee000060:	d25a                	sw	s6,36(sp)
      while (*fp == '0')
ee000062:	25061ee3          	bne	a2,a6,ee000abe <whisperPrintfImpl+0xabe>
ee000066:	0017c703          	lbu	a4,1(a5)
          fp++;  // Pad zero not yet implented.
ee00006a:	0785                	addi	a5,a5,1
ee00006c:	86be                	mv	a3,a5
      while (*fp == '0')
ee00006e:	05071b63          	bne	a4,a6,ee0000c4 <whisperPrintfImpl+0xc4>
ee000072:	0017c703          	lbu	a4,1(a5)
          fp++;  // Pad zero not yet implented.
ee000076:	0785                	addi	a5,a5,1
      while (*fp == '0')
ee000078:	05071663          	bne	a4,a6,ee0000c4 <whisperPrintfImpl+0xc4>
ee00007c:	0026c703          	lbu	a4,2(a3)
          fp++;  // Pad zero not yet implented.
ee000080:	00268793          	addi	a5,a3,2
      while (*fp == '0')
ee000084:	05071063          	bne	a4,a6,ee0000c4 <whisperPrintfImpl+0xc4>
ee000088:	0036c703          	lbu	a4,3(a3)
          fp++;  // Pad zero not yet implented.
ee00008c:	00368793          	addi	a5,a3,3
      while (*fp == '0')
ee000090:	03071a63          	bne	a4,a6,ee0000c4 <whisperPrintfImpl+0xc4>
ee000094:	0046c703          	lbu	a4,4(a3)
          fp++;  // Pad zero not yet implented.
ee000098:	00468793          	addi	a5,a3,4
      while (*fp == '0')
ee00009c:	03071463          	bne	a4,a6,ee0000c4 <whisperPrintfImpl+0xc4>
ee0000a0:	0056c703          	lbu	a4,5(a3)
          fp++;  // Pad zero not yet implented.
ee0000a4:	00568793          	addi	a5,a3,5
      while (*fp == '0')
ee0000a8:	01071e63          	bne	a4,a6,ee0000c4 <whisperPrintfImpl+0xc4>
ee0000ac:	0066c703          	lbu	a4,6(a3)
          fp++;  // Pad zero not yet implented.
ee0000b0:	00668793          	addi	a5,a3,6
      while (*fp == '0')
ee0000b4:	01071863          	bne	a4,a6,ee0000c4 <whisperPrintfImpl+0xc4>
ee0000b8:	0076c703          	lbu	a4,7(a3)
          fp++;  // Pad zero not yet implented.
ee0000bc:	00768793          	addi	a5,a3,7
      while (*fp == '0')
ee0000c0:	fb0703e3          	beq	a4,a6,ee000066 <whisperPrintfImpl+0x66>
      if (*fp == '*')
ee0000c4:	0017c303          	lbu	t1,1(a5)
      if (*fp == '-')
ee0000c8:	00571463          	bne	a4,t0,ee0000d0 <whisperPrintfImpl+0xd0>
          fp++;  // Pad right not yet implemented.
ee0000cc:	0785                	addi	a5,a5,1
ee0000ce:	871a                	mv	a4,t1
          while (*fp >= '0' && *fp <= '9')
ee0000d0:	0017c403          	lbu	s0,1(a5)
      if (*fp == '*')
ee0000d4:	07f70663          	beq	a4,t6,ee000140 <whisperPrintfImpl+0x140>
      else if (*fp >= '0' && *fp <= '9')
ee0000d8:	fd070413          	addi	s0,a4,-48
ee0000dc:	0ff47493          	zext.b	s1,s0
      int width = 0;  // Field width
ee0000e0:	4681                	li	a3,0
      else if (*fp >= '0' && *fp <= '9')
ee0000e2:	0693fc63          	bgeu	t2,s1,ee00015a <whisperPrintfImpl+0x15a>
      switch (*fp)
ee0000e6:	fa870713          	addi	a4,a4,-88
ee0000ea:	0ff77a13          	zext.b	s4,a4
ee0000ee:	014f6f63          	bltu	t5,s4,ee00010c <whisperPrintfImpl+0x10c>
ee0000f2:	002a1313          	slli	t1,s4,0x2
ee0000f6:	01d30933          	add	s2,t1,t4
ee0000fa:	00092b03          	lw	s6,0(s2)
ee0000fe:	8b02                	jr	s6
      if (*fp == 0)
ee000100:	c61d                	beqz	a2,ee00012e <whisperPrintfImpl+0x12e>
      ++fp;  // Skip %
ee000102:	0785                	addi	a5,a5,1
      if (*fp == '%')
ee000104:	f5161fe3          	bne	a2,a7,ee000062 <whisperPrintfImpl+0x62>
  tohost = c;
ee000108:	011e0023          	sb	a7,0(t3)
  for (const char* fp = format; *fp; fp++)
ee00010c:	0017cb03          	lbu	s6,1(a5)
ee000110:	0785                	addi	a5,a5,1
ee000112:	000b0e63          	beqz	s6,ee00012e <whisperPrintfImpl+0x12e>
      if (*fp == 0)
ee000116:	0017c603          	lbu	a2,1(a5)
      if (*fp != '%')
ee00011a:	ff1b03e3          	beq	s6,a7,ee000100 <whisperPrintfImpl+0x100>
  tohost = c;
ee00011e:	016e0023          	sb	s6,0(t3)
  for (const char* fp = format; *fp; fp++)
ee000122:	0017cb03          	lbu	s6,1(a5)
          ++count;
ee000126:	0505                	addi	a0,a0,1
  for (const char* fp = format; *fp; fp++)
ee000128:	0785                	addi	a5,a5,1
ee00012a:	fe0b16e3          	bnez	s6,ee000116 <whisperPrintfImpl+0x116>
*/
        }
    }

  return count;
}
ee00012e:	5472                	lw	s0,60(sp)
ee000130:	54e2                	lw	s1,56(sp)
ee000132:	5952                	lw	s2,52(sp)
ee000134:	59c2                	lw	s3,48(sp)
ee000136:	5a32                	lw	s4,44(sp)
ee000138:	5aa2                	lw	s5,40(sp)
ee00013a:	5b12                	lw	s6,36(sp)
ee00013c:	6121                	addi	sp,sp,64
ee00013e:	8082                	ret
          fp++;  // Width not yet implemented.
ee000140:	0785                	addi	a5,a5,1
          int outWidth = va_arg(ap, int);
ee000142:	0591                	addi	a1,a1,4
          fp++;  // Width not yet implemented.
ee000144:	8722                	mv	a4,s0
      int width = 0;  // Field width
ee000146:	4681                	li	a3,0
ee000148:	bf79                	j	ee0000e6 <whisperPrintfImpl+0xe6>
  for (const char* fp = format; *fp; fp++)
ee00014a:	0017c703          	lbu	a4,1(a5)
  tohost = c;
ee00014e:	011e0023          	sb	a7,0(t3)
  for (const char* fp = format; *fp; fp++)
ee000152:	0785                	addi	a5,a5,1
ee000154:	ee0716e3          	bnez	a4,ee000040 <whisperPrintfImpl+0x40>
}
ee000158:	8082                	ret
          while (*fp >= '0' && *fp <= '9')
ee00015a:	4a25                	li	s4,9
ee00015c:	0017c703          	lbu	a4,1(a5)
            width = width * 10 + (*fp++ - '0');
ee000160:	00269913          	slli	s2,a3,0x2
ee000164:	00d909b3          	add	s3,s2,a3
          while (*fp >= '0' && *fp <= '9')
ee000168:	fd070a93          	addi	s5,a4,-48
            width = width * 10 + (*fp++ - '0');
ee00016c:	0785                	addi	a5,a5,1
ee00016e:	00199b13          	slli	s6,s3,0x1
          while (*fp >= '0' && *fp <= '9')
ee000172:	0ffaf493          	zext.b	s1,s5
            width = width * 10 + (*fp++ - '0');
ee000176:	833e                	mv	t1,a5
ee000178:	016406b3          	add	a3,s0,s6
          while (*fp >= '0' && *fp <= '9')
ee00017c:	f69a65e3          	bltu	s4,s1,ee0000e6 <whisperPrintfImpl+0xe6>
ee000180:	0017c703          	lbu	a4,1(a5)
            width = width * 10 + (*fp++ - '0');
ee000184:	00269413          	slli	s0,a3,0x2
ee000188:	96a2                	add	a3,a3,s0
          while (*fp >= '0' && *fp <= '9')
ee00018a:	fd070b13          	addi	s6,a4,-48
            width = width * 10 + (*fp++ - '0');
ee00018e:	00169913          	slli	s2,a3,0x1
          while (*fp >= '0' && *fp <= '9')
ee000192:	0ffb7993          	zext.b	s3,s6
            width = width * 10 + (*fp++ - '0');
ee000196:	0785                	addi	a5,a5,1
ee000198:	012a86b3          	add	a3,s5,s2
          while (*fp >= '0' && *fp <= '9')
ee00019c:	f53a65e3          	bltu	s4,s3,ee0000e6 <whisperPrintfImpl+0xe6>
ee0001a0:	00234703          	lbu	a4,2(t1)
            width = width * 10 + (*fp++ - '0');
ee0001a4:	00269793          	slli	a5,a3,0x2
ee0001a8:	00d78ab3          	add	s5,a5,a3
          while (*fp >= '0' && *fp <= '9')
ee0001ac:	fd070493          	addi	s1,a4,-48
            width = width * 10 + (*fp++ - '0');
ee0001b0:	001a9413          	slli	s0,s5,0x1
          while (*fp >= '0' && *fp <= '9')
ee0001b4:	0ff4f913          	zext.b	s2,s1
            width = width * 10 + (*fp++ - '0');
ee0001b8:	00230793          	addi	a5,t1,2
ee0001bc:	008b06b3          	add	a3,s6,s0
          while (*fp >= '0' && *fp <= '9')
ee0001c0:	f32a63e3          	bltu	s4,s2,ee0000e6 <whisperPrintfImpl+0xe6>
ee0001c4:	00334703          	lbu	a4,3(t1)
            width = width * 10 + (*fp++ - '0');
ee0001c8:	00269b13          	slli	s6,a3,0x2
ee0001cc:	96da                	add	a3,a3,s6
          while (*fp >= '0' && *fp <= '9')
ee0001ce:	fd070a93          	addi	s5,a4,-48
            width = width * 10 + (*fp++ - '0');
ee0001d2:	00169413          	slli	s0,a3,0x1
          while (*fp >= '0' && *fp <= '9')
ee0001d6:	0ffaf993          	zext.b	s3,s5
            width = width * 10 + (*fp++ - '0');
ee0001da:	00330793          	addi	a5,t1,3
ee0001de:	008486b3          	add	a3,s1,s0
          while (*fp >= '0' && *fp <= '9')
ee0001e2:	f13a62e3          	bltu	s4,s3,ee0000e6 <whisperPrintfImpl+0xe6>
ee0001e6:	00434703          	lbu	a4,4(t1)
            width = width * 10 + (*fp++ - '0');
ee0001ea:	00269793          	slli	a5,a3,0x2
ee0001ee:	00d784b3          	add	s1,a5,a3
          while (*fp >= '0' && *fp <= '9')
ee0001f2:	fd070913          	addi	s2,a4,-48
            width = width * 10 + (*fp++ - '0');
ee0001f6:	00149b13          	slli	s6,s1,0x1
          while (*fp >= '0' && *fp <= '9')
ee0001fa:	0ff97413          	zext.b	s0,s2
            width = width * 10 + (*fp++ - '0');
ee0001fe:	00430793          	addi	a5,t1,4
ee000202:	016a86b3          	add	a3,s5,s6
          while (*fp >= '0' && *fp <= '9')
ee000206:	ee8a60e3          	bltu	s4,s0,ee0000e6 <whisperPrintfImpl+0xe6>
ee00020a:	00534703          	lbu	a4,5(t1)
            width = width * 10 + (*fp++ - '0');
ee00020e:	00269a93          	slli	s5,a3,0x2
ee000212:	96d6                	add	a3,a3,s5
          while (*fp >= '0' && *fp <= '9')
ee000214:	fd070493          	addi	s1,a4,-48
            width = width * 10 + (*fp++ - '0');
ee000218:	00169b13          	slli	s6,a3,0x1
          while (*fp >= '0' && *fp <= '9')
ee00021c:	0ff4f993          	zext.b	s3,s1
            width = width * 10 + (*fp++ - '0');
ee000220:	00530793          	addi	a5,t1,5
ee000224:	016906b3          	add	a3,s2,s6
          while (*fp >= '0' && *fp <= '9')
ee000228:	eb3a6fe3          	bltu	s4,s3,ee0000e6 <whisperPrintfImpl+0xe6>
ee00022c:	00634703          	lbu	a4,6(t1)
            width = width * 10 + (*fp++ - '0');
ee000230:	00269793          	slli	a5,a3,0x2
ee000234:	00d78433          	add	s0,a5,a3
          while (*fp >= '0' && *fp <= '9')
ee000238:	fd070913          	addi	s2,a4,-48
            width = width * 10 + (*fp++ - '0');
ee00023c:	00141a93          	slli	s5,s0,0x1
          while (*fp >= '0' && *fp <= '9')
ee000240:	0ff97b13          	zext.b	s6,s2
            width = width * 10 + (*fp++ - '0');
ee000244:	00630793          	addi	a5,t1,6
ee000248:	015486b3          	add	a3,s1,s5
          while (*fp >= '0' && *fp <= '9')
ee00024c:	e96a6de3          	bltu	s4,s6,ee0000e6 <whisperPrintfImpl+0xe6>
ee000250:	00734703          	lbu	a4,7(t1)
            width = width * 10 + (*fp++ - '0');
ee000254:	00269493          	slli	s1,a3,0x2
ee000258:	96a6                	add	a3,a3,s1
          while (*fp >= '0' && *fp <= '9')
ee00025a:	fd070413          	addi	s0,a4,-48
            width = width * 10 + (*fp++ - '0');
ee00025e:	00169a93          	slli	s5,a3,0x1
          while (*fp >= '0' && *fp <= '9')
ee000262:	0ff47993          	zext.b	s3,s0
            width = width * 10 + (*fp++ - '0');
ee000266:	00730793          	addi	a5,t1,7
ee00026a:	015906b3          	add	a3,s2,s5
          while (*fp >= '0' && *fp <= '9')
ee00026e:	ef3a77e3          	bgeu	s4,s3,ee00015c <whisperPrintfImpl+0x15c>
ee000272:	bd95                	j	ee0000e6 <whisperPrintfImpl+0xe6>
  unsigned uu = value;
ee000274:	4198                	lw	a4,0(a1)
  int charCount = 0;
ee000276:	4981                	li	s3,0
          count += whisperPrintInt(va_arg(ap, int), width, pad, 16);
ee000278:	0591                	addi	a1,a1,4
          char c = digit < 10 ? '0' + digit : 'a' + digit - 10;
ee00027a:	46a5                	li	a3,9
ee00027c:	a011                	j	ee000280 <whisperPrintfImpl+0x280>
          buffer[charCount++] = c;
ee00027e:	89da                	mv	s3,s6
          char c = digit < 10 ? '0' + digit : 'a' + digit - 10;
ee000280:	00f77913          	andi	s2,a4,15
ee000284:	05790613          	addi	a2,s2,87
ee000288:	0126e463          	bltu	a3,s2,ee000290 <whisperPrintfImpl+0x290>
ee00028c:	03090613          	addi	a2,s2,48
          buffer[charCount++] = c;
ee000290:	00198b13          	addi	s6,s3,1
ee000294:	00c10a93          	addi	s5,sp,12
ee000298:	016a8a33          	add	s4,s5,s6
ee00029c:	feca0fa3          	sb	a2,-1(s4)
          uu >>= 4;
ee0002a0:	8311                	srli	a4,a4,0x4
      while (uu);
ee0002a2:	ff71                	bnez	a4,ee00027e <whisperPrintfImpl+0x27e>
  char* p = buffer + charCount - 1;
ee0002a4:	0064                	addi	s1,sp,12
ee0002a6:	01348733          	add	a4,s1,s3
  for (unsigned i = 0; i < charCount; ++i)
ee0002aa:	00b10693          	addi	a3,sp,11
ee0002ae:	40d709b3          	sub	s3,a4,a3
ee0002b2:	0079f413          	andi	s0,s3,7
ee0002b6:	d0580637          	lui	a2,0xd0580
ee0002ba:	c825                	beqz	s0,ee00032a <whisperPrintfImpl+0x32a>
ee0002bc:	4905                	li	s2,1
ee0002be:	05240f63          	beq	s0,s2,ee00031c <whisperPrintfImpl+0x31c>
ee0002c2:	4309                	li	t1,2
ee0002c4:	04640763          	beq	s0,t1,ee000312 <whisperPrintfImpl+0x312>
ee0002c8:	4a8d                	li	s5,3
ee0002ca:	03540f63          	beq	s0,s5,ee000308 <whisperPrintfImpl+0x308>
ee0002ce:	4a11                	li	s4,4
ee0002d0:	03440763          	beq	s0,s4,ee0002fe <whisperPrintfImpl+0x2fe>
ee0002d4:	4495                	li	s1,5
ee0002d6:	00940f63          	beq	s0,s1,ee0002f4 <whisperPrintfImpl+0x2f4>
ee0002da:	4999                	li	s3,6
ee0002dc:	01340763          	beq	s0,s3,ee0002ea <whisperPrintfImpl+0x2ea>
    whisperPutc(*p--);
ee0002e0:	00074403          	lbu	s0,0(a4)
ee0002e4:	177d                	addi	a4,a4,-1
  tohost = c;
ee0002e6:	00860023          	sb	s0,0(a2) # d0580000 <STACK+0xe053e270>
    whisperPutc(*p--);
ee0002ea:	00074903          	lbu	s2,0(a4)
ee0002ee:	177d                	addi	a4,a4,-1
  tohost = c;
ee0002f0:	01260023          	sb	s2,0(a2)
    whisperPutc(*p--);
ee0002f4:	00074303          	lbu	t1,0(a4)
ee0002f8:	177d                	addi	a4,a4,-1
  tohost = c;
ee0002fa:	00660023          	sb	t1,0(a2)
    whisperPutc(*p--);
ee0002fe:	00074a83          	lbu	s5,0(a4)
ee000302:	177d                	addi	a4,a4,-1
  tohost = c;
ee000304:	01560023          	sb	s5,0(a2)
    whisperPutc(*p--);
ee000308:	00074a03          	lbu	s4,0(a4)
ee00030c:	177d                	addi	a4,a4,-1
  tohost = c;
ee00030e:	01460023          	sb	s4,0(a2)
    whisperPutc(*p--);
ee000312:	00074483          	lbu	s1,0(a4)
ee000316:	177d                	addi	a4,a4,-1
  tohost = c;
ee000318:	00960023          	sb	s1,0(a2)
    whisperPutc(*p--);
ee00031c:	00074983          	lbu	s3,0(a4)
ee000320:	177d                	addi	a4,a4,-1
  tohost = c;
ee000322:	01360023          	sb	s3,0(a2)
  for (unsigned i = 0; i < charCount; ++i)
ee000326:	04d70563          	beq	a4,a3,ee000370 <whisperPrintfImpl+0x370>
    whisperPutc(*p--);
ee00032a:	00074403          	lbu	s0,0(a4)
ee00032e:	fff74903          	lbu	s2,-1(a4)
ee000332:	ffe74303          	lbu	t1,-2(a4)
  tohost = c;
ee000336:	00860023          	sb	s0,0(a2)
    whisperPutc(*p--);
ee00033a:	ffd74a83          	lbu	s5,-3(a4)
  tohost = c;
ee00033e:	01260023          	sb	s2,0(a2)
    whisperPutc(*p--);
ee000342:	ffc74a03          	lbu	s4,-4(a4)
  tohost = c;
ee000346:	00660023          	sb	t1,0(a2)
    whisperPutc(*p--);
ee00034a:	ffb74983          	lbu	s3,-5(a4)
  tohost = c;
ee00034e:	01560023          	sb	s5,0(a2)
    whisperPutc(*p--);
ee000352:	ffa74483          	lbu	s1,-6(a4)
  tohost = c;
ee000356:	01460023          	sb	s4,0(a2)
    whisperPutc(*p--);
ee00035a:	ff974403          	lbu	s0,-7(a4)
  tohost = c;
ee00035e:	01360023          	sb	s3,0(a2)
ee000362:	00960023          	sb	s1,0(a2)
    whisperPutc(*p--);
ee000366:	1761                	addi	a4,a4,-8
  tohost = c;
ee000368:	00860023          	sb	s0,0(a2)
  for (unsigned i = 0; i < charCount; ++i)
ee00036c:	fad71fe3          	bne	a4,a3,ee00032a <whisperPrintfImpl+0x32a>
          count += whisperPrintInt(va_arg(ap, int), width, pad, 16);
ee000370:	955a                	add	a0,a0,s6
          break;
ee000372:	bb69                	j	ee00010c <whisperPrintfImpl+0x10c>
          count += whisperPrintUnsigned((unsigned) va_arg(ap, unsigned), width, pad);
ee000374:	0005a983          	lw	s3,0(a1)
  int charCount = 0;
ee000378:	4701                	li	a4,0
          count += whisperPrintUnsigned((unsigned) va_arg(ap, unsigned), width, pad);
ee00037a:	0591                	addi	a1,a1,4
      char c = '0' + (value % 10);
ee00037c:	4329                	li	t1,10
  while (value);
ee00037e:	44a5                	li	s1,9
      char c = '0' + (value % 10);
ee000380:	0269fa33          	remu	s4,s3,t1
ee000384:	843a                	mv	s0,a4
      buffer[charCount++] = c;
ee000386:	00c10a93          	addi	s5,sp,12
ee00038a:	0705                	addi	a4,a4,1
ee00038c:	00ea8b33          	add	s6,s5,a4
ee000390:	893a                	mv	s2,a4
      char c = '0' + (value % 10);
ee000392:	030a0a13          	addi	s4,s4,48
      buffer[charCount++] = c;
ee000396:	ff4b0fa3          	sb	s4,-1(s6)
      value = value / 10;
ee00039a:	0269db33          	divu	s6,s3,t1
  while (value);
ee00039e:	0f34f863          	bgeu	s1,s3,ee00048e <whisperPrintfImpl+0x48e>
      char c = '0' + (value % 10);
ee0003a2:	843a                	mv	s0,a4
      buffer[charCount++] = c;
ee0003a4:	00c10a93          	addi	s5,sp,12
ee0003a8:	0705                	addi	a4,a4,1
ee0003aa:	00ea8a33          	add	s4,s5,a4
      char c = '0' + (value % 10);
ee0003ae:	026b79b3          	remu	s3,s6,t1
ee0003b2:	03098993          	addi	s3,s3,48
      buffer[charCount++] = c;
ee0003b6:	ff3a0fa3          	sb	s3,-1(s4)
      value = value / 10;
ee0003ba:	026b59b3          	divu	s3,s6,t1
  while (value);
ee0003be:	0d64f863          	bgeu	s1,s6,ee00048e <whisperPrintfImpl+0x48e>
      buffer[charCount++] = c;
ee0003c2:	00c10b13          	addi	s6,sp,12
ee0003c6:	843a                	mv	s0,a4
ee0003c8:	00290713          	addi	a4,s2,2
ee0003cc:	00eb0ab3          	add	s5,s6,a4
      char c = '0' + (value % 10);
ee0003d0:	0269fa33          	remu	s4,s3,t1
ee0003d4:	030a0b13          	addi	s6,s4,48
      buffer[charCount++] = c;
ee0003d8:	ff6a8fa3          	sb	s6,-1(s5)
      value = value / 10;
ee0003dc:	0269da33          	divu	s4,s3,t1
  while (value);
ee0003e0:	0b34f763          	bgeu	s1,s3,ee00048e <whisperPrintfImpl+0x48e>
      buffer[charCount++] = c;
ee0003e4:	00c10993          	addi	s3,sp,12
ee0003e8:	843a                	mv	s0,a4
ee0003ea:	00390713          	addi	a4,s2,3
ee0003ee:	00e98ab3          	add	s5,s3,a4
      char c = '0' + (value % 10);
ee0003f2:	026a7b33          	remu	s6,s4,t1
ee0003f6:	030b0993          	addi	s3,s6,48
      buffer[charCount++] = c;
ee0003fa:	ff3a8fa3          	sb	s3,-1(s5)
      value = value / 10;
ee0003fe:	026a5b33          	divu	s6,s4,t1
  while (value);
ee000402:	0944f663          	bgeu	s1,s4,ee00048e <whisperPrintfImpl+0x48e>
      buffer[charCount++] = c;
ee000406:	00c10a13          	addi	s4,sp,12
ee00040a:	843a                	mv	s0,a4
ee00040c:	00490713          	addi	a4,s2,4
ee000410:	00ea0ab3          	add	s5,s4,a4
      char c = '0' + (value % 10);
ee000414:	026b79b3          	remu	s3,s6,t1
ee000418:	03098a13          	addi	s4,s3,48
      buffer[charCount++] = c;
ee00041c:	ff4a8fa3          	sb	s4,-1(s5)
      value = value / 10;
ee000420:	026b5a33          	divu	s4,s6,t1
  while (value);
ee000424:	0764f563          	bgeu	s1,s6,ee00048e <whisperPrintfImpl+0x48e>
      buffer[charCount++] = c;
ee000428:	00c10b13          	addi	s6,sp,12
ee00042c:	843a                	mv	s0,a4
ee00042e:	00590713          	addi	a4,s2,5
ee000432:	00eb0ab3          	add	s5,s6,a4
      char c = '0' + (value % 10);
ee000436:	026a79b3          	remu	s3,s4,t1
ee00043a:	03098b13          	addi	s6,s3,48
      buffer[charCount++] = c;
ee00043e:	ff6a8fa3          	sb	s6,-1(s5)
      value = value / 10;
ee000442:	026a59b3          	divu	s3,s4,t1
  while (value);
ee000446:	0544f463          	bgeu	s1,s4,ee00048e <whisperPrintfImpl+0x48e>
      buffer[charCount++] = c;
ee00044a:	00c10a13          	addi	s4,sp,12
ee00044e:	843a                	mv	s0,a4
ee000450:	00690713          	addi	a4,s2,6
ee000454:	00ea0ab3          	add	s5,s4,a4
      char c = '0' + (value % 10);
ee000458:	0269fb33          	remu	s6,s3,t1
ee00045c:	030b0a13          	addi	s4,s6,48
      buffer[charCount++] = c;
ee000460:	ff4a8fa3          	sb	s4,-1(s5)
      value = value / 10;
ee000464:	0269dab3          	divu	s5,s3,t1
  while (value);
ee000468:	0334f363          	bgeu	s1,s3,ee00048e <whisperPrintfImpl+0x48e>
      char c = '0' + (value % 10);
ee00046c:	843a                	mv	s0,a4
      buffer[charCount++] = c;
ee00046e:	00790713          	addi	a4,s2,7
ee000472:	00c10913          	addi	s2,sp,12
ee000476:	00e909b3          	add	s3,s2,a4
      char c = '0' + (value % 10);
ee00047a:	026afb33          	remu	s6,s5,t1
ee00047e:	030b0a13          	addi	s4,s6,48
      buffer[charCount++] = c;
ee000482:	ff498fa3          	sb	s4,-1(s3)
      value = value / 10;
ee000486:	026ad9b3          	divu	s3,s5,t1
  while (value);
ee00048a:	ef54ebe3          	bltu	s1,s5,ee000380 <whisperPrintfImpl+0x380>
  char* p = buffer + charCount - 1;
ee00048e:	00c10313          	addi	t1,sp,12
ee000492:	9322                	add	t1,t1,s0
      buffer[charCount++] = c;
ee000494:	84ba                	mv	s1,a4
ee000496:	d0580ab7          	lui	s5,0xd0580
  for (int i = charCount; i < width; ++i)
ee00049a:	08d75563          	bge	a4,a3,ee000524 <whisperPrintfImpl+0x524>
ee00049e:	40e68433          	sub	s0,a3,a4
ee0004a2:	00747913          	andi	s2,s0,7
ee0004a6:	04090c63          	beqz	s2,ee0004fe <whisperPrintfImpl+0x4fe>
ee0004aa:	4b05                	li	s6,1
ee0004ac:	05690463          	beq	s2,s6,ee0004f4 <whisperPrintfImpl+0x4f4>
ee0004b0:	4a09                	li	s4,2
ee0004b2:	03490e63          	beq	s2,s4,ee0004ee <whisperPrintfImpl+0x4ee>
ee0004b6:	498d                	li	s3,3
ee0004b8:	03390863          	beq	s2,s3,ee0004e8 <whisperPrintfImpl+0x4e8>
ee0004bc:	4411                	li	s0,4
ee0004be:	02890263          	beq	s2,s0,ee0004e2 <whisperPrintfImpl+0x4e2>
ee0004c2:	4b15                	li	s6,5
ee0004c4:	01690c63          	beq	s2,s6,ee0004dc <whisperPrintfImpl+0x4dc>
ee0004c8:	4a19                	li	s4,6
ee0004ca:	01490663          	beq	s2,s4,ee0004d6 <whisperPrintfImpl+0x4d6>
  tohost = c;
ee0004ce:	00ca8023          	sb	a2,0(s5) # d0580000 <STACK+0xe053e270>
  for (int i = charCount; i < width; ++i)
ee0004d2:	00170493          	addi	s1,a4,1
  tohost = c;
ee0004d6:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
ee0004da:	0485                	addi	s1,s1,1
  tohost = c;
ee0004dc:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
ee0004e0:	0485                	addi	s1,s1,1
  tohost = c;
ee0004e2:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
ee0004e6:	0485                	addi	s1,s1,1
  tohost = c;
ee0004e8:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
ee0004ec:	0485                	addi	s1,s1,1
  tohost = c;
ee0004ee:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
ee0004f2:	0485                	addi	s1,s1,1
  tohost = c;
ee0004f4:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
ee0004f8:	0485                	addi	s1,s1,1
ee0004fa:	02968563          	beq	a3,s1,ee000524 <whisperPrintfImpl+0x524>
  tohost = c;
ee0004fe:	00ca8023          	sb	a2,0(s5)
ee000502:	00ca8023          	sb	a2,0(s5)
ee000506:	00ca8023          	sb	a2,0(s5)
ee00050a:	00ca8023          	sb	a2,0(s5)
ee00050e:	00ca8023          	sb	a2,0(s5)
ee000512:	00ca8023          	sb	a2,0(s5)
ee000516:	00ca8023          	sb	a2,0(s5)
ee00051a:	00ca8023          	sb	a2,0(s5)
  for (int i = charCount; i < width; ++i)
ee00051e:	04a1                	addi	s1,s1,8
ee000520:	fc969fe3          	bne	a3,s1,ee0004fe <whisperPrintfImpl+0x4fe>
ee000524:	00b10613          	addi	a2,sp,11
ee000528:	40c306b3          	sub	a3,t1,a2
ee00052c:	0076f913          	andi	s2,a3,7
ee000530:	06090963          	beqz	s2,ee0005a2 <whisperPrintfImpl+0x5a2>
ee000534:	4985                	li	s3,1
ee000536:	05390f63          	beq	s2,s3,ee000594 <whisperPrintfImpl+0x594>
ee00053a:	4409                	li	s0,2
ee00053c:	04890763          	beq	s2,s0,ee00058a <whisperPrintfImpl+0x58a>
ee000540:	4b0d                	li	s6,3
ee000542:	03690f63          	beq	s2,s6,ee000580 <whisperPrintfImpl+0x580>
ee000546:	4a11                	li	s4,4
ee000548:	03490763          	beq	s2,s4,ee000576 <whisperPrintfImpl+0x576>
ee00054c:	4495                	li	s1,5
ee00054e:	00990f63          	beq	s2,s1,ee00056c <whisperPrintfImpl+0x56c>
ee000552:	4699                	li	a3,6
ee000554:	00d90763          	beq	s2,a3,ee000562 <whisperPrintfImpl+0x562>
    whisperPutc(*p--);
ee000558:	00034903          	lbu	s2,0(t1)
ee00055c:	137d                	addi	t1,t1,-1
  tohost = c;
ee00055e:	012a8023          	sb	s2,0(s5)
    whisperPutc(*p--);
ee000562:	00034983          	lbu	s3,0(t1)
ee000566:	137d                	addi	t1,t1,-1
  tohost = c;
ee000568:	013a8023          	sb	s3,0(s5)
    whisperPutc(*p--);
ee00056c:	00034403          	lbu	s0,0(t1)
ee000570:	137d                	addi	t1,t1,-1
  tohost = c;
ee000572:	008a8023          	sb	s0,0(s5)
    whisperPutc(*p--);
ee000576:	00034b03          	lbu	s6,0(t1)
ee00057a:	137d                	addi	t1,t1,-1
  tohost = c;
ee00057c:	016a8023          	sb	s6,0(s5)
    whisperPutc(*p--);
ee000580:	00034a03          	lbu	s4,0(t1)
ee000584:	137d                	addi	t1,t1,-1
  tohost = c;
ee000586:	014a8023          	sb	s4,0(s5)
    whisperPutc(*p--);
ee00058a:	00034483          	lbu	s1,0(t1)
ee00058e:	137d                	addi	t1,t1,-1
  tohost = c;
ee000590:	009a8023          	sb	s1,0(s5)
    whisperPutc(*p--);
ee000594:	00034683          	lbu	a3,0(t1)
ee000598:	137d                	addi	t1,t1,-1
  tohost = c;
ee00059a:	00da8023          	sb	a3,0(s5)
  for (int i = 0; i < charCount; ++i)
ee00059e:	04c30563          	beq	t1,a2,ee0005e8 <whisperPrintfImpl+0x5e8>
    whisperPutc(*p--);
ee0005a2:	00034983          	lbu	s3,0(t1)
ee0005a6:	fff34903          	lbu	s2,-1(t1)
ee0005aa:	ffe34403          	lbu	s0,-2(t1)
  tohost = c;
ee0005ae:	013a8023          	sb	s3,0(s5)
    whisperPutc(*p--);
ee0005b2:	ffd34b03          	lbu	s6,-3(t1)
  tohost = c;
ee0005b6:	012a8023          	sb	s2,0(s5)
    whisperPutc(*p--);
ee0005ba:	ffc34a03          	lbu	s4,-4(t1)
  tohost = c;
ee0005be:	008a8023          	sb	s0,0(s5)
    whisperPutc(*p--);
ee0005c2:	ffb34683          	lbu	a3,-5(t1)
  tohost = c;
ee0005c6:	016a8023          	sb	s6,0(s5)
    whisperPutc(*p--);
ee0005ca:	ffa34483          	lbu	s1,-6(t1)
  tohost = c;
ee0005ce:	014a8023          	sb	s4,0(s5)
    whisperPutc(*p--);
ee0005d2:	ff934983          	lbu	s3,-7(t1)
  tohost = c;
ee0005d6:	00da8023          	sb	a3,0(s5)
ee0005da:	009a8023          	sb	s1,0(s5)
    whisperPutc(*p--);
ee0005de:	1361                	addi	t1,t1,-8
  tohost = c;
ee0005e0:	013a8023          	sb	s3,0(s5)
  for (int i = 0; i < charCount; ++i)
ee0005e4:	fac31fe3          	bne	t1,a2,ee0005a2 <whisperPrintfImpl+0x5a2>
          count += whisperPrintInt(va_arg(ap, int), width, pad, 8);
ee0005e8:	953a                	add	a0,a0,a4
          break;
ee0005ea:	b60d                	j	ee00010c <whisperPrintfImpl+0x10c>
          count += whisperPuts(va_arg(ap, char*));
ee0005ec:	4198                	lw	a4,0(a1)
ee0005ee:	d0580ab7          	lui	s5,0xd0580
ee0005f2:	0591                	addi	a1,a1,4
  while (*s)
ee0005f4:	00074483          	lbu	s1,0(a4)
ee0005f8:	ccb1                	beqz	s1,ee000654 <whisperPrintfImpl+0x654>
  tohost = c;
ee0005fa:	009a8023          	sb	s1,0(s5) # d0580000 <STACK+0xe053e270>
  while (*s)
ee0005fe:	00174603          	lbu	a2,1(a4)
ee000602:	ca29                	beqz	a2,ee000654 <whisperPrintfImpl+0x654>
  tohost = c;
ee000604:	00ca8023          	sb	a2,0(s5)
  while (*s)
ee000608:	00274303          	lbu	t1,2(a4)
ee00060c:	04030463          	beqz	t1,ee000654 <whisperPrintfImpl+0x654>
  tohost = c;
ee000610:	006a8023          	sb	t1,0(s5)
  while (*s)
ee000614:	00374903          	lbu	s2,3(a4)
ee000618:	02090e63          	beqz	s2,ee000654 <whisperPrintfImpl+0x654>
  tohost = c;
ee00061c:	012a8023          	sb	s2,0(s5)
  while (*s)
ee000620:	00474403          	lbu	s0,4(a4)
ee000624:	c805                	beqz	s0,ee000654 <whisperPrintfImpl+0x654>
  tohost = c;
ee000626:	008a8023          	sb	s0,0(s5)
  while (*s)
ee00062a:	00574b03          	lbu	s6,5(a4)
ee00062e:	020b0363          	beqz	s6,ee000654 <whisperPrintfImpl+0x654>
  tohost = c;
ee000632:	016a8023          	sb	s6,0(s5)
  while (*s)
ee000636:	00674a03          	lbu	s4,6(a4)
ee00063a:	000a0d63          	beqz	s4,ee000654 <whisperPrintfImpl+0x654>
  tohost = c;
ee00063e:	014a8023          	sb	s4,0(s5)
  while (*s)
ee000642:	00774683          	lbu	a3,7(a4)
ee000646:	c699                	beqz	a3,ee000654 <whisperPrintfImpl+0x654>
    whisperPutc(*s++);
ee000648:	0721                	addi	a4,a4,8
  tohost = c;
ee00064a:	00da8023          	sb	a3,0(s5)
  while (*s)
ee00064e:	00074483          	lbu	s1,0(a4)
ee000652:	f4c5                	bnez	s1,ee0005fa <whisperPrintfImpl+0x5fa>
  tohost = c;
ee000654:	49a9                	li	s3,10
ee000656:	013a8023          	sb	s3,0(s5)
          count += whisperPuts(va_arg(ap, char*));
ee00065a:	0505                	addi	a0,a0,1
          break;
ee00065c:	bc45                	j	ee00010c <whisperPrintfImpl+0x10c>
          count += whisperPrintDecimal(va_arg(ap, int), width, pad);
ee00065e:	0005a983          	lw	s3,0(a1)
ee000662:	0591                	addi	a1,a1,4
  if (neg)
ee000664:	4609c263          	bltz	s3,ee000ac8 <whisperPrintfImpl+0xac8>
ee000668:	834e                	mv	t1,s3
ee00066a:	d0580437          	lui	s0,0xd0580
ee00066e:	4701                	li	a4,0
      char c = '0' + (value % 10);
ee000670:	44a9                	li	s1,10
ee000672:	02936ab3          	rem	s5,t1,s1
ee000676:	893a                	mv	s2,a4
      buffer[charCount++] = c;
ee000678:	00c10b13          	addi	s6,sp,12
ee00067c:	0705                	addi	a4,a4,1
ee00067e:	9b3a                	add	s6,s6,a4
ee000680:	8a3a                	mv	s4,a4
      value = value / 10;
ee000682:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
ee000686:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
ee00068a:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
ee00068e:	0e030263          	beqz	t1,ee000772 <whisperPrintfImpl+0x772>
      char c = '0' + (value % 10);
ee000692:	02936ab3          	rem	s5,t1,s1
ee000696:	893a                	mv	s2,a4
      buffer[charCount++] = c;
ee000698:	00c10b13          	addi	s6,sp,12
ee00069c:	0705                	addi	a4,a4,1
ee00069e:	9b3a                	add	s6,s6,a4
      value = value / 10;
ee0006a0:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
ee0006a4:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
ee0006a8:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
ee0006ac:	0c030363          	beqz	t1,ee000772 <whisperPrintfImpl+0x772>
      char c = '0' + (value % 10);
ee0006b0:	02936ab3          	rem	s5,t1,s1
ee0006b4:	893a                	mv	s2,a4
      buffer[charCount++] = c;
ee0006b6:	00c10b13          	addi	s6,sp,12
ee0006ba:	002a0713          	addi	a4,s4,2
ee0006be:	9b3a                	add	s6,s6,a4
      value = value / 10;
ee0006c0:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
ee0006c4:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
ee0006c8:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
ee0006cc:	0a030363          	beqz	t1,ee000772 <whisperPrintfImpl+0x772>
      char c = '0' + (value % 10);
ee0006d0:	02936ab3          	rem	s5,t1,s1
ee0006d4:	893a                	mv	s2,a4
      buffer[charCount++] = c;
ee0006d6:	00c10b13          	addi	s6,sp,12
ee0006da:	003a0713          	addi	a4,s4,3
ee0006de:	9b3a                	add	s6,s6,a4
      value = value / 10;
ee0006e0:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
ee0006e4:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
ee0006e8:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
ee0006ec:	08030363          	beqz	t1,ee000772 <whisperPrintfImpl+0x772>
      char c = '0' + (value % 10);
ee0006f0:	02936ab3          	rem	s5,t1,s1
ee0006f4:	893a                	mv	s2,a4
      buffer[charCount++] = c;
ee0006f6:	00c10b13          	addi	s6,sp,12
ee0006fa:	004a0713          	addi	a4,s4,4
ee0006fe:	9b3a                	add	s6,s6,a4
      value = value / 10;
ee000700:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
ee000704:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
ee000708:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
ee00070c:	06030363          	beqz	t1,ee000772 <whisperPrintfImpl+0x772>
      char c = '0' + (value % 10);
ee000710:	02936ab3          	rem	s5,t1,s1
ee000714:	893a                	mv	s2,a4
      buffer[charCount++] = c;
ee000716:	00c10b13          	addi	s6,sp,12
ee00071a:	005a0713          	addi	a4,s4,5
ee00071e:	9b3a                	add	s6,s6,a4
      value = value / 10;
ee000720:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
ee000724:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
ee000728:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
ee00072c:	04030363          	beqz	t1,ee000772 <whisperPrintfImpl+0x772>
      char c = '0' + (value % 10);
ee000730:	02936ab3          	rem	s5,t1,s1
ee000734:	893a                	mv	s2,a4
      buffer[charCount++] = c;
ee000736:	00c10b13          	addi	s6,sp,12
ee00073a:	006a0713          	addi	a4,s4,6
ee00073e:	9b3a                	add	s6,s6,a4
      value = value / 10;
ee000740:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
ee000744:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
ee000748:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
ee00074c:	02030363          	beqz	t1,ee000772 <whisperPrintfImpl+0x772>
      char c = '0' + (value % 10);
ee000750:	02936ab3          	rem	s5,t1,s1
ee000754:	893a                	mv	s2,a4
      buffer[charCount++] = c;
ee000756:	007a0713          	addi	a4,s4,7
ee00075a:	00c10a13          	addi	s4,sp,12
ee00075e:	00ea0b33          	add	s6,s4,a4
      value = value / 10;
ee000762:	02934333          	div	t1,t1,s1
      char c = '0' + (value % 10);
ee000766:	030a8a93          	addi	s5,s5,48
      buffer[charCount++] = c;
ee00076a:	ff5b0fa3          	sb	s5,-1(s6)
  while (value);
ee00076e:	f00312e3          	bnez	t1,ee000672 <whisperPrintfImpl+0x672>
  char* p = buffer + charCount - 1;
ee000772:	0064                	addi	s1,sp,12
ee000774:	01248333          	add	t1,s1,s2
      buffer[charCount++] = c;
ee000778:	84ba                	mv	s1,a4
  for (int i = charCount; i < width; ++i)
ee00077a:	08d75563          	bge	a4,a3,ee000804 <whisperPrintfImpl+0x804>
ee00077e:	40e68a33          	sub	s4,a3,a4
ee000782:	007a7b13          	andi	s6,s4,7
ee000786:	040b0c63          	beqz	s6,ee0007de <whisperPrintfImpl+0x7de>
ee00078a:	4a85                	li	s5,1
ee00078c:	055b0463          	beq	s6,s5,ee0007d4 <whisperPrintfImpl+0x7d4>
ee000790:	4a09                	li	s4,2
ee000792:	034b0e63          	beq	s6,s4,ee0007ce <whisperPrintfImpl+0x7ce>
ee000796:	4a8d                	li	s5,3
ee000798:	035b0863          	beq	s6,s5,ee0007c8 <whisperPrintfImpl+0x7c8>
ee00079c:	4a11                	li	s4,4
ee00079e:	034b0263          	beq	s6,s4,ee0007c2 <whisperPrintfImpl+0x7c2>
ee0007a2:	4a95                	li	s5,5
ee0007a4:	015b0c63          	beq	s6,s5,ee0007bc <whisperPrintfImpl+0x7bc>
ee0007a8:	4a19                	li	s4,6
ee0007aa:	014b0663          	beq	s6,s4,ee0007b6 <whisperPrintfImpl+0x7b6>
  tohost = c;
ee0007ae:	00c40023          	sb	a2,0(s0) # d0580000 <STACK+0xe053e270>
  for (int i = charCount; i < width; ++i)
ee0007b2:	00170493          	addi	s1,a4,1
  tohost = c;
ee0007b6:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
ee0007ba:	0485                	addi	s1,s1,1
  tohost = c;
ee0007bc:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
ee0007c0:	0485                	addi	s1,s1,1
  tohost = c;
ee0007c2:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
ee0007c6:	0485                	addi	s1,s1,1
  tohost = c;
ee0007c8:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
ee0007cc:	0485                	addi	s1,s1,1
  tohost = c;
ee0007ce:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
ee0007d2:	0485                	addi	s1,s1,1
  tohost = c;
ee0007d4:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
ee0007d8:	0485                	addi	s1,s1,1
ee0007da:	02d48563          	beq	s1,a3,ee000804 <whisperPrintfImpl+0x804>
  tohost = c;
ee0007de:	00c40023          	sb	a2,0(s0)
ee0007e2:	00c40023          	sb	a2,0(s0)
ee0007e6:	00c40023          	sb	a2,0(s0)
ee0007ea:	00c40023          	sb	a2,0(s0)
ee0007ee:	00c40023          	sb	a2,0(s0)
ee0007f2:	00c40023          	sb	a2,0(s0)
ee0007f6:	00c40023          	sb	a2,0(s0)
ee0007fa:	00c40023          	sb	a2,0(s0)
  for (int i = charCount; i < width; ++i)
ee0007fe:	04a1                	addi	s1,s1,8
ee000800:	fcd49fe3          	bne	s1,a3,ee0007de <whisperPrintfImpl+0x7de>
ee000804:	00b10613          	addi	a2,sp,11
ee000808:	40c306b3          	sub	a3,t1,a2
ee00080c:	0076fb13          	andi	s6,a3,7
ee000810:	060b0963          	beqz	s6,ee000882 <whisperPrintfImpl+0x882>
ee000814:	4a85                	li	s5,1
ee000816:	055b0f63          	beq	s6,s5,ee000874 <whisperPrintfImpl+0x874>
ee00081a:	4a09                	li	s4,2
ee00081c:	054b0763          	beq	s6,s4,ee00086a <whisperPrintfImpl+0x86a>
ee000820:	448d                	li	s1,3
ee000822:	029b0f63          	beq	s6,s1,ee000860 <whisperPrintfImpl+0x860>
ee000826:	4691                	li	a3,4
ee000828:	02db0763          	beq	s6,a3,ee000856 <whisperPrintfImpl+0x856>
ee00082c:	4a95                	li	s5,5
ee00082e:	015b0f63          	beq	s6,s5,ee00084c <whisperPrintfImpl+0x84c>
ee000832:	4a19                	li	s4,6
ee000834:	014b0763          	beq	s6,s4,ee000842 <whisperPrintfImpl+0x842>
    whisperPutc(*p--);
ee000838:	00034b03          	lbu	s6,0(t1)
ee00083c:	137d                	addi	t1,t1,-1
  tohost = c;
ee00083e:	01640023          	sb	s6,0(s0)
    whisperPutc(*p--);
ee000842:	00034483          	lbu	s1,0(t1)
ee000846:	137d                	addi	t1,t1,-1
  tohost = c;
ee000848:	00940023          	sb	s1,0(s0)
    whisperPutc(*p--);
ee00084c:	00034683          	lbu	a3,0(t1)
ee000850:	137d                	addi	t1,t1,-1
  tohost = c;
ee000852:	00d40023          	sb	a3,0(s0)
    whisperPutc(*p--);
ee000856:	00034a83          	lbu	s5,0(t1)
ee00085a:	137d                	addi	t1,t1,-1
  tohost = c;
ee00085c:	01540023          	sb	s5,0(s0)
    whisperPutc(*p--);
ee000860:	00034a03          	lbu	s4,0(t1)
ee000864:	137d                	addi	t1,t1,-1
  tohost = c;
ee000866:	01440023          	sb	s4,0(s0)
    whisperPutc(*p--);
ee00086a:	00034b03          	lbu	s6,0(t1)
ee00086e:	137d                	addi	t1,t1,-1
  tohost = c;
ee000870:	01640023          	sb	s6,0(s0)
    whisperPutc(*p--);
ee000874:	00034483          	lbu	s1,0(t1)
ee000878:	137d                	addi	t1,t1,-1
  tohost = c;
ee00087a:	00940023          	sb	s1,0(s0)
  for (int i = 0; i < charCount; ++i)
ee00087e:	04c30563          	beq	t1,a2,ee0008c8 <whisperPrintfImpl+0x8c8>
    whisperPutc(*p--);
ee000882:	00034a83          	lbu	s5,0(t1)
ee000886:	fff34a03          	lbu	s4,-1(t1)
ee00088a:	ffe34683          	lbu	a3,-2(t1)
  tohost = c;
ee00088e:	01540023          	sb	s5,0(s0)
    whisperPutc(*p--);
ee000892:	ffd34b03          	lbu	s6,-3(t1)
  tohost = c;
ee000896:	01440023          	sb	s4,0(s0)
    whisperPutc(*p--);
ee00089a:	ffc34a83          	lbu	s5,-4(t1)
  tohost = c;
ee00089e:	00d40023          	sb	a3,0(s0)
    whisperPutc(*p--);
ee0008a2:	ffb34a03          	lbu	s4,-5(t1)
  tohost = c;
ee0008a6:	01640023          	sb	s6,0(s0)
    whisperPutc(*p--);
ee0008aa:	ffa34483          	lbu	s1,-6(t1)
  tohost = c;
ee0008ae:	01540023          	sb	s5,0(s0)
    whisperPutc(*p--);
ee0008b2:	ff934683          	lbu	a3,-7(t1)
  tohost = c;
ee0008b6:	01440023          	sb	s4,0(s0)
ee0008ba:	00940023          	sb	s1,0(s0)
    whisperPutc(*p--);
ee0008be:	1361                	addi	t1,t1,-8
  tohost = c;
ee0008c0:	00d40023          	sb	a3,0(s0)
  for (int i = 0; i < charCount; ++i)
ee0008c4:	fac31fe3          	bne	t1,a2,ee000882 <whisperPrintfImpl+0x882>
  if (neg)
ee0008c8:	d209d0e3          	bgez	s3,ee0005e8 <whisperPrintfImpl+0x5e8>
    charCount++;
ee0008cc:	00290713          	addi	a4,s2,2
          count += whisperPrintInt(va_arg(ap, int), width, pad, 8);
ee0008d0:	953a                	add	a0,a0,a4
          break;
ee0008d2:	b82d                	j	ee00010c <whisperPrintfImpl+0x10c>
  unsigned uu = value;
ee0008d4:	4194                	lw	a3,0(a1)
  int charCount = 0;
ee0008d6:	4701                	li	a4,0
          count += whisperPrintInt(va_arg(ap, int), width, pad, 8);
ee0008d8:	0591                	addi	a1,a1,4
          buffer[charCount++] = c;
ee0008da:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
ee0008dc:	0076fa93          	andi	s5,a3,7
          buffer[charCount++] = c;
ee0008e0:	0705                	addi	a4,a4,1
ee0008e2:	0070                	addi	a2,sp,12
ee0008e4:	00e60933          	add	s2,a2,a4
          char c = '0' + (uu & 7);
ee0008e8:	030a8413          	addi	s0,s5,48
          buffer[charCount++] = c;
ee0008ec:	fe890fa3          	sb	s0,-1(s2)
          uu >>= 3;
ee0008f0:	0036db13          	srli	s6,a3,0x3
          buffer[charCount++] = c;
ee0008f4:	8a3a                	mv	s4,a4
      while (uu);
ee0008f6:	0e0b0263          	beqz	s6,ee0009da <whisperPrintfImpl+0x9da>
          buffer[charCount++] = c;
ee0008fa:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
ee0008fc:	007b7993          	andi	s3,s6,7
          buffer[charCount++] = c;
ee000900:	0705                	addi	a4,a4,1
ee000902:	0064                	addi	s1,sp,12
ee000904:	00e48ab3          	add	s5,s1,a4
          char c = '0' + (uu & 7);
ee000908:	03098613          	addi	a2,s3,48
          buffer[charCount++] = c;
ee00090c:	feca8fa3          	sb	a2,-1(s5)
          uu >>= 3;
ee000910:	0066d913          	srli	s2,a3,0x6
      while (uu);
ee000914:	0c090363          	beqz	s2,ee0009da <whisperPrintfImpl+0x9da>
          buffer[charCount++] = c;
ee000918:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
ee00091a:	00797413          	andi	s0,s2,7
          buffer[charCount++] = c;
ee00091e:	002a0713          	addi	a4,s4,2
ee000922:	00c10b13          	addi	s6,sp,12
ee000926:	00eb09b3          	add	s3,s6,a4
          char c = '0' + (uu & 7);
ee00092a:	03040493          	addi	s1,s0,48
          buffer[charCount++] = c;
ee00092e:	fe998fa3          	sb	s1,-1(s3)
          uu >>= 3;
ee000932:	0096da93          	srli	s5,a3,0x9
      while (uu);
ee000936:	0a0a8263          	beqz	s5,ee0009da <whisperPrintfImpl+0x9da>
          buffer[charCount++] = c;
ee00093a:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
ee00093c:	007af613          	andi	a2,s5,7
          buffer[charCount++] = c;
ee000940:	003a0713          	addi	a4,s4,3
ee000944:	00c10913          	addi	s2,sp,12
ee000948:	00e90433          	add	s0,s2,a4
          char c = '0' + (uu & 7);
ee00094c:	03060b13          	addi	s6,a2,48
          buffer[charCount++] = c;
ee000950:	ff640fa3          	sb	s6,-1(s0)
          uu >>= 3;
ee000954:	00c6d993          	srli	s3,a3,0xc
      while (uu);
ee000958:	08098163          	beqz	s3,ee0009da <whisperPrintfImpl+0x9da>
          buffer[charCount++] = c;
ee00095c:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
ee00095e:	0079fa93          	andi	s5,s3,7
          buffer[charCount++] = c;
ee000962:	004a0713          	addi	a4,s4,4
ee000966:	0064                	addi	s1,sp,12
ee000968:	00e48933          	add	s2,s1,a4
          char c = '0' + (uu & 7);
ee00096c:	030a8613          	addi	a2,s5,48
          buffer[charCount++] = c;
ee000970:	fec90fa3          	sb	a2,-1(s2)
          uu >>= 3;
ee000974:	00f6d413          	srli	s0,a3,0xf
      while (uu);
ee000978:	c02d                	beqz	s0,ee0009da <whisperPrintfImpl+0x9da>
          buffer[charCount++] = c;
ee00097a:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
ee00097c:	00747b13          	andi	s6,s0,7
          buffer[charCount++] = c;
ee000980:	005a0713          	addi	a4,s4,5
ee000984:	00c10993          	addi	s3,sp,12
ee000988:	00e98ab3          	add	s5,s3,a4
          char c = '0' + (uu & 7);
ee00098c:	030b0493          	addi	s1,s6,48
          buffer[charCount++] = c;
ee000990:	fe9a8fa3          	sb	s1,-1(s5)
          uu >>= 3;
ee000994:	0126d913          	srli	s2,a3,0x12
      while (uu);
ee000998:	04090163          	beqz	s2,ee0009da <whisperPrintfImpl+0x9da>
          buffer[charCount++] = c;
ee00099c:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
ee00099e:	00797613          	andi	a2,s2,7
          buffer[charCount++] = c;
ee0009a2:	006a0713          	addi	a4,s4,6
ee0009a6:	0060                	addi	s0,sp,12
ee0009a8:	00e40b33          	add	s6,s0,a4
          char c = '0' + (uu & 7);
ee0009ac:	03060993          	addi	s3,a2,48
          buffer[charCount++] = c;
ee0009b0:	ff3b0fa3          	sb	s3,-1(s6)
          uu >>= 3;
ee0009b4:	0156da93          	srli	s5,a3,0x15
      while (uu);
ee0009b8:	020a8163          	beqz	s5,ee0009da <whisperPrintfImpl+0x9da>
          buffer[charCount++] = c;
ee0009bc:	833a                	mv	t1,a4
          char c = '0' + (uu & 7);
ee0009be:	007af493          	andi	s1,s5,7
          buffer[charCount++] = c;
ee0009c2:	007a0713          	addi	a4,s4,7
ee0009c6:	00c10a13          	addi	s4,sp,12
ee0009ca:	00ea0933          	add	s2,s4,a4
          char c = '0' + (uu & 7);
ee0009ce:	03048613          	addi	a2,s1,48
          buffer[charCount++] = c;
ee0009d2:	fec90fa3          	sb	a2,-1(s2)
          uu >>= 3;
ee0009d6:	82e1                	srli	a3,a3,0x18
      while (uu);
ee0009d8:	f289                	bnez	a3,ee0008da <whisperPrintfImpl+0x8da>
  char* p = buffer + charCount - 1;
ee0009da:	0060                	addi	s0,sp,12
ee0009dc:	006406b3          	add	a3,s0,t1
  for (unsigned i = 0; i < charCount; ++i)
ee0009e0:	00b10b13          	addi	s6,sp,11
ee0009e4:	416689b3          	sub	s3,a3,s6
ee0009e8:	0079fa93          	andi	s5,s3,7
ee0009ec:	d0580a37          	lui	s4,0xd0580
ee0009f0:	060a8963          	beqz	s5,ee000a62 <whisperPrintfImpl+0xa62>
ee0009f4:	4305                	li	t1,1
ee0009f6:	046a8f63          	beq	s5,t1,ee000a54 <whisperPrintfImpl+0xa54>
ee0009fa:	4489                	li	s1,2
ee0009fc:	049a8763          	beq	s5,s1,ee000a4a <whisperPrintfImpl+0xa4a>
ee000a00:	490d                	li	s2,3
ee000a02:	032a8f63          	beq	s5,s2,ee000a40 <whisperPrintfImpl+0xa40>
ee000a06:	4611                	li	a2,4
ee000a08:	02ca8763          	beq	s5,a2,ee000a36 <whisperPrintfImpl+0xa36>
ee000a0c:	4415                	li	s0,5
ee000a0e:	008a8f63          	beq	s5,s0,ee000a2c <whisperPrintfImpl+0xa2c>
ee000a12:	4999                	li	s3,6
ee000a14:	013a8763          	beq	s5,s3,ee000a22 <whisperPrintfImpl+0xa22>
    whisperPutc(*p--);
ee000a18:	0006ca83          	lbu	s5,0(a3)
ee000a1c:	16fd                	addi	a3,a3,-1
  tohost = c;
ee000a1e:	015a0023          	sb	s5,0(s4) # d0580000 <STACK+0xe053e270>
    whisperPutc(*p--);
ee000a22:	0006c303          	lbu	t1,0(a3)
ee000a26:	16fd                	addi	a3,a3,-1
  tohost = c;
ee000a28:	006a0023          	sb	t1,0(s4)
    whisperPutc(*p--);
ee000a2c:	0006c483          	lbu	s1,0(a3)
ee000a30:	16fd                	addi	a3,a3,-1
  tohost = c;
ee000a32:	009a0023          	sb	s1,0(s4)
    whisperPutc(*p--);
ee000a36:	0006c903          	lbu	s2,0(a3)
ee000a3a:	16fd                	addi	a3,a3,-1
  tohost = c;
ee000a3c:	012a0023          	sb	s2,0(s4)
    whisperPutc(*p--);
ee000a40:	0006c603          	lbu	a2,0(a3)
ee000a44:	16fd                	addi	a3,a3,-1
  tohost = c;
ee000a46:	00ca0023          	sb	a2,0(s4)
    whisperPutc(*p--);
ee000a4a:	0006c403          	lbu	s0,0(a3)
ee000a4e:	16fd                	addi	a3,a3,-1
  tohost = c;
ee000a50:	008a0023          	sb	s0,0(s4)
    whisperPutc(*p--);
ee000a54:	0006c983          	lbu	s3,0(a3)
ee000a58:	16fd                	addi	a3,a3,-1
  tohost = c;
ee000a5a:	013a0023          	sb	s3,0(s4)
  for (unsigned i = 0; i < charCount; ++i)
ee000a5e:	b96685e3          	beq	a3,s6,ee0005e8 <whisperPrintfImpl+0x5e8>
    whisperPutc(*p--);
ee000a62:	0006ca83          	lbu	s5,0(a3)
ee000a66:	fff6c903          	lbu	s2,-1(a3)
ee000a6a:	ffe6c303          	lbu	t1,-2(a3)
  tohost = c;
ee000a6e:	015a0023          	sb	s5,0(s4)
    whisperPutc(*p--);
ee000a72:	ffd6c483          	lbu	s1,-3(a3)
  tohost = c;
ee000a76:	012a0023          	sb	s2,0(s4)
    whisperPutc(*p--);
ee000a7a:	ffc6c603          	lbu	a2,-4(a3)
  tohost = c;
ee000a7e:	006a0023          	sb	t1,0(s4)
    whisperPutc(*p--);
ee000a82:	ffb6c403          	lbu	s0,-5(a3)
  tohost = c;
ee000a86:	009a0023          	sb	s1,0(s4)
    whisperPutc(*p--);
ee000a8a:	ffa6c983          	lbu	s3,-6(a3)
  tohost = c;
ee000a8e:	00ca0023          	sb	a2,0(s4)
    whisperPutc(*p--);
ee000a92:	ff96ca83          	lbu	s5,-7(a3)
  tohost = c;
ee000a96:	008a0023          	sb	s0,0(s4)
ee000a9a:	013a0023          	sb	s3,0(s4)
    whisperPutc(*p--);
ee000a9e:	16e1                	addi	a3,a3,-8
  tohost = c;
ee000aa0:	015a0023          	sb	s5,0(s4)
  for (unsigned i = 0; i < charCount; ++i)
ee000aa4:	fb669fe3          	bne	a3,s6,ee000a62 <whisperPrintfImpl+0xa62>
ee000aa8:	b681                	j	ee0005e8 <whisperPrintfImpl+0x5e8>
          whisperPutc(va_arg(ap, int));
ee000aaa:	0005c983          	lbu	s3,0(a1)
  tohost = c;
ee000aae:	d0580437          	lui	s0,0xd0580
          ++count;
ee000ab2:	0505                	addi	a0,a0,1
  tohost = c;
ee000ab4:	01340023          	sb	s3,0(s0) # d0580000 <STACK+0xe053e270>
          whisperPutc(va_arg(ap, int));
ee000ab8:	0591                	addi	a1,a1,4
          break;
ee000aba:	e52ff06f          	j	ee00010c <whisperPrintfImpl+0x10c>
      while (*fp == '0')
ee000abe:	8732                	mv	a4,a2
      char pad = ' ';
ee000ac0:	02000613          	li	a2,32
ee000ac4:	e00ff06f          	j	ee0000c4 <whisperPrintfImpl+0xc4>
  tohost = c;
ee000ac8:	d0580437          	lui	s0,0xd0580
ee000acc:	02d00713          	li	a4,45
      value = -value;
ee000ad0:	41300333          	neg	t1,s3
  tohost = c;
ee000ad4:	00e40023          	sb	a4,0(s0) # d0580000 <STACK+0xe053e270>
      width--;
ee000ad8:	16fd                	addi	a3,a3,-1
ee000ada:	be51                	j	ee00066e <whisperPrintfImpl+0x66e>
  int count = 0;  // Printed character count
ee000adc:	4501                	li	a0,0
  return count;
ee000ade:	8082                	ret

ee000ae0 <whisperPrintf>:


int
whisperPrintf(const char* format, ...)
{
ee000ae0:	7139                	addi	sp,sp,-64
  va_list ap;

  va_start(ap, format);
ee000ae2:	02410313          	addi	t1,sp,36
{
ee000ae6:	d22e                	sw	a1,36(sp)
  int code = whisperPrintfImpl(format, ap);
ee000ae8:	859a                	mv	a1,t1
{
ee000aea:	ce06                	sw	ra,28(sp)
ee000aec:	d432                	sw	a2,40(sp)
ee000aee:	d636                	sw	a3,44(sp)
ee000af0:	d83a                	sw	a4,48(sp)
ee000af2:	da3e                	sw	a5,52(sp)
ee000af4:	dc42                	sw	a6,56(sp)
ee000af6:	de46                	sw	a7,60(sp)
  va_start(ap, format);
ee000af8:	c61a                	sw	t1,12(sp)
  int code = whisperPrintfImpl(format, ap);
ee000afa:	d06ff0ef          	jal	ra,ee000000 <whisperPrintfImpl>
  va_end(ap);

  return code;
}
ee000afe:	40f2                	lw	ra,28(sp)
ee000b00:	6121                	addi	sp,sp,64
ee000b02:	8082                	ret

ee000b04 <putchar>:

int
putchar(int c)
{
  return whisperPutc(c);
ee000b04:	0ff57513          	zext.b	a0,a0
  tohost = c;
ee000b08:	d05807b7          	lui	a5,0xd0580
ee000b0c:	00a78023          	sb	a0,0(a5) # d0580000 <STACK+0xe053e270>
}
ee000b10:	8082                	ret

ee000b12 <putc>:
struct FILE;

int
putc(int c, struct FILE* f)
{
  return whisperPutc(c);
ee000b12:	0ff57513          	zext.b	a0,a0
  tohost = c;
ee000b16:	d05807b7          	lui	a5,0xd0580
ee000b1a:	00a78023          	sb	a0,0(a5) # d0580000 <STACK+0xe053e270>
}
ee000b1e:	8082                	ret

ee000b20 <puts>:
  while (*s)
ee000b20:	00054803          	lbu	a6,0(a0)
ee000b24:	d05807b7          	lui	a5,0xd0580
ee000b28:	04080f63          	beqz	a6,ee000b86 <puts+0x66>
  tohost = c;
ee000b2c:	01078023          	sb	a6,0(a5) # d0580000 <STACK+0xe053e270>
  while (*s)
ee000b30:	00154703          	lbu	a4,1(a0)
ee000b34:	cb29                	beqz	a4,ee000b86 <puts+0x66>
  tohost = c;
ee000b36:	00e78023          	sb	a4,0(a5)
  while (*s)
ee000b3a:	00254283          	lbu	t0,2(a0)
ee000b3e:	04028463          	beqz	t0,ee000b86 <puts+0x66>
  tohost = c;
ee000b42:	00578023          	sb	t0,0(a5)
  while (*s)
ee000b46:	00354303          	lbu	t1,3(a0)
ee000b4a:	02030e63          	beqz	t1,ee000b86 <puts+0x66>
  tohost = c;
ee000b4e:	00678023          	sb	t1,0(a5)
  while (*s)
ee000b52:	00454383          	lbu	t2,4(a0)
ee000b56:	02038863          	beqz	t2,ee000b86 <puts+0x66>
  tohost = c;
ee000b5a:	00778023          	sb	t2,0(a5)
  while (*s)
ee000b5e:	00554583          	lbu	a1,5(a0)
ee000b62:	c195                	beqz	a1,ee000b86 <puts+0x66>
  tohost = c;
ee000b64:	00b78023          	sb	a1,0(a5)
  while (*s)
ee000b68:	00654603          	lbu	a2,6(a0)
ee000b6c:	ce09                	beqz	a2,ee000b86 <puts+0x66>
  tohost = c;
ee000b6e:	00c78023          	sb	a2,0(a5)
  while (*s)
ee000b72:	00754683          	lbu	a3,7(a0)
    whisperPutc(*s++);
ee000b76:	0521                	addi	a0,a0,8
  while (*s)
ee000b78:	c699                	beqz	a3,ee000b86 <puts+0x66>
  tohost = c;
ee000b7a:	00d78023          	sb	a3,0(a5)
  while (*s)
ee000b7e:	00054803          	lbu	a6,0(a0)
ee000b82:	fa0815e3          	bnez	a6,ee000b2c <puts+0xc>
  tohost = c;
ee000b86:	4529                	li	a0,10
ee000b88:	00a78023          	sb	a0,0(a5)

int
puts(const char* s)
{
  return whisperPuts(s);
}
ee000b8c:	4505                	li	a0,1
ee000b8e:	8082                	ret

ee000b90 <printf>:

int
printf(const char* format, ...)
{
ee000b90:	7139                	addi	sp,sp,-64
  va_list ap;

  va_start(ap, format);
ee000b92:	02410313          	addi	t1,sp,36
{
ee000b96:	d22e                	sw	a1,36(sp)
  int code = whisperPrintfImpl(format, ap);
ee000b98:	859a                	mv	a1,t1
{
ee000b9a:	ce06                	sw	ra,28(sp)
ee000b9c:	d432                	sw	a2,40(sp)
ee000b9e:	d636                	sw	a3,44(sp)
ee000ba0:	d83a                	sw	a4,48(sp)
ee000ba2:	da3e                	sw	a5,52(sp)
ee000ba4:	dc42                	sw	a6,56(sp)
ee000ba6:	de46                	sw	a7,60(sp)
  va_start(ap, format);
ee000ba8:	c61a                	sw	t1,12(sp)
  int code = whisperPrintfImpl(format, ap);
ee000baa:	c56ff0ef          	jal	ra,ee000000 <whisperPrintfImpl>
  va_end(ap);

  return code;
}
ee000bae:	40f2                	lw	ra,28(sp)
ee000bb0:	6121                	addi	sp,sp,64
ee000bb2:	8082                	ret

ee000bb4 <get_mcycle>:
unsigned int mcyclel;
unsigned int mcycleh0 = 0, mcycleh1=1;
uint64_t cycles;

while(mcycleh0 != mcycleh1) {
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
ee000bb4:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
ee000bb8:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
ee000bbc:	b80027f3          	csrr	a5,mcycleh
while(mcycleh0 != mcycleh1) {
ee000bc0:	06f58b63          	beq	a1,a5,ee000c36 <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
ee000bc4:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
ee000bc8:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
ee000bcc:	b80022f3          	csrr	t0,mcycleh
while(mcycleh0 != mcycleh1) {
ee000bd0:	06558363          	beq	a1,t0,ee000c36 <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
ee000bd4:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
ee000bd8:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
ee000bdc:	b8002373          	csrr	t1,mcycleh
while(mcycleh0 != mcycleh1) {
ee000be0:	04658b63          	beq	a1,t1,ee000c36 <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
ee000be4:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
ee000be8:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
ee000bec:	b80023f3          	csrr	t2,mcycleh
while(mcycleh0 != mcycleh1) {
ee000bf0:	04758363          	beq	a1,t2,ee000c36 <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
ee000bf4:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
ee000bf8:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
ee000bfc:	b8002673          	csrr	a2,mcycleh
while(mcycleh0 != mcycleh1) {
ee000c00:	02c58b63          	beq	a1,a2,ee000c36 <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
ee000c04:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
ee000c08:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
ee000c0c:	b80026f3          	csrr	a3,mcycleh
while(mcycleh0 != mcycleh1) {
ee000c10:	02d58363          	beq	a1,a3,ee000c36 <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
ee000c14:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
ee000c18:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
ee000c1c:	b8002773          	csrr	a4,mcycleh
while(mcycleh0 != mcycleh1) {
ee000c20:	00e58b63          	beq	a1,a4,ee000c36 <get_mcycle+0x82>
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh0) );
ee000c24:	b80025f3          	csrr	a1,mcycleh
    asm volatile ("csrr %0,mcycle"   : "=r" (mcyclel)  );
ee000c28:	b0002573          	csrr	a0,mcycle
    asm volatile ("csrr %0,mcycleh"  : "=r" (mcycleh1) );
ee000c2c:	b8002873          	csrr	a6,mcycleh
while(mcycleh0 != mcycleh1) {
ee000c30:	f90592e3          	bne	a1,a6,ee000bb4 <get_mcycle>
ee000c34:	8082                	ret
}
cycles = mcycleh1;
return (cycles << 32) | mcyclel;

}
ee000c36:	8082                	ret

ee000c38 <cmp_idx>:
        Compare the idx item in a list cell, and regen the data.

        Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res) {
        if (res==NULL) {
ee000c38:	c619                	beqz	a2,ee000c46 <cmp_idx+0xe>
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
        }
        return a->idx - b->idx;
ee000c3a:	00251503          	lh	a0,2(a0)
ee000c3e:	00259583          	lh	a1,2(a1)
}
ee000c42:	8d0d                	sub	a0,a0,a1
ee000c44:	8082                	ret
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
ee000c46:	00051783          	lh	a5,0(a0)
ee000c4a:	01079713          	slli	a4,a5,0x10
ee000c4e:	01075293          	srli	t0,a4,0x10
ee000c52:	f007f313          	andi	t1,a5,-256
ee000c56:	0082d393          	srli	t2,t0,0x8
ee000c5a:	00736633          	or	a2,t1,t2
ee000c5e:	00c51023          	sh	a2,0(a0)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
ee000c62:	00059683          	lh	a3,0(a1)
        return a->idx - b->idx;
ee000c66:	00251503          	lh	a0,2(a0)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
ee000c6a:	01069813          	slli	a6,a3,0x10
ee000c6e:	01085893          	srli	a7,a6,0x10
ee000c72:	f006fe13          	andi	t3,a3,-256
ee000c76:	0088de93          	srli	t4,a7,0x8
ee000c7a:	01de6f33          	or	t5,t3,t4
ee000c7e:	01e59023          	sh	t5,0(a1)
        return a->idx - b->idx;
ee000c82:	00259583          	lh	a1,2(a1)
}
ee000c86:	8d0d                	sub	a0,a0,a1
ee000c88:	8082                	ret

ee000c8a <copy_info>:

void copy_info(list_data *to,list_data *from) {
        to->data16=from->data16;
ee000c8a:	00059703          	lh	a4,0(a1)
        to->idx=from->idx;
ee000c8e:	00259783          	lh	a5,2(a1)
        to->data16=from->data16;
ee000c92:	00e51023          	sh	a4,0(a0)
        to->idx=from->idx;
ee000c96:	00f51123          	sh	a5,2(a0)
}
ee000c9a:	8082                	ret

ee000c9c <core_list_init>:

*/
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
        /* calculated pointers for the list */
        ee_u32 per_item=16+sizeof(struct list_data_s);
        ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
ee000c9c:	47d1                	li	a5,20
ee000c9e:	02f55533          	divu	a0,a0,a5
        ee_u32 i;
        list_head *finder,*list=memblock;
        list_data info;

        /* create a fake items for the list head and tail */
        list->next=NULL;
ee000ca2:	0005a023          	sw	zero,0(a1)
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
ee000ca6:	87ae                	mv	a5,a1
*/
list_head *core_list_insert_new(list_head *insert_point, list_data *info, list_head **memblock, list_data **datablock
        , list_head *memblock_end, list_data *datablock_end) {
        list_head *newitem;

        if ((*memblock+1) >= memblock_end)
ee000ca8:	01058813          	addi	a6,a1,16
        memblock++;
ee000cac:	00858713          	addi	a4,a1,8
        list->info->data16=(ee_s16)0x8080;
ee000cb0:	76e1                	lui	a3,0xffff8
ee000cb2:	08068893          	addi	a7,a3,128 # ffff8080 <STACK+0xffb62f0>
list_head *core_list_init(ee_u32 blksize, list_head *memblock, ee_s16 seed) {
ee000cb6:	8332                	mv	t1,a2
        ee_u32 size=(blksize/per_item)-2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
ee000cb8:	1579                	addi	a0,a0,-2
        list_head *memblock_end=memblock+size;
ee000cba:	00351593          	slli	a1,a0,0x3
ee000cbe:	95be                	add	a1,a1,a5
        list->info=datablock;
ee000cc0:	c3cc                	sw	a1,4(a5)
        list_data *datablock_end=datablock+size;
ee000cc2:	00251e13          	slli	t3,a0,0x2
        list->info->idx=0x0000;
ee000cc6:	00059123          	sh	zero,2(a1)
        list->info->data16=(ee_s16)0x8080;
ee000cca:	01159023          	sh	a7,0(a1)
        list_data *datablock_end=datablock+size;
ee000cce:	9e2e                	add	t3,t3,a1
        datablock++;
ee000cd0:	00458613          	addi	a2,a1,4
        if ((*memblock+1) >= memblock_end)
ee000cd4:	2cb87b63          	bgeu	a6,a1,ee000faa <core_list_init+0x30e>
                return NULL;
        if ((*datablock+1) >= datablock_end)
ee000cd8:	00858293          	addi	t0,a1,8
ee000cdc:	2dc2f763          	bgeu	t0,t3,ee000faa <core_list_init+0x30e>
                return NULL;

        newitem=*memblock;
        (*memblock)++;
        newitem->next=insert_point->next;
        insert_point->next=newitem;
ee000ce0:	c398                	sw	a4,0(a5)

        newitem->info=*datablock;
ee000ce2:	c7d0                	sw	a2,12(a5)
        newitem->next=insert_point->next;
ee000ce4:	0007a423          	sw	zero,8(a5)
        to->idx=from->idx;
ee000ce8:	fff6c613          	not	a2,a3
        (*datablock)++;
        copy_info(newitem->info,info);

        return newitem;
ee000cec:	86ba                	mv	a3,a4
        to->data16=from->data16;
ee000cee:	577d                	li	a4,-1
ee000cf0:	00e59223          	sh	a4,4(a1)
        to->idx=from->idx;
ee000cf4:	00c59323          	sh	a2,6(a1)
        return newitem;
ee000cf8:	8742                	mv	a4,a6
ee000cfa:	8616                	mv	a2,t0
        for (i=0; i<size; i++) {
ee000cfc:	c55d                	beqz	a0,ee000daa <core_list_init+0x10e>
                        ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
ee000cfe:	01031f93          	slli	t6,t1,0x10
        to->idx=from->idx;
ee000d02:	7ee1                	lui	t4,0xffff8
ee000d04:	00157393          	andi	t2,a0,1
                        ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
ee000d08:	010fdf93          	srli	t6,t6,0x10
ee000d0c:	4801                	li	a6,0
        to->idx=from->idx;
ee000d0e:	fffece93          	not	t4,t4
ee000d12:	24039e63          	bnez	t2,ee000f6e <core_list_init+0x2d2>
        if ((*memblock+1) >= memblock_end)
ee000d16:	00870293          	addi	t0,a4,8
ee000d1a:	08b2f863          	bgeu	t0,a1,ee000daa <core_list_init+0x10e>
        if ((*datablock+1) >= datablock_end)
ee000d1e:	00460393          	addi	t2,a2,4
ee000d22:	03c3fd63          	bgeu	t2,t3,ee000d5c <core_list_init+0xc0>
ee000d26:	01081893          	slli	a7,a6,0x10
ee000d2a:	0108df13          	srli	t5,a7,0x10
                ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
ee000d2e:	01ff48b3          	xor	a7,t5,t6
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
ee000d32:	088e                	slli	a7,a7,0x3
ee000d34:	0788f893          	andi	a7,a7,120
ee000d38:	007f7f13          	andi	t5,t5,7
        newitem->next=insert_point->next;
ee000d3c:	c314                	sw	a3,0(a4)
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
ee000d3e:	01e8e6b3          	or	a3,a7,t5
        insert_point->next=newitem;
ee000d42:	c398                	sw	a4,0(a5)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
ee000d44:	00869893          	slli	a7,a3,0x8
        newitem->info=*datablock;
ee000d48:	c350                	sw	a2,4(a4)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
ee000d4a:	00d8ef33          	or	t5,a7,a3
        to->data16=from->data16;
ee000d4e:	01e61023          	sh	t5,0(a2)
        to->idx=from->idx;
ee000d52:	01d61123          	sh	t4,2(a2)
        return newitem;
ee000d56:	86ba                	mv	a3,a4
        if ((*datablock+1) >= datablock_end)
ee000d58:	861e                	mv	a2,t2
        if ((*memblock+1) >= memblock_end)
ee000d5a:	8716                	mv	a4,t0
ee000d5c:	00870293          	addi	t0,a4,8
        for (i=0; i<size; i++) {
ee000d60:	0805                	addi	a6,a6,1
        if ((*memblock+1) >= memblock_end)
ee000d62:	04b2f463          	bgeu	t0,a1,ee000daa <core_list_init+0x10e>
        if ((*datablock+1) >= datablock_end)
ee000d66:	00460393          	addi	t2,a2,4
ee000d6a:	03c3fd63          	bgeu	t2,t3,ee000da4 <core_list_init+0x108>
ee000d6e:	01081893          	slli	a7,a6,0x10
ee000d72:	0108df13          	srli	t5,a7,0x10
                ee_u16 datpat=((ee_u16)(seed^i) & 0xf);
ee000d76:	01ff48b3          	xor	a7,t5,t6
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
ee000d7a:	088e                	slli	a7,a7,0x3
ee000d7c:	0788f893          	andi	a7,a7,120
ee000d80:	007f7f13          	andi	t5,t5,7
        newitem->next=insert_point->next;
ee000d84:	c314                	sw	a3,0(a4)
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
ee000d86:	01e8e6b3          	or	a3,a7,t5
        insert_point->next=newitem;
ee000d8a:	c398                	sw	a4,0(a5)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
ee000d8c:	00869893          	slli	a7,a3,0x8
        newitem->info=*datablock;
ee000d90:	c350                	sw	a2,4(a4)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
ee000d92:	00d8ef33          	or	t5,a7,a3
        to->data16=from->data16;
ee000d96:	01e61023          	sh	t5,0(a2)
        to->idx=from->idx;
ee000d9a:	01d61123          	sh	t4,2(a2)
        return newitem;
ee000d9e:	86ba                	mv	a3,a4
        if ((*datablock+1) >= datablock_end)
ee000da0:	861e                	mv	a2,t2
        if ((*memblock+1) >= memblock_end)
ee000da2:	8716                	mv	a4,t0
        for (i=0; i<size; i++) {
ee000da4:	0805                	addi	a6,a6,1
ee000da6:	f70518e3          	bne	a0,a6,ee000d16 <core_list_init+0x7a>
        while (finder->next!=NULL) {
ee000daa:	428c                	lw	a1,0(a3)
ee000dac:	c1bd                	beqz	a1,ee000e12 <core_list_init+0x176>
                if (i<size/5) /* first 20% of the list in order */
ee000dae:	4e15                	li	t3,5
ee000db0:	03c55fb3          	divu	t6,a0,t3
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
ee000db4:	6511                	lui	a0,0x4
                if (i<size/5) /* first 20% of the list in order */
ee000db6:	20000713          	li	a4,512
ee000dba:	4605                	li	a2,1
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
ee000dbc:	fff50e93          	addi	t4,a0,-1 # 3fff <_start-0x7fffc001>
ee000dc0:	a005                	j	ee000de0 <core_list_init+0x144>
        while (finder->next!=NULL) {
ee000dc2:	0005a803          	lw	a6,0(a1)
ee000dc6:	10070513          	addi	a0,a4,256
                        finder->info->idx=i++;
ee000dca:	00c29123          	sh	a2,2(t0)
        while (finder->next!=NULL) {
ee000dce:	01051293          	slli	t0,a0,0x10
ee000dd2:	0605                	addi	a2,a2,1
ee000dd4:	0102d713          	srli	a4,t0,0x10
ee000dd8:	02080d63          	beqz	a6,ee000e12 <core_list_init+0x176>
                if (i<size/5) /* first 20% of the list in order */
ee000ddc:	86ae                	mv	a3,a1
ee000dde:	85c2                	mv	a1,a6
                        finder->info->idx=i++;
ee000de0:	0046a283          	lw	t0,4(a3)
                if (i<size/5) /* first 20% of the list in order */
ee000de4:	fdf66fe3          	bltu	a2,t6,ee000dc2 <core_list_init+0x126>
                        ee_u16 pat=(ee_u16)(i++ ^ seed); /* get a pseudo random number */
ee000de8:	00c343b3          	xor	t2,t1,a2
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
ee000dec:	70077893          	andi	a7,a4,1792
        while (finder->next!=NULL) {
ee000df0:	0005a803          	lw	a6,0(a1)
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
ee000df4:	0113ef33          	or	t5,t2,a7
        while (finder->next!=NULL) {
ee000df8:	10070713          	addi	a4,a4,256
                        finder->info->idx=0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
ee000dfc:	01df76b3          	and	a3,t5,t4
        while (finder->next!=NULL) {
ee000e00:	01071e13          	slli	t3,a4,0x10
                        finder->info->idx=i++;
ee000e04:	00d29123          	sh	a3,2(t0)
        while (finder->next!=NULL) {
ee000e08:	0605                	addi	a2,a2,1
ee000e0a:	010e5713          	srli	a4,t3,0x10
ee000e0e:	fc0817e3          	bnez	a6,ee000ddc <core_list_init+0x140>
 */
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
    list_head *p, *q, *e, *tail;
    ee_s32 insize, nmerges, psize, qsize, i;

    insize = 1;
ee000e12:	4f85                	li	t6,1

    while (1) {
        p = list;
        list = NULL;
        tail = NULL;
ee000e14:	4801                	li	a6,0
        list = NULL;
ee000e16:	4501                	li	a0,0

        nmerges = 0;  /* count number of merges we do in this pass */
ee000e18:	4281                	li	t0,0
        }

            tail->next = NULL;

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
ee000e1a:	4385                	li	t2,1
            nmerges++;  /* there exists a merge to be done */
ee000e1c:	007ff313          	andi	t1,t6,7
ee000e20:	0285                	addi	t0,t0,1
ee000e22:	873e                	mv	a4,a5
            psize = 0;
ee000e24:	4681                	li	a3,0
ee000e26:	04030b63          	beqz	t1,ee000e7c <core_list_init+0x1e0>
ee000e2a:	4585                	li	a1,1
ee000e2c:	04b30363          	beq	t1,a1,ee000e72 <core_list_init+0x1d6>
ee000e30:	4e89                	li	t4,2
ee000e32:	03d30d63          	beq	t1,t4,ee000e6c <core_list_init+0x1d0>
ee000e36:	488d                	li	a7,3
ee000e38:	03130763          	beq	t1,a7,ee000e66 <core_list_init+0x1ca>
ee000e3c:	4f11                	li	t5,4
ee000e3e:	03e30163          	beq	t1,t5,ee000e60 <core_list_init+0x1c4>
ee000e42:	4615                	li	a2,5
ee000e44:	00c30b63          	beq	t1,a2,ee000e5a <core_list_init+0x1be>
ee000e48:	4e19                	li	t3,6
ee000e4a:	01c30563          	beq	t1,t3,ee000e54 <core_list_init+0x1b8>
                            q = q->next;
ee000e4e:	4398                	lw	a4,0(a5)
                psize++;
ee000e50:	4685                	li	a3,1
                if (!q) break;
ee000e52:	c725                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e54:	4318                	lw	a4,0(a4)
                psize++;
ee000e56:	0685                	addi	a3,a3,1
                if (!q) break;
ee000e58:	c32d                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e5a:	4318                	lw	a4,0(a4)
                psize++;
ee000e5c:	0685                	addi	a3,a3,1
                if (!q) break;
ee000e5e:	cf31                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e60:	4318                	lw	a4,0(a4)
                psize++;
ee000e62:	0685                	addi	a3,a3,1
                if (!q) break;
ee000e64:	cb39                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e66:	4318                	lw	a4,0(a4)
                psize++;
ee000e68:	0685                	addi	a3,a3,1
                if (!q) break;
ee000e6a:	cb21                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e6c:	4318                	lw	a4,0(a4)
                psize++;
ee000e6e:	0685                	addi	a3,a3,1
                if (!q) break;
ee000e70:	c729                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e72:	4318                	lw	a4,0(a4)
                psize++;
ee000e74:	0685                	addi	a3,a3,1
                if (!q) break;
ee000e76:	c331                	beqz	a4,ee000eba <core_list_init+0x21e>
            for (i = 0; i < insize; i++) {
ee000e78:	05f68163          	beq	a3,t6,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e7c:	4318                	lw	a4,0(a4)
                psize++;
ee000e7e:	0685                	addi	a3,a3,1
ee000e80:	8336                	mv	t1,a3
                if (!q) break;
ee000e82:	cf05                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e84:	4318                	lw	a4,0(a4)
                psize++;
ee000e86:	0685                	addi	a3,a3,1
                if (!q) break;
ee000e88:	cb0d                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e8a:	4318                	lw	a4,0(a4)
                psize++;
ee000e8c:	00230693          	addi	a3,t1,2
                if (!q) break;
ee000e90:	c70d                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e92:	4318                	lw	a4,0(a4)
                psize++;
ee000e94:	00330693          	addi	a3,t1,3
                if (!q) break;
ee000e98:	c30d                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000e9a:	4318                	lw	a4,0(a4)
                psize++;
ee000e9c:	00430693          	addi	a3,t1,4
                if (!q) break;
ee000ea0:	cf09                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000ea2:	4318                	lw	a4,0(a4)
                psize++;
ee000ea4:	00530693          	addi	a3,t1,5
                if (!q) break;
ee000ea8:	cb09                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000eaa:	4318                	lw	a4,0(a4)
                psize++;
ee000eac:	00630693          	addi	a3,t1,6
                if (!q) break;
ee000eb0:	c709                	beqz	a4,ee000eba <core_list_init+0x21e>
                            q = q->next;
ee000eb2:	4318                	lw	a4,0(a4)
                psize++;
ee000eb4:	00730693          	addi	a3,t1,7
                if (!q) break;
ee000eb8:	f361                	bnez	a4,ee000e78 <core_list_init+0x1dc>
                                    list = e;
ee000eba:	85fe                	mv	a1,t6
            while (psize > 0 || (qsize > 0 && q)) {
ee000ebc:	00d05e63          	blez	a3,ee000ed8 <core_list_init+0x23c>
                                } else if (qsize == 0 || !q) {
ee000ec0:	e985                	bnez	a1,ee000ef0 <core_list_init+0x254>
                                    e = p; p = p->next; psize--;
ee000ec2:	0007a883          	lw	a7,0(a5)
ee000ec6:	16fd                	addi	a3,a3,-1
                                if (tail) {
ee000ec8:	02080263          	beqz	a6,ee000eec <core_list_init+0x250>
                                    tail->next = e;
ee000ecc:	00f82023          	sw	a5,0(a6)
                                    list = e;
ee000ed0:	883e                	mv	a6,a5
ee000ed2:	87c6                	mv	a5,a7
            while (psize > 0 || (qsize > 0 && q)) {
ee000ed4:	fed046e3          	bgtz	a3,ee000ec0 <core_list_init+0x224>
ee000ed8:	06b05863          	blez	a1,ee000f48 <core_list_init+0x2ac>
ee000edc:	cb2d                	beqz	a4,ee000f4e <core_list_init+0x2b2>
                                if (psize == 0) {
ee000ede:	ea91                	bnez	a3,ee000ef2 <core_list_init+0x256>
                                    e = q; q = q->next; qsize--;
ee000ee0:	88be                	mv	a7,a5
ee000ee2:	15fd                	addi	a1,a1,-1
ee000ee4:	87ba                	mv	a5,a4
ee000ee6:	4318                	lw	a4,0(a4)
                                if (tail) {
ee000ee8:	fe0812e3          	bnez	a6,ee000ecc <core_list_init+0x230>
                                    list = e;
ee000eec:	853e                	mv	a0,a5
ee000eee:	b7cd                	j	ee000ed0 <core_list_init+0x234>
                                } else if (qsize == 0 || !q) {
ee000ef0:	db69                	beqz	a4,ee000ec2 <core_list_init+0x226>
                                } else if (cmp(p->info,q->info,res) <= 0) {
ee000ef2:	0047a303          	lw	t1,4(a5)
ee000ef6:	00472883          	lw	a7,4(a4)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
ee000efa:	00031603          	lh	a2,0(t1)
        return a->idx - b->idx;
ee000efe:	00289e83          	lh	t4,2(a7)
ee000f02:	00231f03          	lh	t5,2(t1)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
ee000f06:	01061e13          	slli	t3,a2,0x10
ee000f0a:	010e5e13          	srli	t3,t3,0x10
ee000f0e:	008e5e13          	srli	t3,t3,0x8
ee000f12:	f0067613          	andi	a2,a2,-256
ee000f16:	01c66633          	or	a2,a2,t3
ee000f1a:	00c31023          	sh	a2,0(t1)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
ee000f1e:	00089e03          	lh	t3,0(a7)
ee000f22:	010e1313          	slli	t1,t3,0x10
ee000f26:	01035313          	srli	t1,t1,0x10
ee000f2a:	f00e7613          	andi	a2,t3,-256
ee000f2e:	00835e13          	srli	t3,t1,0x8
ee000f32:	01c66333          	or	t1,a2,t3
ee000f36:	00689023          	sh	t1,0(a7)
                                } else if (cmp(p->info,q->info,res) <= 0) {
ee000f3a:	f9eed4e3          	bge	t4,t5,ee000ec2 <core_list_init+0x226>
                                    e = q; q = q->next; qsize--;
ee000f3e:	88be                	mv	a7,a5
ee000f40:	15fd                	addi	a1,a1,-1
ee000f42:	87ba                	mv	a5,a4
ee000f44:	4318                	lw	a4,0(a4)
ee000f46:	b749                	j	ee000ec8 <core_list_init+0x22c>
        while (p) {
ee000f48:	c319                	beqz	a4,ee000f4e <core_list_init+0x2b2>
        nmerges = 0;  /* count number of merges we do in this pass */
ee000f4a:	87ba                	mv	a5,a4
ee000f4c:	bdc1                	j	ee000e1c <core_list_init+0x180>
            tail->next = NULL;
ee000f4e:	00082023          	sw	zero,0(a6)
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
ee000f52:	00728a63          	beq	t0,t2,ee000f66 <core_list_init+0x2ca>
            return list;

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
ee000f56:	0f86                	slli	t6,t6,0x1
        while (p) {
ee000f58:	c901                	beqz	a0,ee000f68 <core_list_init+0x2cc>
ee000f5a:	872a                	mv	a4,a0
        tail = NULL;
ee000f5c:	4801                	li	a6,0
        list = NULL;
ee000f5e:	4501                	li	a0,0
        nmerges = 0;  /* count number of merges we do in this pass */
ee000f60:	4281                	li	t0,0
ee000f62:	87ba                	mv	a5,a4
ee000f64:	bd65                	j	ee000e1c <core_list_init+0x180>
}
ee000f66:	8082                	ret
            tail->next = NULL;
ee000f68:	00002023          	sw	zero,0(zero) # 0 <_start-0x80000000>
ee000f6c:	9002                	ebreak
        if ((*memblock+1) >= memblock_end)
ee000f6e:	00870893          	addi	a7,a4,8
ee000f72:	e2b8fce3          	bgeu	a7,a1,ee000daa <core_list_init+0x10e>
        if ((*datablock+1) >= datablock_end)
ee000f76:	00460f13          	addi	t5,a2,4
ee000f7a:	03cf7463          	bgeu	t5,t3,ee000fa2 <core_list_init+0x306>
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
ee000f7e:	003f9813          	slli	a6,t6,0x3
        newitem->next=insert_point->next;
ee000f82:	c314                	sw	a3,0(a4)
                ee_u16 dat=(datpat<<3) | (i&0x7); /* alternate between algorithms */
ee000f84:	07887693          	andi	a3,a6,120
        insert_point->next=newitem;
ee000f88:	c398                	sw	a4,0(a5)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
ee000f8a:	00869293          	slli	t0,a3,0x8
        newitem->info=*datablock;
ee000f8e:	c350                	sw	a2,4(a4)
                info.data16=(dat<<8) | dat;             /* fill the data with actual data and upper bits with rebuild value */
ee000f90:	00d2e3b3          	or	t2,t0,a3
        to->data16=from->data16;
ee000f94:	00761023          	sh	t2,0(a2)
        to->idx=from->idx;
ee000f98:	01d61123          	sh	t4,2(a2)
        return newitem;
ee000f9c:	86ba                	mv	a3,a4
        if ((*datablock+1) >= datablock_end)
ee000f9e:	867a                	mv	a2,t5
        if ((*memblock+1) >= memblock_end)
ee000fa0:	8746                	mv	a4,a7
        for (i=0; i<size; i++) {
ee000fa2:	4805                	li	a6,1
ee000fa4:	d70519e3          	bne	a0,a6,ee000d16 <core_list_init+0x7a>
ee000fa8:	b509                	j	ee000daa <core_list_init+0x10e>
ee000faa:	4681                	li	a3,0
ee000fac:	bb81                	j	ee000cfc <core_list_init+0x60>

ee000fae <core_list_insert_new>:
        if ((*memblock+1) >= memblock_end)
ee000fae:	00062803          	lw	a6,0(a2)
ee000fb2:	00880893          	addi	a7,a6,8
ee000fb6:	04e8f163          	bgeu	a7,a4,ee000ff8 <core_list_insert_new+0x4a>
        if ((*datablock+1) >= datablock_end)
ee000fba:	4298                	lw	a4,0(a3)
ee000fbc:	00470313          	addi	t1,a4,4
ee000fc0:	02f37c63          	bgeu	t1,a5,ee000ff8 <core_list_insert_new+0x4a>
        (*memblock)++;
ee000fc4:	01162023          	sw	a7,0(a2)
        newitem->next=insert_point->next;
ee000fc8:	411c                	lw	a5,0(a0)
        to->data16=from->data16;
ee000fca:	00059283          	lh	t0,0(a1)
        to->idx=from->idx;
ee000fce:	00259603          	lh	a2,2(a1)
        newitem->next=insert_point->next;
ee000fd2:	00f82023          	sw	a5,0(a6)
        insert_point->next=newitem;
ee000fd6:	01052023          	sw	a6,0(a0)
        newitem->info=*datablock;
ee000fda:	00e82223          	sw	a4,4(a6)
        (*datablock)++;
ee000fde:	0006a383          	lw	t2,0(a3)
ee000fe2:	00438513          	addi	a0,t2,4
ee000fe6:	c288                	sw	a0,0(a3)
        copy_info(newitem->info,info);
ee000fe8:	00482583          	lw	a1,4(a6)
}
ee000fec:	8542                	mv	a0,a6
        to->data16=from->data16;
ee000fee:	00559023          	sh	t0,0(a1)
        to->idx=from->idx;
ee000ff2:	00c59123          	sh	a2,2(a1)
}
ee000ff6:	8082                	ret
                return NULL;
ee000ff8:	4801                	li	a6,0
}
ee000ffa:	8542                	mv	a0,a6
ee000ffc:	8082                	ret

ee000ffe <core_list_remove>:
list_head *core_list_remove(list_head *item) {
ee000ffe:	87aa                	mv	a5,a0
        list_head *ret=item->next;
ee001000:	4108                	lw	a0,0(a0)
        tmp=item->info;
ee001002:	43d4                	lw	a3,4(a5)
        item->info=ret->info;
ee001004:	4150                	lw	a2,4(a0)
        item->next=item->next->next;
ee001006:	4118                	lw	a4,0(a0)
        item->info=ret->info;
ee001008:	c3d0                	sw	a2,4(a5)
        ret->info=tmp;
ee00100a:	c154                	sw	a3,4(a0)
        item->next=item->next->next;
ee00100c:	c398                	sw	a4,0(a5)
        ret->next=NULL;
ee00100e:	00052023          	sw	zero,0(a0)
}
ee001012:	8082                	ret

ee001014 <core_list_undo_remove>:
        item_removed->info=item_modified->info;
ee001014:	41d0                	lw	a2,4(a1)
        tmp=item_removed->info;
ee001016:	4154                	lw	a3,4(a0)
        item_removed->next=item_modified->next;
ee001018:	4198                	lw	a4,0(a1)
        item_removed->info=item_modified->info;
ee00101a:	c150                	sw	a2,4(a0)
        item_modified->info=tmp;
ee00101c:	c1d4                	sw	a3,4(a1)
        item_removed->next=item_modified->next;
ee00101e:	c118                	sw	a4,0(a0)
        item_modified->next=item_removed;
ee001020:	c188                	sw	a0,0(a1)
}
ee001022:	8082                	ret

ee001024 <core_list_find>:
        if (info->idx>=0) {
ee001024:	00259603          	lh	a2,2(a1)
ee001028:	00064d63          	bltz	a2,ee001042 <core_list_find+0x1e>
                while (list && (list->info->idx != info->idx))
ee00102c:	e501                	bnez	a0,ee001034 <core_list_find+0x10>
ee00102e:	a805                	j	ee00105e <core_list_find+0x3a>
                        list=list->next;
ee001030:	4108                	lw	a0,0(a0)
                while (list && (list->info->idx != info->idx))
ee001032:	c505                	beqz	a0,ee00105a <core_list_find+0x36>
ee001034:	00452303          	lw	t1,4(a0)
ee001038:	00231383          	lh	t2,2(t1)
ee00103c:	fec39ae3          	bne	t2,a2,ee001030 <core_list_find+0xc>
ee001040:	8082                	ret
                while (list && ((list->info->data16 & 0xff) != info->data16))
ee001042:	cd01                	beqz	a0,ee00105a <core_list_find+0x36>
ee001044:	00059703          	lh	a4,0(a1)
ee001048:	a019                	j	ee00104e <core_list_find+0x2a>
                        list=list->next;
ee00104a:	4108                	lw	a0,0(a0)
                while (list && ((list->info->data16 & 0xff) != info->data16))
ee00104c:	c901                	beqz	a0,ee00105c <core_list_find+0x38>
ee00104e:	415c                	lw	a5,4(a0)
ee001050:	0007c283          	lbu	t0,0(a5)
ee001054:	fee29be3          	bne	t0,a4,ee00104a <core_list_find+0x26>
ee001058:	8082                	ret
ee00105a:	4501                	li	a0,0
}
ee00105c:	8082                	ret
ee00105e:	8082                	ret

ee001060 <core_list_reverse>:
        while (list) {
ee001060:	c92d                	beqz	a0,ee0010d2 <core_list_reverse+0x72>
                tmp=list->next;
ee001062:	411c                	lw	a5,0(a0)
        list_head *next=NULL, *tmp;
ee001064:	4881                	li	a7,0
                list->next=next;
ee001066:	01152023          	sw	a7,0(a0)
        while (list) {
ee00106a:	86aa                	mv	a3,a0
ee00106c:	c3bd                	beqz	a5,ee0010d2 <core_list_reverse+0x72>
                tmp=list->next;
ee00106e:	4398                	lw	a4,0(a5)
                list->next=next;
ee001070:	c394                	sw	a3,0(a5)
                list=tmp;
ee001072:	853e                	mv	a0,a5
        while (list) {
ee001074:	c325                	beqz	a4,ee0010d4 <core_list_reverse+0x74>
                tmp=list->next;
ee001076:	00072283          	lw	t0,0(a4)
                list->next=next;
ee00107a:	c31c                	sw	a5,0(a4)
                list=tmp;
ee00107c:	853a                	mv	a0,a4
        while (list) {
ee00107e:	04028a63          	beqz	t0,ee0010d2 <core_list_reverse+0x72>
                tmp=list->next;
ee001082:	0002a303          	lw	t1,0(t0)
                list->next=next;
ee001086:	00e2a023          	sw	a4,0(t0)
                list=tmp;
ee00108a:	8516                	mv	a0,t0
        while (list) {
ee00108c:	04030363          	beqz	t1,ee0010d2 <core_list_reverse+0x72>
                tmp=list->next;
ee001090:	00032383          	lw	t2,0(t1)
                list->next=next;
ee001094:	00532023          	sw	t0,0(t1)
                list=tmp;
ee001098:	851a                	mv	a0,t1
        while (list) {
ee00109a:	02038c63          	beqz	t2,ee0010d2 <core_list_reverse+0x72>
                tmp=list->next;
ee00109e:	0003a583          	lw	a1,0(t2)
                list->next=next;
ee0010a2:	0063a023          	sw	t1,0(t2)
                list=tmp;
ee0010a6:	851e                	mv	a0,t2
        while (list) {
ee0010a8:	c58d                	beqz	a1,ee0010d2 <core_list_reverse+0x72>
                tmp=list->next;
ee0010aa:	0005a803          	lw	a6,0(a1)
                list->next=next;
ee0010ae:	0075a023          	sw	t2,0(a1)
                list=tmp;
ee0010b2:	852e                	mv	a0,a1
        while (list) {
ee0010b4:	00080f63          	beqz	a6,ee0010d2 <core_list_reverse+0x72>
                tmp=list->next;
ee0010b8:	00082603          	lw	a2,0(a6)
                list->next=next;
ee0010bc:	00b82023          	sw	a1,0(a6)
                list=tmp;
ee0010c0:	8542                	mv	a0,a6
        while (list) {
ee0010c2:	88c2                	mv	a7,a6
ee0010c4:	c619                	beqz	a2,ee0010d2 <core_list_reverse+0x72>
                list=tmp;
ee0010c6:	8532                	mv	a0,a2
                tmp=list->next;
ee0010c8:	411c                	lw	a5,0(a0)
                list->next=next;
ee0010ca:	01152023          	sw	a7,0(a0)
        while (list) {
ee0010ce:	86aa                	mv	a3,a0
ee0010d0:	ffd9                	bnez	a5,ee00106e <core_list_reverse+0xe>
}
ee0010d2:	8082                	ret
ee0010d4:	8082                	ret

ee0010d6 <core_list_mergesort>:
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res) {
ee0010d6:	7179                	addi	sp,sp,-48
ee0010d8:	ce4e                	sw	s3,28(sp)
ee0010da:	c85a                	sw	s6,16(sp)
ee0010dc:	c65e                	sw	s7,12(sp)
ee0010de:	c462                	sw	s8,8(sp)
ee0010e0:	c06a                	sw	s10,0(sp)
ee0010e2:	d606                	sw	ra,44(sp)
ee0010e4:	d422                	sw	s0,40(sp)
ee0010e6:	d226                	sw	s1,36(sp)
ee0010e8:	d04a                	sw	s2,32(sp)
ee0010ea:	cc52                	sw	s4,24(sp)
ee0010ec:	ca56                	sw	s5,20(sp)
ee0010ee:	c266                	sw	s9,4(sp)
ee0010f0:	89aa                	mv	s3,a0
ee0010f2:	8bae                	mv	s7,a1
ee0010f4:	8b32                	mv	s6,a2
    insize = 1;
ee0010f6:	4c05                	li	s8,1
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
ee0010f8:	4d05                	li	s10,1
        while (p) {
ee0010fa:	10098a63          	beqz	s3,ee00120e <core_list_mergesort+0x138>
        nmerges = 0;  /* count number of merges we do in this pass */
ee0010fe:	4c81                	li	s9,0
        tail = NULL;
ee001100:	4481                	li	s1,0
        list = NULL;
ee001102:	4a81                	li	s5,0
            nmerges++;  /* there exists a merge to be done */
ee001104:	007c7713          	andi	a4,s8,7
ee001108:	0c85                	addi	s9,s9,1
ee00110a:	87ce                	mv	a5,s3
            psize = 0;
ee00110c:	4401                	li	s0,0
ee00110e:	cb39                	beqz	a4,ee001164 <core_list_mergesort+0x8e>
ee001110:	4685                	li	a3,1
ee001112:	04d70463          	beq	a4,a3,ee00115a <core_list_mergesort+0x84>
ee001116:	4089                	li	ra,2
ee001118:	02170e63          	beq	a4,ra,ee001154 <core_list_mergesort+0x7e>
ee00111c:	428d                	li	t0,3
ee00111e:	02570863          	beq	a4,t0,ee00114e <core_list_mergesort+0x78>
ee001122:	4311                	li	t1,4
ee001124:	02670263          	beq	a4,t1,ee001148 <core_list_mergesort+0x72>
ee001128:	4395                	li	t2,5
ee00112a:	00770c63          	beq	a4,t2,ee001142 <core_list_mergesort+0x6c>
ee00112e:	4519                	li	a0,6
ee001130:	00a70663          	beq	a4,a0,ee00113c <core_list_mergesort+0x66>
                            q = q->next;
ee001134:	0009a783          	lw	a5,0(s3)
                psize++;
ee001138:	4405                	li	s0,1
                if (!q) break;
ee00113a:	c7a5                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee00113c:	439c                	lw	a5,0(a5)
                psize++;
ee00113e:	0405                	addi	s0,s0,1
                if (!q) break;
ee001140:	c3ad                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee001142:	439c                	lw	a5,0(a5)
                psize++;
ee001144:	0405                	addi	s0,s0,1
                if (!q) break;
ee001146:	cfb1                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee001148:	439c                	lw	a5,0(a5)
                psize++;
ee00114a:	0405                	addi	s0,s0,1
                if (!q) break;
ee00114c:	cbb9                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee00114e:	439c                	lw	a5,0(a5)
                psize++;
ee001150:	0405                	addi	s0,s0,1
                if (!q) break;
ee001152:	cba1                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee001154:	439c                	lw	a5,0(a5)
                psize++;
ee001156:	0405                	addi	s0,s0,1
                if (!q) break;
ee001158:	c7a9                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee00115a:	439c                	lw	a5,0(a5)
                psize++;
ee00115c:	0405                	addi	s0,s0,1
                if (!q) break;
ee00115e:	c3b1                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
            for (i = 0; i < insize; i++) {
ee001160:	048c0163          	beq	s8,s0,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee001164:	439c                	lw	a5,0(a5)
                psize++;
ee001166:	0405                	addi	s0,s0,1
ee001168:	85a2                	mv	a1,s0
                if (!q) break;
ee00116a:	cf85                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee00116c:	439c                	lw	a5,0(a5)
                psize++;
ee00116e:	0405                	addi	s0,s0,1
                if (!q) break;
ee001170:	cb8d                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee001172:	439c                	lw	a5,0(a5)
                psize++;
ee001174:	00258413          	addi	s0,a1,2
                if (!q) break;
ee001178:	c78d                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee00117a:	439c                	lw	a5,0(a5)
                psize++;
ee00117c:	00358413          	addi	s0,a1,3
                if (!q) break;
ee001180:	c38d                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee001182:	439c                	lw	a5,0(a5)
                psize++;
ee001184:	00458413          	addi	s0,a1,4
                if (!q) break;
ee001188:	cf89                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee00118a:	439c                	lw	a5,0(a5)
                psize++;
ee00118c:	00558413          	addi	s0,a1,5
                if (!q) break;
ee001190:	cb89                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee001192:	439c                	lw	a5,0(a5)
                psize++;
ee001194:	00658413          	addi	s0,a1,6
                if (!q) break;
ee001198:	c789                	beqz	a5,ee0011a2 <core_list_mergesort+0xcc>
                            q = q->next;
ee00119a:	439c                	lw	a5,0(a5)
                psize++;
ee00119c:	00758413          	addi	s0,a1,7
                if (!q) break;
ee0011a0:	f3e1                	bnez	a5,ee001160 <core_list_mergesort+0x8a>
                                    list = e;
ee0011a2:	894e                	mv	s2,s3
ee0011a4:	8a62                	mv	s4,s8
ee0011a6:	89be                	mv	s3,a5
            while (psize > 0 || (qsize > 0 && q)) {
ee0011a8:	00805d63          	blez	s0,ee0011c2 <core_list_mergesort+0xec>
                                } else if (qsize == 0 || !q) {
ee0011ac:	020a1863          	bnez	s4,ee0011dc <core_list_mergesort+0x106>
                                    e = p; p = p->next; psize--;
ee0011b0:	864a                	mv	a2,s2
ee0011b2:	00092903          	lw	s2,0(s2)
ee0011b6:	147d                	addi	s0,s0,-1
                                if (tail) {
ee0011b8:	cc99                	beqz	s1,ee0011d6 <core_list_mergesort+0x100>
                                    tail->next = e;
ee0011ba:	c090                	sw	a2,0(s1)
                                    list = e;
ee0011bc:	84b2                	mv	s1,a2
            while (psize > 0 || (qsize > 0 && q)) {
ee0011be:	fe8047e3          	bgtz	s0,ee0011ac <core_list_mergesort+0xd6>
ee0011c2:	03405c63          	blez	s4,ee0011fa <core_list_mergesort+0x124>
ee0011c6:	02098c63          	beqz	s3,ee0011fe <core_list_mergesort+0x128>
                                if (psize == 0) {
ee0011ca:	e819                	bnez	s0,ee0011e0 <core_list_mergesort+0x10a>
                                    e = q; q = q->next; qsize--;
ee0011cc:	864e                	mv	a2,s3
ee0011ce:	1a7d                	addi	s4,s4,-1
ee0011d0:	0009a983          	lw	s3,0(s3)
                                if (tail) {
ee0011d4:	f0fd                	bnez	s1,ee0011ba <core_list_mergesort+0xe4>
                                    list = e;
ee0011d6:	8ab2                	mv	s5,a2
ee0011d8:	84b2                	mv	s1,a2
ee0011da:	b7d5                	j	ee0011be <core_list_mergesort+0xe8>
                                } else if (qsize == 0 || !q) {
ee0011dc:	fc098ae3          	beqz	s3,ee0011b0 <core_list_mergesort+0xda>
                                } else if (cmp(p->info,q->info,res) <= 0) {
ee0011e0:	0049a583          	lw	a1,4(s3)
ee0011e4:	00492503          	lw	a0,4(s2)
ee0011e8:	865a                	mv	a2,s6
ee0011ea:	9b82                	jalr	s7
ee0011ec:	fca052e3          	blez	a0,ee0011b0 <core_list_mergesort+0xda>
                                    e = q; q = q->next; qsize--;
ee0011f0:	864e                	mv	a2,s3
ee0011f2:	1a7d                	addi	s4,s4,-1
ee0011f4:	0009a983          	lw	s3,0(s3)
ee0011f8:	b7c1                	j	ee0011b8 <core_list_mergesort+0xe2>
        while (p) {
ee0011fa:	f00995e3          	bnez	s3,ee001104 <core_list_mergesort+0x2e>
            tail->next = NULL;
ee0011fe:	0004a023          	sw	zero,0(s1)
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
ee001202:	01ac8963          	beq	s9,s10,ee001214 <core_list_mergesort+0x13e>
        p = list;
ee001206:	89d6                	mv	s3,s5
        insize *= 2;
ee001208:	0c06                	slli	s8,s8,0x1
        while (p) {
ee00120a:	ee099ae3          	bnez	s3,ee0010fe <core_list_mergesort+0x28>
            tail->next = NULL;
ee00120e:	00002023          	sw	zero,0(zero) # 0 <_start-0x80000000>
ee001212:	9002                	ebreak
    }
#if COMPILER_REQUIRES_SORT_RETURN
        return list;
#endif
}
ee001214:	50b2                	lw	ra,44(sp)
ee001216:	5422                	lw	s0,40(sp)
ee001218:	5492                	lw	s1,36(sp)
ee00121a:	5902                	lw	s2,32(sp)
ee00121c:	49f2                	lw	s3,28(sp)
ee00121e:	4a62                	lw	s4,24(sp)
ee001220:	4b42                	lw	s6,16(sp)
ee001222:	4bb2                	lw	s7,12(sp)
ee001224:	4c22                	lw	s8,8(sp)
ee001226:	4c92                	lw	s9,4(sp)
ee001228:	4d02                	lw	s10,0(sp)
ee00122a:	8556                	mv	a0,s5
ee00122c:	4ad2                	lw	s5,20(sp)
ee00122e:	6145                	addi	sp,sp,48
ee001230:	8082                	ret

ee001232 <matrix_test>:
        4 - Multiply a matrix by a matrix.
        5 - Add a constant value to all elements of a matrix.

        After the last step, matrix A is back to original contents.
*/
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
ee001232:	715d                	addi	sp,sp,-80
ee001234:	c6a2                	sw	s0,76(sp)
ee001236:	c0ce                	sw	s3,64(sp)
ee001238:	da5a                	sw	s6,52(sp)
ee00123a:	8f2e                	mv	t5,a1
ee00123c:	89b6                	mv	s3,a3
        ee_u16 crc=0;
        MATDAT clipval=matrix_big(val);
ee00123e:	75fd                	lui	a1,0xfffff
        crc=crc16(matrix_sum(N,C,clipval),crc);
#if CORE_DEBUG
        printmatC(C,N,"matrix_mul_matrix_bitextract");
#endif

        matrix_add_const(N,A,-val); /* return matrix to initial value */
ee001240:	01071693          	slli	a3,a4,0x10
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
ee001244:	c4a6                	sw	s1,72(sp)
ee001246:	c2ca                	sw	s2,68(sp)
ee001248:	de52                	sw	s4,60(sp)
ee00124a:	dc56                	sw	s5,56(sp)
ee00124c:	d85e                	sw	s7,48(sp)
ee00124e:	d662                	sw	s8,44(sp)
ee001250:	d466                	sw	s9,40(sp)
ee001252:	d26a                	sw	s10,36(sp)
ee001254:	d06e                	sw	s11,32(sp)
ee001256:	842a                	mv	s0,a0
ee001258:	8b32                	mv	s6,a2
        MATDAT clipval=matrix_big(val);
ee00125a:	8dd9                	or	a1,a1,a4
        matrix_add_const(N,A,-val); /* return matrix to initial value */
ee00125c:	82c1                	srli	a3,a3,0x10
/* Function: matrix_add_const
        Add a constant value to all elements of a matrix.
*/
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
        ee_u32 i,j;
        for (i=0; i<N; i++) {
ee00125e:	e119                	bnez	a0,ee001264 <matrix_test+0x32>
ee001260:	2220206f          	j	ee003482 <matrix_test+0x2250>
ee001264:	00151e13          	slli	t3,a0,0x1
ee001268:	01c60533          	add	a0,a2,t3
ee00126c:	408008b3          	neg	a7,s0
ee001270:	833a                	mv	t1,a4
ee001272:	4801                	li	a6,0
ee001274:	872a                	mv	a4,a0
ee001276:	088a                	slli	a7,a7,0x2
                for (j=0; j<N; j++) {
ee001278:	41c70eb3          	sub	t4,a4,t3
ee00127c:	41d702b3          	sub	t0,a4,t4
ee001280:	ffe28393          	addi	t2,t0,-2
ee001284:	0013d493          	srli	s1,t2,0x1
ee001288:	00148913          	addi	s2,s1,1
ee00128c:	00797a13          	andi	s4,s2,7
ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
ee001290:	87f6                	mv	a5,t4
ee001292:	080a0863          	beqz	s4,ee001322 <matrix_test+0xf0>
ee001296:	4f85                	li	t6,1
ee001298:	07fa0c63          	beq	s4,t6,ee001310 <matrix_test+0xde>
ee00129c:	4a89                	li	s5,2
ee00129e:	075a0263          	beq	s4,s5,ee001302 <matrix_test+0xd0>
ee0012a2:	4b8d                	li	s7,3
ee0012a4:	057a0863          	beq	s4,s7,ee0012f4 <matrix_test+0xc2>
ee0012a8:	4c11                	li	s8,4
ee0012aa:	038a0e63          	beq	s4,s8,ee0012e6 <matrix_test+0xb4>
ee0012ae:	4c95                	li	s9,5
ee0012b0:	039a0463          	beq	s4,s9,ee0012d8 <matrix_test+0xa6>
ee0012b4:	4d19                	li	s10,6
ee0012b6:	01aa0a63          	beq	s4,s10,ee0012ca <matrix_test+0x98>
                        A[i*N+j] += val;
ee0012ba:	000edd83          	lhu	s11,0(t4) # ffff8000 <STACK+0xffb6270>
                for (j=0; j<N; j++) {
ee0012be:	002e8793          	addi	a5,t4,2
                        A[i*N+j] += val;
ee0012c2:	01b68633          	add	a2,a3,s11
ee0012c6:	00ce9023          	sh	a2,0(t4)
ee0012ca:	0007d283          	lhu	t0,0(a5)
                for (j=0; j<N; j++) {
ee0012ce:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee0012d0:	005683b3          	add	t2,a3,t0
ee0012d4:	fe779f23          	sh	t2,-2(a5)
ee0012d8:	0007d483          	lhu	s1,0(a5)
                for (j=0; j<N; j++) {
ee0012dc:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee0012de:	00968933          	add	s2,a3,s1
ee0012e2:	ff279f23          	sh	s2,-2(a5)
ee0012e6:	0007da03          	lhu	s4,0(a5)
                for (j=0; j<N; j++) {
ee0012ea:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee0012ec:	01468fb3          	add	t6,a3,s4
ee0012f0:	fff79f23          	sh	t6,-2(a5)
ee0012f4:	0007da83          	lhu	s5,0(a5)
                for (j=0; j<N; j++) {
ee0012f8:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee0012fa:	01568bb3          	add	s7,a3,s5
ee0012fe:	ff779f23          	sh	s7,-2(a5)
ee001302:	0007dc03          	lhu	s8,0(a5)
                for (j=0; j<N; j++) {
ee001306:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee001308:	01868cb3          	add	s9,a3,s8
ee00130c:	ff979f23          	sh	s9,-2(a5)
ee001310:	0007dd03          	lhu	s10,0(a5)
                for (j=0; j<N; j++) {
ee001314:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee001316:	01a68db3          	add	s11,a3,s10
ee00131a:	ffb79f23          	sh	s11,-2(a5)
                for (j=0; j<N; j++) {
ee00131e:	06f70563          	beq	a4,a5,ee001388 <matrix_test+0x156>
                        A[i*N+j] += val;
ee001322:	0007da83          	lhu	s5,0(a5)
ee001326:	0027da03          	lhu	s4,2(a5)
ee00132a:	0047d903          	lhu	s2,4(a5)
ee00132e:	0067d483          	lhu	s1,6(a5)
ee001332:	0087d383          	lhu	t2,8(a5)
ee001336:	00a7d283          	lhu	t0,10(a5)
ee00133a:	00c7df83          	lhu	t6,12(a5)
ee00133e:	00e7d603          	lhu	a2,14(a5)
ee001342:	01568bb3          	add	s7,a3,s5
ee001346:	01468c33          	add	s8,a3,s4
ee00134a:	01268cb3          	add	s9,a3,s2
ee00134e:	00968d33          	add	s10,a3,s1
ee001352:	00768db3          	add	s11,a3,t2
ee001356:	00568ab3          	add	s5,a3,t0
ee00135a:	01f68a33          	add	s4,a3,t6
ee00135e:	00c68933          	add	s2,a3,a2
ee001362:	01779023          	sh	s7,0(a5)
ee001366:	01879123          	sh	s8,2(a5)
ee00136a:	01979223          	sh	s9,4(a5)
ee00136e:	01a79323          	sh	s10,6(a5)
ee001372:	01b79423          	sh	s11,8(a5)
ee001376:	01579523          	sh	s5,10(a5)
ee00137a:	01479623          	sh	s4,12(a5)
ee00137e:	01279723          	sh	s2,14(a5)
                for (j=0; j<N; j++) {
ee001382:	07c1                	addi	a5,a5,16
ee001384:	f8f71fe3          	bne	a4,a5,ee001322 <matrix_test+0xf0>
        for (i=0; i<N; i++) {
ee001388:	00180f93          	addi	t6,a6,1
ee00138c:	411e8733          	sub	a4,t4,a7
ee001390:	01f40463          	beq	s0,t6,ee001398 <matrix_test+0x166>
ee001394:	887e                	mv	a6,t6
ee001396:	b5cd                	j	ee001278 <matrix_test+0x46>
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee001398:	4381                	li	t2,0
        for (i=0; i<N; i++) {
ee00139a:	4481                	li	s1,0
                for (j=0; j<N; j++) {
ee00139c:	41c50eb3          	sub	t4,a0,t3
ee0013a0:	41d507b3          	sub	a5,a0,t4
ee0013a4:	ffe78293          	addi	t0,a5,-2
ee0013a8:	0012d613          	srli	a2,t0,0x1
ee0013ac:	00160b93          	addi	s7,a2,1
ee0013b0:	00239c13          	slli	s8,t2,0x2
ee0013b4:	007bfc93          	andi	s9,s7,7
ee0013b8:	01ec07b3          	add	a5,s8,t5
        for (i=0; i<N; i++) {
ee0013bc:	8776                	mv	a4,t4
ee0013be:	080c8f63          	beqz	s9,ee00145c <matrix_test+0x22a>
ee0013c2:	4d05                	li	s10,1
ee0013c4:	09ac8263          	beq	s9,s10,ee001448 <matrix_test+0x216>
ee0013c8:	4d89                	li	s11,2
ee0013ca:	07bc8763          	beq	s9,s11,ee001438 <matrix_test+0x206>
ee0013ce:	4a8d                	li	s5,3
ee0013d0:	055c8c63          	beq	s9,s5,ee001428 <matrix_test+0x1f6>
ee0013d4:	4a11                	li	s4,4
ee0013d6:	054c8163          	beq	s9,s4,ee001418 <matrix_test+0x1e6>
ee0013da:	4915                	li	s2,5
ee0013dc:	032c8663          	beq	s9,s2,ee001408 <matrix_test+0x1d6>
ee0013e0:	4299                	li	t0,6
ee0013e2:	005c8b63          	beq	s9,t0,ee0013f8 <matrix_test+0x1c6>
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee0013e6:	000e9603          	lh	a2,0(t4)
                for (j=0; j<N; j++) {
ee0013ea:	002e8713          	addi	a4,t4,2
ee0013ee:	0791                	addi	a5,a5,4
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee0013f0:	02660bb3          	mul	s7,a2,t1
ee0013f4:	ff77ae23          	sw	s7,-4(a5)
ee0013f8:	00071c03          	lh	s8,0(a4)
                for (j=0; j<N; j++) {
ee0013fc:	0791                	addi	a5,a5,4
ee0013fe:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee001400:	026c0cb3          	mul	s9,s8,t1
ee001404:	ff97ae23          	sw	s9,-4(a5)
ee001408:	00071d03          	lh	s10,0(a4)
                for (j=0; j<N; j++) {
ee00140c:	0791                	addi	a5,a5,4
ee00140e:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee001410:	026d0db3          	mul	s11,s10,t1
ee001414:	ffb7ae23          	sw	s11,-4(a5)
ee001418:	00071a83          	lh	s5,0(a4)
                for (j=0; j<N; j++) {
ee00141c:	0791                	addi	a5,a5,4
ee00141e:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee001420:	026a8a33          	mul	s4,s5,t1
ee001424:	ff47ae23          	sw	s4,-4(a5)
ee001428:	00071903          	lh	s2,0(a4)
                for (j=0; j<N; j++) {
ee00142c:	0791                	addi	a5,a5,4
ee00142e:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee001430:	026902b3          	mul	t0,s2,t1
ee001434:	fe57ae23          	sw	t0,-4(a5)
ee001438:	00071603          	lh	a2,0(a4)
                for (j=0; j<N; j++) {
ee00143c:	0791                	addi	a5,a5,4
ee00143e:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee001440:	02660bb3          	mul	s7,a2,t1
ee001444:	ff77ae23          	sw	s7,-4(a5)
ee001448:	00071c03          	lh	s8,0(a4)
                for (j=0; j<N; j++) {
ee00144c:	0791                	addi	a5,a5,4
ee00144e:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee001450:	026c0cb3          	mul	s9,s8,t1
ee001454:	ff97ae23          	sw	s9,-4(a5)
                for (j=0; j<N; j++) {
ee001458:	06e50763          	beq	a0,a4,ee0014c6 <matrix_test+0x294>
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee00145c:	00071d03          	lh	s10,0(a4)
ee001460:	00271d83          	lh	s11,2(a4)
ee001464:	00471b83          	lh	s7,4(a4)
ee001468:	00671a83          	lh	s5,6(a4)
ee00146c:	00871a03          	lh	s4,8(a4)
ee001470:	00a71903          	lh	s2,10(a4)
ee001474:	00c71283          	lh	t0,12(a4)
ee001478:	00e71603          	lh	a2,14(a4)
ee00147c:	026d0cb3          	mul	s9,s10,t1
                for (j=0; j<N; j++) {
ee001480:	0741                	addi	a4,a4,16
ee001482:	02078793          	addi	a5,a5,32
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee001486:	026d8c33          	mul	s8,s11,t1
ee00148a:	ff97a023          	sw	s9,-32(a5)
ee00148e:	026b8d33          	mul	s10,s7,t1
ee001492:	ff87a223          	sw	s8,-28(a5)
ee001496:	026a8db3          	mul	s11,s5,t1
ee00149a:	ffa7a423          	sw	s10,-24(a5)
ee00149e:	026a0bb3          	mul	s7,s4,t1
ee0014a2:	ffb7a623          	sw	s11,-20(a5)
ee0014a6:	02690ab3          	mul	s5,s2,t1
ee0014aa:	ff77a823          	sw	s7,-16(a5)
ee0014ae:	02628a33          	mul	s4,t0,t1
ee0014b2:	ff57aa23          	sw	s5,-12(a5)
ee0014b6:	02660933          	mul	s2,a2,t1
ee0014ba:	ff47ac23          	sw	s4,-8(a5)
ee0014be:	ff27ae23          	sw	s2,-4(a5)
                for (j=0; j<N; j++) {
ee0014c2:	f8e51de3          	bne	a0,a4,ee00145c <matrix_test+0x22a>
        for (i=0; i<N; i++) {
ee0014c6:	00148713          	addi	a4,s1,1
ee0014ca:	93fe                	add	t2,t2,t6
ee0014cc:	411e8533          	sub	a0,t4,a7
ee0014d0:	01048463          	beq	s1,a6,ee0014d8 <matrix_test+0x2a6>
ee0014d4:	84ba                	mv	s1,a4
ee0014d6:	b5d9                	j	ee00139c <matrix_test+0x16a>
ee0014d8:	41f004b3          	neg	s1,t6
ee0014dc:	411f0633          	sub	a2,t5,a7
        ee_s16 ret=0;
ee0014e0:	4781                	li	a5,0
        MATRES tmp=0,prev=0,cur=0;
ee0014e2:	4281                	li	t0,0
ee0014e4:	4e81                	li	t4,0
        for (i=0; i<N; i++) {
ee0014e6:	4301                	li	t1,0
ee0014e8:	00349713          	slli	a4,s1,0x3
                for (j=0; j<N; j++) {
ee0014ec:	01160e33          	add	t3,a2,a7
ee0014f0:	41c60fb3          	sub	t6,a2,t3
ee0014f4:	ffcf8c93          	addi	s9,t6,-4
ee0014f8:	002cdc13          	srli	s8,s9,0x2
ee0014fc:	001c0d13          	addi	s10,s8,1
ee001500:	007d7d93          	andi	s11,s10,7
        for (i=0; i<N; i++) {
ee001504:	8572                	mv	a0,t3
ee001506:	240d8063          	beqz	s11,ee001746 <matrix_test+0x514>
ee00150a:	4b85                	li	s7,1
ee00150c:	0f7d8e63          	beq	s11,s7,ee001608 <matrix_test+0x3d6>
ee001510:	4a89                	li	s5,2
ee001512:	0d5d8a63          	beq	s11,s5,ee0015e6 <matrix_test+0x3b4>
ee001516:	4a0d                	li	s4,3
ee001518:	0b4d8563          	beq	s11,s4,ee0015c2 <matrix_test+0x390>
ee00151c:	4911                	li	s2,4
ee00151e:	092d8063          	beq	s11,s2,ee00159e <matrix_test+0x36c>
ee001522:	4395                	li	t2,5
ee001524:	047d8b63          	beq	s11,t2,ee00157a <matrix_test+0x348>
ee001528:	4499                	li	s1,6
ee00152a:	029d8663          	beq	s11,s1,ee001556 <matrix_test+0x324>
                        cur=C[i*N+j];
ee00152e:	8516                	mv	a0,t0
ee001530:	000e2283          	lw	t0,0(t3)
                                ret+=10;
ee001534:	07c2                	slli	a5,a5,0x10
ee001536:	0107df93          	srli	t6,a5,0x10
                        tmp+=cur;
ee00153a:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee00153c:	01d5c463          	blt	a1,t4,ee001544 <matrix_test+0x312>
ee001540:	7100106f          	j	ee002c50 <matrix_test+0x1a1e>
                                ret+=10;
ee001544:	00af8e93          	addi	t4,t6,10
ee001548:	010e9d93          	slli	s11,t4,0x10
ee00154c:	410dd793          	srai	a5,s11,0x10
                                tmp=0;
ee001550:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001552:	004e0513          	addi	a0,t3,4
                        cur=C[i*N+j];
ee001556:	8b96                	mv	s7,t0
ee001558:	00052283          	lw	t0,0(a0)
                                ret+=10;
ee00155c:	01079a93          	slli	s5,a5,0x10
ee001560:	010ada13          	srli	s4,s5,0x10
                        tmp+=cur;
ee001564:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee001566:	35d5dd63          	bge	a1,t4,ee0018c0 <matrix_test+0x68e>
                                ret+=10;
ee00156a:	00aa0793          	addi	a5,s4,10
ee00156e:	01079f93          	slli	t6,a5,0x10
ee001572:	410fd793          	srai	a5,t6,0x10
                                tmp=0;
ee001576:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001578:	0511                	addi	a0,a0,4
                        cur=C[i*N+j];
ee00157a:	8c96                	mv	s9,t0
ee00157c:	00052283          	lw	t0,0(a0)
                                ret+=10;
ee001580:	01079c13          	slli	s8,a5,0x10
ee001584:	010c5d13          	srli	s10,s8,0x10
                        tmp+=cur;
ee001588:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee00158a:	33d5d263          	bge	a1,t4,ee0018ae <matrix_test+0x67c>
                                ret+=10;
ee00158e:	00ad0e93          	addi	t4,s10,10
ee001592:	010e9a13          	slli	s4,t4,0x10
ee001596:	410a5793          	srai	a5,s4,0x10
                                tmp=0;
ee00159a:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee00159c:	0511                	addi	a0,a0,4
                        cur=C[i*N+j];
ee00159e:	8916                	mv	s2,t0
ee0015a0:	00052283          	lw	t0,0(a0)
                                ret+=10;
ee0015a4:	01079393          	slli	t2,a5,0x10
ee0015a8:	0103d493          	srli	s1,t2,0x10
                        tmp+=cur;
ee0015ac:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee0015ae:	2fd5d763          	bge	a1,t4,ee00189c <matrix_test+0x66a>
                                ret+=10;
ee0015b2:	00a48c13          	addi	s8,s1,10
ee0015b6:	010c1d13          	slli	s10,s8,0x10
ee0015ba:	410d5793          	srai	a5,s10,0x10
                                tmp=0;
ee0015be:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee0015c0:	0511                	addi	a0,a0,4
                        cur=C[i*N+j];
ee0015c2:	8d96                	mv	s11,t0
ee0015c4:	00052283          	lw	t0,0(a0)
                                ret+=10;
ee0015c8:	01079b93          	slli	s7,a5,0x10
ee0015cc:	010bda93          	srli	s5,s7,0x10
                        tmp+=cur;
ee0015d0:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee0015d2:	2bd5dc63          	bge	a1,t4,ee00188a <matrix_test+0x658>
                                ret+=10;
ee0015d6:	00aa8e93          	addi	t4,s5,10
ee0015da:	010e9493          	slli	s1,t4,0x10
ee0015de:	4104d793          	srai	a5,s1,0x10
                                tmp=0;
ee0015e2:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee0015e4:	0511                	addi	a0,a0,4
                        cur=C[i*N+j];
ee0015e6:	8f96                	mv	t6,t0
ee0015e8:	00052283          	lw	t0,0(a0)
                                ret+=10;
ee0015ec:	07c2                	slli	a5,a5,0x10
ee0015ee:	0107dc93          	srli	s9,a5,0x10
                        tmp+=cur;
ee0015f2:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee0015f4:	29d5d263          	bge	a1,t4,ee001878 <matrix_test+0x646>
                                ret+=10;
ee0015f8:	00ac8b93          	addi	s7,s9,10
ee0015fc:	010b9a93          	slli	s5,s7,0x10
ee001600:	410ad793          	srai	a5,s5,0x10
                                tmp=0;
ee001604:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001606:	0511                	addi	a0,a0,4
                        cur=C[i*N+j];
ee001608:	8a16                	mv	s4,t0
ee00160a:	00052283          	lw	t0,0(a0)
                                ret+=10;
ee00160e:	01079913          	slli	s2,a5,0x10
ee001612:	01095393          	srli	t2,s2,0x10
                        tmp+=cur;
ee001616:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee001618:	25d5d863          	bge	a1,t4,ee001868 <matrix_test+0x636>
                                ret+=10;
ee00161c:	00a38e93          	addi	t4,t2,10
ee001620:	010e9c93          	slli	s9,t4,0x10
ee001624:	410cd793          	srai	a5,s9,0x10
                                tmp=0;
ee001628:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee00162a:	0511                	addi	a0,a0,4
ee00162c:	10c51d63          	bne	a0,a2,ee001746 <matrix_test+0x514>
        for (i=0; i<N; i++) {
ee001630:	00130493          	addi	s1,t1,1
ee001634:	40ee0633          	sub	a2,t3,a4
ee001638:	28680d63          	beq	a6,t1,ee0018d2 <matrix_test+0x6a0>
ee00163c:	8326                	mv	t1,s1
ee00163e:	b57d                	j	ee0014ec <matrix_test+0x2ba>
                                ret += (cur>prev) ? 1 : 0;
ee001640:	0182a2b3          	slt	t0,t0,s8
                        cur=C[i*N+j];
ee001644:	00452c83          	lw	s9,4(a0)
                                ret += (cur>prev) ? 1 : 0;
ee001648:	005d8bb3          	add	s7,s11,t0
ee00164c:	010b9a93          	slli	s5,s7,0x10
ee001650:	410ad393          	srai	t2,s5,0x10
                                ret+=10;
ee001654:	01039f93          	slli	t6,t2,0x10
                        tmp+=cur;
ee001658:	01948eb3          	add	t4,s1,s9
                for (j=0; j<N; j++) {
ee00165c:	0511                	addi	a0,a0,4
                                ret+=10;
ee00165e:	010fd793          	srli	a5,t6,0x10
                        if (tmp>clipval) {
ee001662:	11d5de63          	bge	a1,t4,ee00177e <matrix_test+0x54c>
                        cur=C[i*N+j];
ee001666:	00452a03          	lw	s4,4(a0)
                                ret+=10;
ee00166a:	00a78b93          	addi	s7,a5,10
ee00166e:	010b9a93          	slli	s5,s7,0x10
ee001672:	410ad293          	srai	t0,s5,0x10
                                tmp=0;
ee001676:	4e81                	li	t4,0
                                ret+=10;
ee001678:	01029913          	slli	s2,t0,0x10
                        tmp+=cur;
ee00167c:	014e84b3          	add	s1,t4,s4
                                ret+=10;
ee001680:	01095393          	srli	t2,s2,0x10
                        if (tmp>clipval) {
ee001684:	1095df63          	bge	a1,s1,ee0017a2 <matrix_test+0x570>
                        cur=C[i*N+j];
ee001688:	00852d83          	lw	s11,8(a0)
                                ret+=10;
ee00168c:	00a38c13          	addi	s8,t2,10
ee001690:	010c1d13          	slli	s10,s8,0x10
ee001694:	410d5e93          	srai	t4,s10,0x10
                                tmp=0;
ee001698:	4481                	li	s1,0
                                ret+=10;
ee00169a:	010e9293          	slli	t0,t4,0x10
                        tmp+=cur;
ee00169e:	01b48ab3          	add	s5,s1,s11
                                ret+=10;
ee0016a2:	0102db93          	srli	s7,t0,0x10
                        if (tmp>clipval) {
ee0016a6:	1355d063          	bge	a1,s5,ee0017c6 <matrix_test+0x594>
                        cur=C[i*N+j];
ee0016aa:	00c52c03          	lw	s8,12(a0)
                                ret+=10;
ee0016ae:	00ab8c93          	addi	s9,s7,10
ee0016b2:	010c9f93          	slli	t6,s9,0x10
ee0016b6:	410fd493          	srai	s1,t6,0x10
                                tmp=0;
ee0016ba:	4a81                	li	s5,0
                                ret+=10;
ee0016bc:	01049793          	slli	a5,s1,0x10
                        tmp+=cur;
ee0016c0:	018a8eb3          	add	t4,s5,s8
                                ret+=10;
ee0016c4:	0107dd13          	srli	s10,a5,0x10
                        if (tmp>clipval) {
ee0016c8:	13d5d163          	bge	a1,t4,ee0017ea <matrix_test+0x5b8>
                                ret+=10;
ee0016cc:	00ad0a13          	addi	s4,s10,10
                        cur=C[i*N+j];
ee0016d0:	01052383          	lw	t2,16(a0)
                                ret+=10;
ee0016d4:	010a1913          	slli	s2,s4,0x10
ee0016d8:	41095a93          	srai	s5,s2,0x10
                                tmp=0;
ee0016dc:	4e81                	li	t4,0
                                ret+=10;
ee0016de:	010a9493          	slli	s1,s5,0x10
                        tmp+=cur;
ee0016e2:	007e8d33          	add	s10,t4,t2
                                ret+=10;
ee0016e6:	0104dc93          	srli	s9,s1,0x10
                        if (tmp>clipval) {
ee0016ea:	13a5d263          	bge	a1,s10,ee00180e <matrix_test+0x5dc>
                        cur=C[i*N+j];
ee0016ee:	01452b83          	lw	s7,20(a0)
                                ret+=10;
ee0016f2:	00ac8d93          	addi	s11,s9,10
ee0016f6:	010d9293          	slli	t0,s11,0x10
ee0016fa:	4102de93          	srai	t4,t0,0x10
                                tmp=0;
ee0016fe:	4d01                	li	s10,0
                                ret+=10;
ee001700:	010e9a93          	slli	s5,t4,0x10
                        tmp+=cur;
ee001704:	017d0933          	add	s2,s10,s7
                                ret+=10;
ee001708:	010ada13          	srli	s4,s5,0x10
                        if (tmp>clipval) {
ee00170c:	1325d363          	bge	a1,s2,ee001832 <matrix_test+0x600>
                        cur=C[i*N+j];
ee001710:	01852283          	lw	t0,24(a0)
                                ret+=10;
ee001714:	00aa0f93          	addi	t6,s4,10
ee001718:	010f9c13          	slli	s8,t6,0x10
ee00171c:	410c5d13          	srai	s10,s8,0x10
                                tmp=0;
ee001720:	4901                	li	s2,0
                                ret+=10;
ee001722:	010d1793          	slli	a5,s10,0x10
                        tmp+=cur;
ee001726:	00590eb3          	add	t4,s2,t0
                                ret+=10;
ee00172a:	0107dd93          	srli	s11,a5,0x10
                        if (tmp>clipval) {
ee00172e:	13d5d463          	bge	a1,t4,ee001856 <matrix_test+0x624>
                                ret+=10;
ee001732:	00ad8913          	addi	s2,s11,10
ee001736:	01091393          	slli	t2,s2,0x10
ee00173a:	4103d793          	srai	a5,t2,0x10
                                tmp=0;
ee00173e:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001740:	0571                	addi	a0,a0,28
ee001742:	eec507e3          	beq	a0,a2,ee001630 <matrix_test+0x3fe>
                        cur=C[i*N+j];
ee001746:	00052c03          	lw	s8,0(a0)
                                ret+=10;
ee00174a:	01079d13          	slli	s10,a5,0x10
ee00174e:	010d5d93          	srli	s11,s10,0x10
                        tmp+=cur;
ee001752:	018e84b3          	add	s1,t4,s8
                        if (tmp>clipval) {
ee001756:	ee95d5e3          	bge	a1,s1,ee001640 <matrix_test+0x40e>
                        cur=C[i*N+j];
ee00175a:	00452c83          	lw	s9,4(a0)
                                ret+=10;
ee00175e:	00ad8a13          	addi	s4,s11,10
ee001762:	010a1913          	slli	s2,s4,0x10
ee001766:	41095393          	srai	t2,s2,0x10
                                tmp=0;
ee00176a:	4481                	li	s1,0
                                ret+=10;
ee00176c:	01039f93          	slli	t6,t2,0x10
                        tmp+=cur;
ee001770:	01948eb3          	add	t4,s1,s9
                for (j=0; j<N; j++) {
ee001774:	0511                	addi	a0,a0,4
                                ret+=10;
ee001776:	010fd793          	srli	a5,t6,0x10
                        if (tmp>clipval) {
ee00177a:	efd5c6e3          	blt	a1,t4,ee001666 <matrix_test+0x434>
                                ret += (cur>prev) ? 1 : 0;
ee00177e:	019c2c33          	slt	s8,s8,s9
                        cur=C[i*N+j];
ee001782:	00452a03          	lw	s4,4(a0)
                                ret += (cur>prev) ? 1 : 0;
ee001786:	01878d33          	add	s10,a5,s8
ee00178a:	010d1d93          	slli	s11,s10,0x10
ee00178e:	410dd293          	srai	t0,s11,0x10
                                ret+=10;
ee001792:	01029913          	slli	s2,t0,0x10
                        tmp+=cur;
ee001796:	014e84b3          	add	s1,t4,s4
                                ret+=10;
ee00179a:	01095393          	srli	t2,s2,0x10
                        if (tmp>clipval) {
ee00179e:	ee95c5e3          	blt	a1,s1,ee001688 <matrix_test+0x456>
                                ret += (cur>prev) ? 1 : 0;
ee0017a2:	014cacb3          	slt	s9,s9,s4
                        cur=C[i*N+j];
ee0017a6:	00852d83          	lw	s11,8(a0)
                                ret += (cur>prev) ? 1 : 0;
ee0017aa:	01938fb3          	add	t6,t2,s9
ee0017ae:	010f9793          	slli	a5,t6,0x10
ee0017b2:	4107de93          	srai	t4,a5,0x10
                                ret+=10;
ee0017b6:	010e9293          	slli	t0,t4,0x10
                        tmp+=cur;
ee0017ba:	01b48ab3          	add	s5,s1,s11
                                ret+=10;
ee0017be:	0102db93          	srli	s7,t0,0x10
                        if (tmp>clipval) {
ee0017c2:	ef55c4e3          	blt	a1,s5,ee0016aa <matrix_test+0x478>
                                ret += (cur>prev) ? 1 : 0;
ee0017c6:	01ba2a33          	slt	s4,s4,s11
                        cur=C[i*N+j];
ee0017ca:	00c52c03          	lw	s8,12(a0)
                                ret += (cur>prev) ? 1 : 0;
ee0017ce:	014b8933          	add	s2,s7,s4
ee0017d2:	01091393          	slli	t2,s2,0x10
ee0017d6:	4103d493          	srai	s1,t2,0x10
                                ret+=10;
ee0017da:	01049793          	slli	a5,s1,0x10
                        tmp+=cur;
ee0017de:	018a8eb3          	add	t4,s5,s8
                                ret+=10;
ee0017e2:	0107dd13          	srli	s10,a5,0x10
                        if (tmp>clipval) {
ee0017e6:	efd5c3e3          	blt	a1,t4,ee0016cc <matrix_test+0x49a>
                                ret += (cur>prev) ? 1 : 0;
ee0017ea:	018dadb3          	slt	s11,s11,s8
ee0017ee:	01bd02b3          	add	t0,s10,s11
                        cur=C[i*N+j];
ee0017f2:	01052383          	lw	t2,16(a0)
                                ret += (cur>prev) ? 1 : 0;
ee0017f6:	01029b93          	slli	s7,t0,0x10
ee0017fa:	410bda93          	srai	s5,s7,0x10
                                ret+=10;
ee0017fe:	010a9493          	slli	s1,s5,0x10
                        tmp+=cur;
ee001802:	007e8d33          	add	s10,t4,t2
                                ret+=10;
ee001806:	0104dc93          	srli	s9,s1,0x10
                        if (tmp>clipval) {
ee00180a:	efa5c2e3          	blt	a1,s10,ee0016ee <matrix_test+0x4bc>
                                ret += (cur>prev) ? 1 : 0;
ee00180e:	007c2fb3          	slt	t6,s8,t2
                        cur=C[i*N+j];
ee001812:	01452b83          	lw	s7,20(a0)
                                ret += (cur>prev) ? 1 : 0;
ee001816:	01fc8c33          	add	s8,s9,t6
ee00181a:	010c1793          	slli	a5,s8,0x10
ee00181e:	4107de93          	srai	t4,a5,0x10
                                ret+=10;
ee001822:	010e9a93          	slli	s5,t4,0x10
                        tmp+=cur;
ee001826:	017d0933          	add	s2,s10,s7
                                ret+=10;
ee00182a:	010ada13          	srli	s4,s5,0x10
                        if (tmp>clipval) {
ee00182e:	ef25c1e3          	blt	a1,s2,ee001710 <matrix_test+0x4de>
                                ret += (cur>prev) ? 1 : 0;
ee001832:	0173a3b3          	slt	t2,t2,s7
                        cur=C[i*N+j];
ee001836:	01852283          	lw	t0,24(a0)
                                ret += (cur>prev) ? 1 : 0;
ee00183a:	007a04b3          	add	s1,s4,t2
ee00183e:	01049c93          	slli	s9,s1,0x10
ee001842:	410cdd13          	srai	s10,s9,0x10
                                ret+=10;
ee001846:	010d1793          	slli	a5,s10,0x10
                        tmp+=cur;
ee00184a:	00590eb3          	add	t4,s2,t0
                                ret+=10;
ee00184e:	0107dd93          	srli	s11,a5,0x10
                        if (tmp>clipval) {
ee001852:	efd5c0e3          	blt	a1,t4,ee001732 <matrix_test+0x500>
                                ret += (cur>prev) ? 1 : 0;
ee001856:	005babb3          	slt	s7,s7,t0
ee00185a:	017d8ab3          	add	s5,s11,s7
ee00185e:	010a9a13          	slli	s4,s5,0x10
ee001862:	410a5793          	srai	a5,s4,0x10
ee001866:	bde9                	j	ee001740 <matrix_test+0x50e>
ee001868:	005a24b3          	slt	s1,s4,t0
ee00186c:	00938fb3          	add	t6,t2,s1
ee001870:	010f9793          	slli	a5,t6,0x10
ee001874:	87c1                	srai	a5,a5,0x10
ee001876:	bb55                	j	ee00162a <matrix_test+0x3f8>
ee001878:	005fac33          	slt	s8,t6,t0
ee00187c:	018c8d33          	add	s10,s9,s8
ee001880:	010d1d93          	slli	s11,s10,0x10
ee001884:	410dd793          	srai	a5,s11,0x10
ee001888:	bbbd                	j	ee001606 <matrix_test+0x3d4>
ee00188a:	005daa33          	slt	s4,s11,t0
ee00188e:	014a8933          	add	s2,s5,s4
ee001892:	01091393          	slli	t2,s2,0x10
ee001896:	4103d793          	srai	a5,t2,0x10
ee00189a:	b3a9                	j	ee0015e4 <matrix_test+0x3b2>
ee00189c:	005927b3          	slt	a5,s2,t0
ee0018a0:	00f48fb3          	add	t6,s1,a5
ee0018a4:	010f9c93          	slli	s9,t6,0x10
ee0018a8:	410cd793          	srai	a5,s9,0x10
ee0018ac:	bb11                	j	ee0015c0 <matrix_test+0x38e>
ee0018ae:	005cadb3          	slt	s11,s9,t0
ee0018b2:	01bd0bb3          	add	s7,s10,s11
ee0018b6:	010b9a93          	slli	s5,s7,0x10
ee0018ba:	410ad793          	srai	a5,s5,0x10
ee0018be:	b9f9                	j	ee00159c <matrix_test+0x36a>
ee0018c0:	005ba933          	slt	s2,s7,t0
ee0018c4:	012a03b3          	add	t2,s4,s2
ee0018c8:	01039493          	slli	s1,t2,0x10
ee0018cc:	4104d793          	srai	a5,s1,0x10
ee0018d0:	b165                	j	ee001578 <matrix_test+0x346>
                   crc &= 0x7fff;
    }
        return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee0018d2:	0ff7f313          	zext.b	t1,a5
                crc >>= 1;
ee0018d6:	00137e13          	andi	t3,t1,1
ee0018da:	6d29                	lui	s10,0xa
ee0018dc:	41c00cb3          	neg	s9,t3
ee0018e0:	001d0f93          	addi	t6,s10,1 # a001 <_start-0x7fff5fff>
ee0018e4:	019ffc33          	and	s8,t6,s9
                data >>= 1;
ee0018e8:	00135293          	srli	t0,t1,0x1
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee0018ec:	01079e93          	slli	t4,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0018f0:	0182cdb3          	xor	s11,t0,s8
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee0018f4:	010edb93          	srli	s7,t4,0x10
                if (x16 == 1)
ee0018f8:	001dfa93          	andi	s5,s11,1
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee0018fc:	008bd793          	srli	a5,s7,0x8
                data >>= 1;
ee001900:	00235a13          	srli	s4,t1,0x2
                crc >>= 1;
ee001904:	001c5813          	srli	a6,s8,0x1
                if (x16 == 1)
ee001908:	000a8b63          	beqz	s5,ee00191e <matrix_test+0x6ec>
                   crc |= 0x8000;
ee00190c:	7969                	lui	s2,0xffffa
ee00190e:	00190393          	addi	t2,s2,1 # ffffa001 <STACK+0xffb8271>
ee001912:	00784533          	xor	a0,a6,t2
ee001916:	01051713          	slli	a4,a0,0x10
ee00191a:	01075813          	srli	a6,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00191e:	010a48b3          	xor	a7,s4,a6
                if (x16 == 1)
ee001922:	0018f493          	andi	s1,a7,1
                data >>= 1;
ee001926:	00335613          	srli	a2,t1,0x3
                crc >>= 1;
ee00192a:	00185713          	srli	a4,a6,0x1
                if (x16 == 1)
ee00192e:	c891                	beqz	s1,ee001942 <matrix_test+0x710>
                   crc |= 0x8000;
ee001930:	7369                	lui	t1,0xffffa
ee001932:	00130e13          	addi	t3,t1,1 # ffffa001 <STACK+0xffb8271>
ee001936:	01c74cb3          	xor	s9,a4,t3
ee00193a:	010c9d13          	slli	s10,s9,0x10
ee00193e:	010d5713          	srli	a4,s10,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001942:	00e64fb3          	xor	t6,a2,a4
                if (x16 == 1)
ee001946:	001ffc13          	andi	s8,t6,1
                data >>= 1;
ee00194a:	00165293          	srli	t0,a2,0x1
                crc >>= 1;
ee00194e:	00175a13          	srli	s4,a4,0x1
                if (x16 == 1)
ee001952:	000c0b63          	beqz	s8,ee001968 <matrix_test+0x736>
                   crc |= 0x8000;
ee001956:	7de9                	lui	s11,0xffffa
ee001958:	001d8e93          	addi	t4,s11,1 # ffffa001 <STACK+0xffb8271>
ee00195c:	01da4bb3          	xor	s7,s4,t4
ee001960:	010b9a93          	slli	s5,s7,0x10
ee001964:	010ada13          	srli	s4,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001968:	0142c933          	xor	s2,t0,s4
                if (x16 == 1)
ee00196c:	00197393          	andi	t2,s2,1
                data >>= 1;
ee001970:	00265813          	srli	a6,a2,0x2
                crc >>= 1;
ee001974:	001a5313          	srli	t1,s4,0x1
                if (x16 == 1)
ee001978:	00038b63          	beqz	t2,ee00198e <matrix_test+0x75c>
                   crc |= 0x8000;
ee00197c:	7569                	lui	a0,0xffffa
ee00197e:	00150893          	addi	a7,a0,1 # ffffa001 <STACK+0xffb8271>
ee001982:	01134733          	xor	a4,t1,a7
ee001986:	01071493          	slli	s1,a4,0x10
ee00198a:	0104d313          	srli	t1,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00198e:	00684e33          	xor	t3,a6,t1
                if (x16 == 1)
ee001992:	001e7c93          	andi	s9,t3,1
                data >>= 1;
ee001996:	00365d13          	srli	s10,a2,0x3
                crc >>= 1;
ee00199a:	00135e93          	srli	t4,t1,0x1
                if (x16 == 1)
ee00199e:	000c8b63          	beqz	s9,ee0019b4 <matrix_test+0x782>
                   crc |= 0x8000;
ee0019a2:	7fe9                	lui	t6,0xffffa
ee0019a4:	001f8c13          	addi	s8,t6,1 # ffffa001 <STACK+0xffb8271>
ee0019a8:	018ec2b3          	xor	t0,t4,s8
ee0019ac:	01029d93          	slli	s11,t0,0x10
ee0019b0:	010dde93          	srli	t4,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0019b4:	01dd4bb3          	xor	s7,s10,t4
                if (x16 == 1)
ee0019b8:	001bfa93          	andi	s5,s7,1
                data >>= 1;
ee0019bc:	8211                	srli	a2,a2,0x4
                crc >>= 1;
ee0019be:	001ed893          	srli	a7,t4,0x1
                if (x16 == 1)
ee0019c2:	000a8b63          	beqz	s5,ee0019d8 <matrix_test+0x7a6>
                   crc |= 0x8000;
ee0019c6:	7a69                	lui	s4,0xffffa
ee0019c8:	001a0913          	addi	s2,s4,1 # ffffa001 <STACK+0xffb8271>
ee0019cc:	0128c3b3          	xor	t2,a7,s2
ee0019d0:	01039813          	slli	a6,t2,0x10
ee0019d4:	01085893          	srli	a7,a6,0x10
                if (x16 == 1)
ee0019d8:	0018f513          	andi	a0,a7,1
                crc >>= 1;
ee0019dc:	0018dc93          	srli	s9,a7,0x1
                if (x16 == 1)
ee0019e0:	00c50b63          	beq	a0,a2,ee0019f6 <matrix_test+0x7c4>
                   crc |= 0x8000;
ee0019e4:	74e9                	lui	s1,0xffffa
ee0019e6:	00148313          	addi	t1,s1,1 # ffffa001 <STACK+0xffb8271>
ee0019ea:	006cc733          	xor	a4,s9,t1
ee0019ee:	01071e13          	slli	t3,a4,0x10
ee0019f2:	010e5c93          	srli	s9,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0019f6:	0197cd33          	xor	s10,a5,s9
                if (x16 == 1)
ee0019fa:	001d7f93          	andi	t6,s10,1
                data >>= 1;
ee0019fe:	0017dc13          	srli	s8,a5,0x1
                if (x16 == 1)
ee001a02:	001cda93          	srli	s5,s9,0x1
ee001a06:	000f8b63          	beqz	t6,ee001a1c <matrix_test+0x7ea>
                   crc |= 0x8000;
ee001a0a:	72e9                	lui	t0,0xffffa
ee001a0c:	00128d93          	addi	s11,t0,1 # ffffa001 <STACK+0xffb8271>
ee001a10:	01baceb3          	xor	t4,s5,s11
ee001a14:	010e9b93          	slli	s7,t4,0x10
ee001a18:	010bda93          	srli	s5,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001a1c:	015c4633          	xor	a2,s8,s5
                if (x16 == 1)
ee001a20:	00167a13          	andi	s4,a2,1
                data >>= 1;
ee001a24:	0027d913          	srli	s2,a5,0x2
                if (x16 == 1)
ee001a28:	001ad493          	srli	s1,s5,0x1
ee001a2c:	000a0b63          	beqz	s4,ee001a42 <matrix_test+0x810>
                   crc |= 0x8000;
ee001a30:	73e9                	lui	t2,0xffffa
ee001a32:	00138813          	addi	a6,t2,1 # ffffa001 <STACK+0xffb8271>
ee001a36:	0104c8b3          	xor	a7,s1,a6
ee001a3a:	01089513          	slli	a0,a7,0x10
ee001a3e:	01055493          	srli	s1,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001a42:	00994333          	xor	t1,s2,s1
                if (x16 == 1)
ee001a46:	00137e13          	andi	t3,t1,1
                data >>= 1;
ee001a4a:	0037dc93          	srli	s9,a5,0x3
                if (x16 == 1)
ee001a4e:	0014d293          	srli	t0,s1,0x1
ee001a52:	000e0b63          	beqz	t3,ee001a68 <matrix_test+0x836>
                   crc |= 0x8000;
ee001a56:	7d69                	lui	s10,0xffffa
ee001a58:	001d0f93          	addi	t6,s10,1 # ffffa001 <STACK+0xffb8271>
ee001a5c:	01f2c733          	xor	a4,t0,t6
ee001a60:	01071c13          	slli	s8,a4,0x10
ee001a64:	010c5293          	srli	t0,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001a68:	005ccdb3          	xor	s11,s9,t0
                if (x16 == 1)
ee001a6c:	001dfe93          	andi	t4,s11,1
                data >>= 1;
ee001a70:	0047db93          	srli	s7,a5,0x4
                if (x16 == 1)
ee001a74:	0012d393          	srli	t2,t0,0x1
ee001a78:	000e8b63          	beqz	t4,ee001a8e <matrix_test+0x85c>
                   crc |= 0x8000;
ee001a7c:	7ae9                	lui	s5,0xffffa
ee001a7e:	001a8613          	addi	a2,s5,1 # ffffa001 <STACK+0xffb8271>
ee001a82:	00c3ca33          	xor	s4,t2,a2
ee001a86:	010a1913          	slli	s2,s4,0x10
ee001a8a:	01095393          	srli	t2,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001a8e:	007bc833          	xor	a6,s7,t2
                if (x16 == 1)
ee001a92:	00187893          	andi	a7,a6,1
                data >>= 1;
ee001a96:	0057d513          	srli	a0,a5,0x5
                if (x16 == 1)
ee001a9a:	0013dd13          	srli	s10,t2,0x1
ee001a9e:	00088b63          	beqz	a7,ee001ab4 <matrix_test+0x882>
                   crc |= 0x8000;
ee001aa2:	74e9                	lui	s1,0xffffa
ee001aa4:	00148313          	addi	t1,s1,1 # ffffa001 <STACK+0xffb8271>
ee001aa8:	006d4e33          	xor	t3,s10,t1
ee001aac:	010e1c93          	slli	s9,t3,0x10
ee001ab0:	010cdd13          	srli	s10,s9,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001ab4:	01a54fb3          	xor	t6,a0,s10
                if (x16 == 1)
ee001ab8:	001ffc13          	andi	s8,t6,1
                data >>= 1;
ee001abc:	0067d293          	srli	t0,a5,0x6
                if (x16 == 1)
ee001ac0:	001d5a93          	srli	s5,s10,0x1
ee001ac4:	000c0b63          	beqz	s8,ee001ada <matrix_test+0x8a8>
                   crc |= 0x8000;
ee001ac8:	7de9                	lui	s11,0xffffa
ee001aca:	001d8e93          	addi	t4,s11,1 # ffffa001 <STACK+0xffb8271>
ee001ace:	01dac733          	xor	a4,s5,t4
ee001ad2:	01071b93          	slli	s7,a4,0x10
ee001ad6:	010bda93          	srli	s5,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001ada:	0152c633          	xor	a2,t0,s5
                if (x16 == 1)
ee001ade:	00167a13          	andi	s4,a2,1
                data >>= 1;
ee001ae2:	839d                	srli	a5,a5,0x7
                if (x16 == 1)
ee001ae4:	001ad513          	srli	a0,s5,0x1
ee001ae8:	000a0b63          	beqz	s4,ee001afe <matrix_test+0x8cc>
                   crc |= 0x8000;
ee001aec:	7969                	lui	s2,0xffffa
ee001aee:	00190393          	addi	t2,s2,1 # ffffa001 <STACK+0xffb8271>
ee001af2:	00754833          	xor	a6,a0,t2
ee001af6:	01081893          	slli	a7,a6,0x10
ee001afa:	0108d513          	srli	a0,a7,0x10
                if (x16 == 1)
ee001afe:	00157493          	andi	s1,a0,1
ee001b02:	00155c13          	srli	s8,a0,0x1
ee001b06:	00f48b63          	beq	s1,a5,ee001b1c <matrix_test+0x8ea>
                   crc |= 0x8000;
ee001b0a:	7369                	lui	t1,0xffffa
ee001b0c:	00130e13          	addi	t3,t1,1 # ffffa001 <STACK+0xffb8271>
ee001b10:	01cc4cb3          	xor	s9,s8,t3
ee001b14:	010c9d13          	slli	s10,s9,0x10
ee001b18:	010d5c13          	srli	s8,s10,0x10
        for (i=0; i<N; i++) {
ee001b1c:	e019                	bnez	s0,ee001b22 <matrix_test+0x8f0>
ee001b1e:	15d0106f          	j	ee00347a <matrix_test+0x2248>
ee001b22:	00241d93          	slli	s11,s0,0x2
ee001b26:	00141e93          	slli	t4,s0,0x1
ee001b2a:	88fa                	mv	a7,t5
ee001b2c:	01ed8833          	add	a6,s11,t5
ee001b30:	013e8933          	add	s2,t4,s3
ee001b34:	4a01                	li	s4,0
ee001b36:	83ae                	mv	t2,a1
ee001b38:	c662                	sw	s8,12(sp)
ee001b3a:	c836                	sw	a3,16(sp)
                for (j=0; j<N; j++) {
ee001b3c:	413905b3          	sub	a1,s2,s3
ee001b40:	ffe58693          	addi	a3,a1,-2 # ffffeffe <STACK+0xffbd26e>
ee001b44:	0016d713          	srli	a4,a3,0x1
ee001b48:	00170b93          	addi	s7,a4,1
ee001b4c:	001a1a93          	slli	s5,s4,0x1
ee001b50:	007bf513          	andi	a0,s7,7
ee001b54:	015b0633          	add	a2,s6,s5
        for (i=0; i<N; i++) {
ee001b58:	85ce                	mv	a1,s3
ee001b5a:	4781                	li	a5,0
ee001b5c:	c545                	beqz	a0,ee001c04 <matrix_test+0x9d2>
ee001b5e:	4485                	li	s1,1
ee001b60:	08950763          	beq	a0,s1,ee001bee <matrix_test+0x9bc>
ee001b64:	4309                	li	t1,2
ee001b66:	06650b63          	beq	a0,t1,ee001bdc <matrix_test+0x9aa>
ee001b6a:	4e0d                	li	t3,3
ee001b6c:	05c50f63          	beq	a0,t3,ee001bca <matrix_test+0x998>
ee001b70:	4c91                	li	s9,4
ee001b72:	05950363          	beq	a0,s9,ee001bb8 <matrix_test+0x986>
ee001b76:	4d15                	li	s10,5
ee001b78:	03a50763          	beq	a0,s10,ee001ba6 <matrix_test+0x974>
ee001b7c:	4c19                	li	s8,6
ee001b7e:	01850b63          	beq	a0,s8,ee001b94 <matrix_test+0x962>
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee001b82:	00061783          	lh	a5,0(a2)
ee001b86:	00099f83          	lh	t6,0(s3)
                for (j=0; j<N; j++) {
ee001b8a:	0609                	addi	a2,a2,2
ee001b8c:	00298593          	addi	a1,s3,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee001b90:	03f787b3          	mul	a5,a5,t6
ee001b94:	00061283          	lh	t0,0(a2)
ee001b98:	00059d83          	lh	s11,0(a1)
                for (j=0; j<N; j++) {
ee001b9c:	0609                	addi	a2,a2,2
ee001b9e:	0589                	addi	a1,a1,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee001ba0:	03b28eb3          	mul	t4,t0,s11
ee001ba4:	97f6                	add	a5,a5,t4
ee001ba6:	00061683          	lh	a3,0(a2)
ee001baa:	00059703          	lh	a4,0(a1)
                for (j=0; j<N; j++) {
ee001bae:	0609                	addi	a2,a2,2
ee001bb0:	0589                	addi	a1,a1,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee001bb2:	02e68bb3          	mul	s7,a3,a4
ee001bb6:	97de                	add	a5,a5,s7
ee001bb8:	00061a83          	lh	s5,0(a2)
ee001bbc:	00059503          	lh	a0,0(a1)
                for (j=0; j<N; j++) {
ee001bc0:	0609                	addi	a2,a2,2
ee001bc2:	0589                	addi	a1,a1,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee001bc4:	02aa84b3          	mul	s1,s5,a0
ee001bc8:	97a6                	add	a5,a5,s1
ee001bca:	00061e03          	lh	t3,0(a2)
ee001bce:	00059303          	lh	t1,0(a1)
                for (j=0; j<N; j++) {
ee001bd2:	0609                	addi	a2,a2,2
ee001bd4:	0589                	addi	a1,a1,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee001bd6:	026e0cb3          	mul	s9,t3,t1
ee001bda:	97e6                	add	a5,a5,s9
ee001bdc:	00061d03          	lh	s10,0(a2)
ee001be0:	00059c03          	lh	s8,0(a1)
                for (j=0; j<N; j++) {
ee001be4:	0609                	addi	a2,a2,2
ee001be6:	0589                	addi	a1,a1,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee001be8:	038d0fb3          	mul	t6,s10,s8
ee001bec:	97fe                	add	a5,a5,t6
ee001bee:	00061283          	lh	t0,0(a2)
ee001bf2:	00059d83          	lh	s11,0(a1)
                for (j=0; j<N; j++) {
ee001bf6:	0589                	addi	a1,a1,2
ee001bf8:	0609                	addi	a2,a2,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee001bfa:	03b28eb3          	mul	t4,t0,s11
ee001bfe:	97f6                	add	a5,a5,t4
                for (j=0; j<N; j++) {
ee001c00:	08b90563          	beq	s2,a1,ee001c8a <matrix_test+0xa58>
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee001c04:	00061683          	lh	a3,0(a2)
ee001c08:	00059703          	lh	a4,0(a1)
ee001c0c:	00259d83          	lh	s11,2(a1)
ee001c10:	00261283          	lh	t0,2(a2)
ee001c14:	00461d03          	lh	s10,4(a2)
ee001c18:	00459f83          	lh	t6,4(a1)
ee001c1c:	02e684b3          	mul	s1,a3,a4
ee001c20:	00661e83          	lh	t4,6(a2)
ee001c24:	00659c83          	lh	s9,6(a1)
ee001c28:	00861e03          	lh	t3,8(a2)
ee001c2c:	00859c03          	lh	s8,8(a1)
ee001c30:	00a61303          	lh	t1,10(a2)
ee001c34:	00a59b83          	lh	s7,10(a1)
ee001c38:	00c61703          	lh	a4,12(a2)
ee001c3c:	00c59503          	lh	a0,12(a1)
ee001c40:	00e61683          	lh	a3,14(a2)
ee001c44:	03b282b3          	mul	t0,t0,s11
ee001c48:	00e59a83          	lh	s5,14(a1)
ee001c4c:	97a6                	add	a5,a5,s1
                for (j=0; j<N; j++) {
ee001c4e:	05c1                	addi	a1,a1,16
ee001c50:	0641                	addi	a2,a2,16
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee001c52:	03fd0db3          	mul	s11,s10,t6
ee001c56:	00578d33          	add	s10,a5,t0
ee001c5a:	039e8fb3          	mul	t6,t4,s9
ee001c5e:	01bd0eb3          	add	t4,s10,s11
ee001c62:	038e0cb3          	mul	s9,t3,s8
ee001c66:	01fe84b3          	add	s1,t4,t6
ee001c6a:	03730e33          	mul	t3,t1,s7
ee001c6e:	01948c33          	add	s8,s1,s9
ee001c72:	02a70bb3          	mul	s7,a4,a0
ee001c76:	01cc0733          	add	a4,s8,t3
ee001c7a:	03568333          	mul	t1,a3,s5
ee001c7e:	01770533          	add	a0,a4,s7
ee001c82:	006507b3          	add	a5,a0,t1
                for (j=0; j<N; j++) {
ee001c86:	f6b91fe3          	bne	s2,a1,ee001c04 <matrix_test+0x9d2>
ee001c8a:	00f8a023          	sw	a5,0(a7)
        for (i=0; i<N; i++) {
ee001c8e:	0891                	addi	a7,a7,4
ee001c90:	9a22                	add	s4,s4,s0
ee001c92:	eb1815e3          	bne	a6,a7,ee001b3c <matrix_test+0x90a>
ee001c96:	4c32                	lw	s8,12(sp)
ee001c98:	46c2                	lw	a3,16(sp)
ee001c9a:	40800933          	neg	s2,s0
ee001c9e:	859e                	mv	a1,t2
ee001ca0:	00291e13          	slli	t3,s2,0x2
        ee_s16 ret=0;
ee001ca4:	4781                	li	a5,0
        MATRES tmp=0,prev=0,cur=0;
ee001ca6:	4281                	li	t0,0
ee001ca8:	4e81                	li	t4,0
        for (i=0; i<N; i++) {
ee001caa:	4881                	li	a7,0
ee001cac:	00391313          	slli	t1,s2,0x3
                for (j=0; j<N; j++) {
ee001cb0:	01c80633          	add	a2,a6,t3
ee001cb4:	40c803b3          	sub	t2,a6,a2
ee001cb8:	ffc38a93          	addi	s5,t2,-4
ee001cbc:	002add93          	srli	s11,s5,0x2
ee001cc0:	001d8d13          	addi	s10,s11,1
ee001cc4:	007d7f93          	andi	t6,s10,7
        for (i=0; i<N; i++) {
ee001cc8:	8732                	mv	a4,a2
ee001cca:	620f8f63          	beqz	t6,ee002308 <matrix_test+0x10d6>
ee001cce:	4c85                	li	s9,1
ee001cd0:	0f9f8c63          	beq	t6,s9,ee001dc8 <matrix_test+0xb96>
ee001cd4:	4489                	li	s1,2
ee001cd6:	0c9f8863          	beq	t6,s1,ee001da6 <matrix_test+0xb74>
ee001cda:	4b8d                	li	s7,3
ee001cdc:	0b7f8363          	beq	t6,s7,ee001d82 <matrix_test+0xb50>
ee001ce0:	4511                	li	a0,4
ee001ce2:	06af8e63          	beq	t6,a0,ee001d5e <matrix_test+0xb2c>
ee001ce6:	4a15                	li	s4,5
ee001ce8:	054f8963          	beq	t6,s4,ee001d3a <matrix_test+0xb08>
ee001cec:	4919                	li	s2,6
ee001cee:	032f8463          	beq	t6,s2,ee001d16 <matrix_test+0xae4>
                        cur=C[i*N+j];
ee001cf2:	8716                	mv	a4,t0
ee001cf4:	00062283          	lw	t0,0(a2)
                                ret+=10;
ee001cf8:	07c2                	slli	a5,a5,0x10
ee001cfa:	0107d393          	srli	t2,a5,0x10
                        tmp+=cur;
ee001cfe:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee001d00:	73d5dee3          	bge	a1,t4,ee002c3c <matrix_test+0x1a0a>
                                ret+=10;
ee001d04:	00a38e93          	addi	t4,t2,10
ee001d08:	010e9f93          	slli	t6,t4,0x10
ee001d0c:	410fd793          	srai	a5,t6,0x10
                                tmp=0;
ee001d10:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001d12:	00460713          	addi	a4,a2,4
                        cur=C[i*N+j];
ee001d16:	8c96                	mv	s9,t0
ee001d18:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee001d1c:	01079493          	slli	s1,a5,0x10
ee001d20:	0104db93          	srli	s7,s1,0x10
                        tmp+=cur;
ee001d24:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee001d26:	71d5d1e3          	bge	a1,t4,ee002c28 <matrix_test+0x19f6>
                                ret+=10;
ee001d2a:	00ab8793          	addi	a5,s7,10
ee001d2e:	01079393          	slli	t2,a5,0x10
ee001d32:	4103d793          	srai	a5,t2,0x10
                                tmp=0;
ee001d36:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001d38:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
ee001d3a:	8a96                	mv	s5,t0
ee001d3c:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee001d40:	01079d93          	slli	s11,a5,0x10
ee001d44:	010ddd13          	srli	s10,s11,0x10
                        tmp+=cur;
ee001d48:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee001d4a:	73d5df63          	bge	a1,t4,ee002488 <matrix_test+0x1256>
                                ret+=10;
ee001d4e:	00ad0e93          	addi	t4,s10,10
ee001d52:	010e9b93          	slli	s7,t4,0x10
ee001d56:	410bd793          	srai	a5,s7,0x10
                                tmp=0;
ee001d5a:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001d5c:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
ee001d5e:	8516                	mv	a0,t0
ee001d60:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee001d64:	01079a13          	slli	s4,a5,0x10
ee001d68:	010a5913          	srli	s2,s4,0x10
                        tmp+=cur;
ee001d6c:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee001d6e:	71d5d463          	bge	a1,t4,ee002476 <matrix_test+0x1244>
                                ret+=10;
ee001d72:	00a90d93          	addi	s11,s2,10
ee001d76:	010d9d13          	slli	s10,s11,0x10
ee001d7a:	410d5793          	srai	a5,s10,0x10
                                tmp=0;
ee001d7e:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001d80:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
ee001d82:	8f96                	mv	t6,t0
ee001d84:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee001d88:	01079c93          	slli	s9,a5,0x10
ee001d8c:	010cd493          	srli	s1,s9,0x10
                        tmp+=cur;
ee001d90:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee001d92:	6dd5d963          	bge	a1,t4,ee002464 <matrix_test+0x1232>
                                ret+=10;
ee001d96:	00a48e93          	addi	t4,s1,10
ee001d9a:	010e9913          	slli	s2,t4,0x10
ee001d9e:	41095793          	srai	a5,s2,0x10
                                tmp=0;
ee001da2:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001da4:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
ee001da6:	8396                	mv	t2,t0
ee001da8:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee001dac:	07c2                	slli	a5,a5,0x10
ee001dae:	0107da93          	srli	s5,a5,0x10
                        tmp+=cur;
ee001db2:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee001db4:	69d5df63          	bge	a1,t4,ee002452 <matrix_test+0x1220>
                                ret+=10;
ee001db8:	00aa8c93          	addi	s9,s5,10
ee001dbc:	010c9493          	slli	s1,s9,0x10
ee001dc0:	4104d793          	srai	a5,s1,0x10
                                tmp=0;
ee001dc4:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001dc6:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
ee001dc8:	8b96                	mv	s7,t0
ee001dca:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee001dce:	01079513          	slli	a0,a5,0x10
ee001dd2:	01055a13          	srli	s4,a0,0x10
                        tmp+=cur;
ee001dd6:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee001dd8:	67d5d563          	bge	a1,t4,ee002442 <matrix_test+0x1210>
                                ret+=10;
ee001ddc:	00aa0e93          	addi	t4,s4,10
ee001de0:	010e9a93          	slli	s5,t4,0x10
ee001de4:	410ad793          	srai	a5,s5,0x10
                                tmp=0;
ee001de8:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee001dea:	0711                	addi	a4,a4,4
ee001dec:	50e81e63          	bne	a6,a4,ee002308 <matrix_test+0x10d6>
        for (i=0; i<N; i++) {
ee001df0:	0885                	addi	a7,a7,1
ee001df2:	40660833          	sub	a6,a2,t1
ee001df6:	eb141de3          	bne	s0,a7,ee001cb0 <matrix_test+0xa7e>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee001dfa:	01079613          	slli	a2,a5,0x10
ee001dfe:	01065a13          	srli	s4,a2,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee001e02:	0ff7f293          	zext.b	t0,a5
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee001e06:	008a5f93          	srli	t6,s4,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001e0a:	0182c933          	xor	s2,t0,s8
                if (x16 == 1)
ee001e0e:	00197393          	andi	t2,s2,1
                data >>= 1;
ee001e12:	0012da93          	srli	s5,t0,0x1
                if (x16 == 1)
ee001e16:	001c5c93          	srli	s9,s8,0x1
ee001e1a:	00038b63          	beqz	t2,ee001e30 <matrix_test+0xbfe>
                   crc |= 0x8000;
ee001e1e:	7c69                	lui	s8,0xffffa
ee001e20:	001c0d93          	addi	s11,s8,1 # ffffa001 <STACK+0xffb8271>
ee001e24:	01bccd33          	xor	s10,s9,s11
ee001e28:	010d1e93          	slli	t4,s10,0x10
ee001e2c:	010edc93          	srli	s9,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001e30:	019ac4b3          	xor	s1,s5,s9
                if (x16 == 1)
ee001e34:	0014fb93          	andi	s7,s1,1
                data >>= 1;
ee001e38:	0022d513          	srli	a0,t0,0x2
                if (x16 == 1)
ee001e3c:	001cd893          	srli	a7,s9,0x1
ee001e40:	000b8b63          	beqz	s7,ee001e56 <matrix_test+0xc24>
                   crc |= 0x8000;
ee001e44:	7769                	lui	a4,0xffffa
ee001e46:	00170313          	addi	t1,a4,1 # ffffa001 <STACK+0xffb8271>
ee001e4a:	0068c7b3          	xor	a5,a7,t1
ee001e4e:	01079e13          	slli	t3,a5,0x10
ee001e52:	010e5893          	srli	a7,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001e56:	01154833          	xor	a6,a0,a7
                if (x16 == 1)
ee001e5a:	00187613          	andi	a2,a6,1
                data >>= 1;
ee001e5e:	0032da13          	srli	s4,t0,0x3
                if (x16 == 1)
ee001e62:	0018dd93          	srli	s11,a7,0x1
ee001e66:	ca11                	beqz	a2,ee001e7a <matrix_test+0xc48>
                   crc |= 0x8000;
ee001e68:	7969                	lui	s2,0xffffa
ee001e6a:	00190393          	addi	t2,s2,1 # ffffa001 <STACK+0xffb8271>
ee001e6e:	007dcab3          	xor	s5,s11,t2
ee001e72:	010a9c13          	slli	s8,s5,0x10
ee001e76:	010c5d93          	srli	s11,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001e7a:	01ba4d33          	xor	s10,s4,s11
                if (x16 == 1)
ee001e7e:	001d7e93          	andi	t4,s10,1
                data >>= 1;
ee001e82:	0042dc93          	srli	s9,t0,0x4
                if (x16 == 1)
ee001e86:	001dd313          	srli	t1,s11,0x1
ee001e8a:	000e8b63          	beqz	t4,ee001ea0 <matrix_test+0xc6e>
                   crc |= 0x8000;
ee001e8e:	74e9                	lui	s1,0xffffa
ee001e90:	00148b93          	addi	s7,s1,1 # ffffa001 <STACK+0xffb8271>
ee001e94:	01734533          	xor	a0,t1,s7
ee001e98:	01051713          	slli	a4,a0,0x10
ee001e9c:	01075313          	srli	t1,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001ea0:	006cc7b3          	xor	a5,s9,t1
                if (x16 == 1)
ee001ea4:	0017fe13          	andi	t3,a5,1
                data >>= 1;
ee001ea8:	0052d893          	srli	a7,t0,0x5
                if (x16 == 1)
ee001eac:	00135393          	srli	t2,t1,0x1
ee001eb0:	000e0b63          	beqz	t3,ee001ec6 <matrix_test+0xc94>
                   crc |= 0x8000;
ee001eb4:	7869                	lui	a6,0xffffa
ee001eb6:	00180613          	addi	a2,a6,1 # ffffa001 <STACK+0xffb8271>
ee001eba:	00c3ca33          	xor	s4,t2,a2
ee001ebe:	010a1913          	slli	s2,s4,0x10
ee001ec2:	01095393          	srli	t2,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001ec6:	0078cab3          	xor	s5,a7,t2
                if (x16 == 1)
ee001eca:	001afc13          	andi	s8,s5,1
                data >>= 1;
ee001ece:	0062dd93          	srli	s11,t0,0x6
                if (x16 == 1)
ee001ed2:	0013db93          	srli	s7,t2,0x1
ee001ed6:	000c0b63          	beqz	s8,ee001eec <matrix_test+0xcba>
                   crc |= 0x8000;
ee001eda:	7d69                	lui	s10,0xffffa
ee001edc:	001d0e93          	addi	t4,s10,1 # ffffa001 <STACK+0xffb8271>
ee001ee0:	01dbccb3          	xor	s9,s7,t4
ee001ee4:	010c9493          	slli	s1,s9,0x10
ee001ee8:	0104db93          	srli	s7,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001eec:	017dc533          	xor	a0,s11,s7
                if (x16 == 1)
ee001ef0:	00157713          	andi	a4,a0,1
                data >>= 1;
ee001ef4:	0072d293          	srli	t0,t0,0x7
                if (x16 == 1)
ee001ef8:	001bd813          	srli	a6,s7,0x1
ee001efc:	cb11                	beqz	a4,ee001f10 <matrix_test+0xcde>
                   crc |= 0x8000;
ee001efe:	7369                	lui	t1,0xffffa
ee001f00:	00130e13          	addi	t3,t1,1 # ffffa001 <STACK+0xffb8271>
ee001f04:	01c847b3          	xor	a5,a6,t3
ee001f08:	01079893          	slli	a7,a5,0x10
ee001f0c:	0108d813          	srli	a6,a7,0x10
                if (x16 == 1)
ee001f10:	00187613          	andi	a2,a6,1
ee001f14:	00185c13          	srli	s8,a6,0x1
ee001f18:	00560b63          	beq	a2,t0,ee001f2e <matrix_test+0xcfc>
                   crc |= 0x8000;
ee001f1c:	7a69                	lui	s4,0xffffa
ee001f1e:	001a0913          	addi	s2,s4,1 # ffffa001 <STACK+0xffb8271>
ee001f22:	012c43b3          	xor	t2,s8,s2
ee001f26:	01039a93          	slli	s5,t2,0x10
ee001f2a:	010adc13          	srli	s8,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001f2e:	018fcdb3          	xor	s11,t6,s8
                if (x16 == 1)
ee001f32:	001dfd13          	andi	s10,s11,1
                data >>= 1;
ee001f36:	001fde93          	srli	t4,t6,0x1
                if (x16 == 1)
ee001f3a:	001c5713          	srli	a4,s8,0x1
ee001f3e:	000d0b63          	beqz	s10,ee001f54 <matrix_test+0xd22>
                   crc |= 0x8000;
ee001f42:	7ce9                	lui	s9,0xffffa
ee001f44:	001c8493          	addi	s1,s9,1 # ffffa001 <STACK+0xffb8271>
ee001f48:	00974bb3          	xor	s7,a4,s1
ee001f4c:	010b9513          	slli	a0,s7,0x10
ee001f50:	01055713          	srli	a4,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001f54:	00eec2b3          	xor	t0,t4,a4
                if (x16 == 1)
ee001f58:	0012f313          	andi	t1,t0,1
                data >>= 1;
ee001f5c:	002fde13          	srli	t3,t6,0x2
                if (x16 == 1)
ee001f60:	00175a13          	srli	s4,a4,0x1
ee001f64:	00030b63          	beqz	t1,ee001f7a <matrix_test+0xd48>
                   crc |= 0x8000;
ee001f68:	78e9                	lui	a7,0xffffa
ee001f6a:	00188813          	addi	a6,a7,1 # ffffa001 <STACK+0xffb8271>
ee001f6e:	010a47b3          	xor	a5,s4,a6
ee001f72:	01079613          	slli	a2,a5,0x10
ee001f76:	01065a13          	srli	s4,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001f7a:	014e4933          	xor	s2,t3,s4
                if (x16 == 1)
ee001f7e:	00197393          	andi	t2,s2,1
                data >>= 1;
ee001f82:	003fda93          	srli	s5,t6,0x3
                if (x16 == 1)
ee001f86:	001a5c93          	srli	s9,s4,0x1
ee001f8a:	00038b63          	beqz	t2,ee001fa0 <matrix_test+0xd6e>
                   crc |= 0x8000;
ee001f8e:	7c69                	lui	s8,0xffffa
ee001f90:	001c0d93          	addi	s11,s8,1 # ffffa001 <STACK+0xffb8271>
ee001f94:	01bccd33          	xor	s10,s9,s11
ee001f98:	010d1e93          	slli	t4,s10,0x10
ee001f9c:	010edc93          	srli	s9,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001fa0:	019ac4b3          	xor	s1,s5,s9
                if (x16 == 1)
ee001fa4:	0014fb93          	andi	s7,s1,1
                data >>= 1;
ee001fa8:	004fd713          	srli	a4,t6,0x4
                if (x16 == 1)
ee001fac:	001cd893          	srli	a7,s9,0x1
ee001fb0:	000b8b63          	beqz	s7,ee001fc6 <matrix_test+0xd94>
                   crc |= 0x8000;
ee001fb4:	7569                	lui	a0,0xffffa
ee001fb6:	00150293          	addi	t0,a0,1 # ffffa001 <STACK+0xffb8271>
ee001fba:	0058c333          	xor	t1,a7,t0
ee001fbe:	01031e13          	slli	t3,t1,0x10
ee001fc2:	010e5893          	srli	a7,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001fc6:	01174833          	xor	a6,a4,a7
                if (x16 == 1)
ee001fca:	00187613          	andi	a2,a6,1
                data >>= 1;
ee001fce:	005fda13          	srli	s4,t6,0x5
                if (x16 == 1)
ee001fd2:	0018dc13          	srli	s8,a7,0x1
ee001fd6:	ca11                	beqz	a2,ee001fea <matrix_test+0xdb8>
                   crc |= 0x8000;
ee001fd8:	7969                	lui	s2,0xffffa
ee001fda:	00190393          	addi	t2,s2,1 # ffffa001 <STACK+0xffb8271>
ee001fde:	007c47b3          	xor	a5,s8,t2
ee001fe2:	01079a93          	slli	s5,a5,0x10
ee001fe6:	010adc13          	srli	s8,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee001fea:	018a4db3          	xor	s11,s4,s8
                if (x16 == 1)
ee001fee:	001dfd13          	andi	s10,s11,1
                data >>= 1;
ee001ff2:	006fde93          	srli	t4,t6,0x6
                if (x16 == 1)
ee001ff6:	001c5513          	srli	a0,s8,0x1
ee001ffa:	000d0b63          	beqz	s10,ee002010 <matrix_test+0xdde>
                   crc |= 0x8000;
ee001ffe:	7ce9                	lui	s9,0xffffa
ee002000:	001c8493          	addi	s1,s9,1 # ffffa001 <STACK+0xffb8271>
ee002004:	00954bb3          	xor	s7,a0,s1
ee002008:	010b9713          	slli	a4,s7,0x10
ee00200c:	01075513          	srli	a0,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002010:	00aec2b3          	xor	t0,t4,a0
                if (x16 == 1)
ee002014:	0012f313          	andi	t1,t0,1
                data >>= 1;
ee002018:	007fdf93          	srli	t6,t6,0x7
                if (x16 == 1)
ee00201c:	00155a13          	srli	s4,a0,0x1
ee002020:	00030b63          	beqz	t1,ee002036 <matrix_test+0xe04>
                   crc |= 0x8000;
ee002024:	7e69                	lui	t3,0xffffa
ee002026:	001e0893          	addi	a7,t3,1 # ffffa001 <STACK+0xffb8271>
ee00202a:	011a4833          	xor	a6,s4,a7
ee00202e:	01081613          	slli	a2,a6,0x10
ee002032:	01065a13          	srli	s4,a2,0x10
                if (x16 == 1)
ee002036:	001a7913          	andi	s2,s4,1
ee00203a:	001a5e13          	srli	t3,s4,0x1
ee00203e:	01f90b63          	beq	s2,t6,ee002054 <matrix_test+0xe22>
                   crc |= 0x8000;
ee002042:	73e9                	lui	t2,0xffffa
ee002044:	00138793          	addi	a5,t2,1 # ffffa001 <STACK+0xffb8271>
ee002048:	00fe4ab3          	xor	s5,t3,a5
ee00204c:	010a9c13          	slli	s8,s5,0x10
ee002050:	010c5e13          	srli	t3,s8,0x10
        for (i=0; i<N; i++) {
ee002054:	4d01                	li	s10,0
ee002056:	4481                	li	s1,0
ee002058:	44040963          	beqz	s0,ee0024aa <matrix_test+0x1278>
ee00205c:	00141613          	slli	a2,s0,0x1
ee002060:	84da                	mv	s1,s6
ee002062:	016603b3          	add	t2,a2,s6
ee002066:	4c01                	li	s8,0
ee002068:	4781                	li	a5,0
ee00206a:	cc2e                	sw	a1,24(sp)
ee00206c:	8af2                	mv	s5,t3
ee00206e:	ce36                	sw	a3,28(sp)
ee002070:	ca7a                	sw	t5,20(sp)
                for (j=0; j<N; j++) {
ee002072:	45d2                	lw	a1,20(sp)
ee002074:	002c1f13          	slli	t5,s8,0x2
ee002078:	86ce                	mv	a3,s3
ee00207a:	00bf0a33          	add	s4,t5,a1
ee00207e:	4901                	li	s2,0
ee002080:	8be2                	mv	s7,s8
ee002082:	c83e                	sw	a5,16(sp)
                        for(k=0;k<N;k++)
ee002084:	40938db3          	sub	s11,t2,s1
ee002088:	ffed8d13          	addi	s10,s11,-2
ee00208c:	001d5e93          	srli	t4,s10,0x1
ee002090:	001e8c93          	addi	s9,t4,1
ee002094:	007cf513          	andi	a0,s9,7
                for (j=0; j<N; j++) {
ee002098:	8736                	mv	a4,a3
ee00209a:	85a6                	mv	a1,s1
ee00209c:	4781                	li	a5,0
ee00209e:	c54d                	beqz	a0,ee002148 <matrix_test+0xf16>
ee0020a0:	4285                	li	t0,1
ee0020a2:	08550863          	beq	a0,t0,ee002132 <matrix_test+0xf00>
ee0020a6:	4309                	li	t1,2
ee0020a8:	06650c63          	beq	a0,t1,ee002120 <matrix_test+0xeee>
ee0020ac:	4f8d                	li	t6,3
ee0020ae:	07f50063          	beq	a0,t6,ee00210e <matrix_test+0xedc>
ee0020b2:	4e11                	li	t3,4
ee0020b4:	05c50463          	beq	a0,t3,ee0020fc <matrix_test+0xeca>
ee0020b8:	4895                	li	a7,5
ee0020ba:	03150863          	beq	a0,a7,ee0020ea <matrix_test+0xeb8>
ee0020be:	4819                	li	a6,6
ee0020c0:	01050c63          	beq	a0,a6,ee0020d8 <matrix_test+0xea6>
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0020c4:	00049783          	lh	a5,0(s1)
ee0020c8:	00069c03          	lh	s8,0(a3)
                        for(k=0;k<N;k++)
ee0020cc:	00248593          	addi	a1,s1,2
ee0020d0:	00c68733          	add	a4,a3,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0020d4:	038787b3          	mul	a5,a5,s8
ee0020d8:	00059f03          	lh	t5,0(a1)
ee0020dc:	00071d83          	lh	s11,0(a4)
                        for(k=0;k<N;k++)
ee0020e0:	0589                	addi	a1,a1,2
ee0020e2:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0020e4:	03bf0d33          	mul	s10,t5,s11
ee0020e8:	97ea                	add	a5,a5,s10
ee0020ea:	00059e83          	lh	t4,0(a1)
ee0020ee:	00071c83          	lh	s9,0(a4)
                        for(k=0;k<N;k++)
ee0020f2:	0589                	addi	a1,a1,2
ee0020f4:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0020f6:	039e8533          	mul	a0,t4,s9
ee0020fa:	97aa                	add	a5,a5,a0
ee0020fc:	00059283          	lh	t0,0(a1)
ee002100:	00071303          	lh	t1,0(a4)
                        for(k=0;k<N;k++)
ee002104:	0589                	addi	a1,a1,2
ee002106:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee002108:	02628fb3          	mul	t6,t0,t1
ee00210c:	97fe                	add	a5,a5,t6
ee00210e:	00059e03          	lh	t3,0(a1)
ee002112:	00071883          	lh	a7,0(a4)
                        for(k=0;k<N;k++)
ee002116:	0589                	addi	a1,a1,2
ee002118:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00211a:	031e0833          	mul	a6,t3,a7
ee00211e:	97c2                	add	a5,a5,a6
ee002120:	00059c03          	lh	s8,0(a1)
ee002124:	00071f03          	lh	t5,0(a4)
                        for(k=0;k<N;k++)
ee002128:	0589                	addi	a1,a1,2
ee00212a:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00212c:	03ec0db3          	mul	s11,s8,t5
ee002130:	97ee                	add	a5,a5,s11
ee002132:	00059d03          	lh	s10,0(a1)
ee002136:	00071e83          	lh	t4,0(a4)
                        for(k=0;k<N;k++)
ee00213a:	0589                	addi	a1,a1,2
ee00213c:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00213e:	03dd0cb3          	mul	s9,s10,t4
ee002142:	97e6                	add	a5,a5,s9
                        for(k=0;k<N;k++)
ee002144:	0a758563          	beq	a1,t2,ee0021ee <matrix_test+0xfbc>
ee002148:	c636                	sw	a3,12(sp)
ee00214a:	00c706b3          	add	a3,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00214e:	00071e03          	lh	t3,0(a4)
ee002152:	00059503          	lh	a0,0(a1)
ee002156:	00069c03          	lh	s8,0(a3)
ee00215a:	00259f83          	lh	t6,2(a1)
ee00215e:	03c50533          	mul	a0,a0,t3
                        for(k=0;k<N;k++)
ee002162:	00c682b3          	add	t0,a3,a2
ee002166:	00c288b3          	add	a7,t0,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00216a:	00029d83          	lh	s11,0(t0)
ee00216e:	00459303          	lh	t1,4(a1)
                        for(k=0;k<N;k++)
ee002172:	00c88833          	add	a6,a7,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee002176:	00089f03          	lh	t5,0(a7)
ee00217a:	00659283          	lh	t0,6(a1)
ee00217e:	00859e83          	lh	t4,8(a1)
ee002182:	00081e03          	lh	t3,0(a6)
ee002186:	038f8fb3          	mul	t6,t6,s8
                        for(k=0;k<N;k++)
ee00218a:	00c80d33          	add	s10,a6,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00218e:	00a59683          	lh	a3,10(a1)
                        for(k=0;k<N;k++)
ee002192:	00cd0cb3          	add	s9,s10,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee002196:	000d1d03          	lh	s10,0(s10)
ee00219a:	00c59883          	lh	a7,12(a1)
                        for(k=0;k<N;k++)
ee00219e:	00cc8733          	add	a4,s9,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0021a2:	000c9c83          	lh	s9,0(s9)
ee0021a6:	00e59803          	lh	a6,14(a1)
ee0021aa:	00071c03          	lh	s8,0(a4)
ee0021ae:	03b30333          	mul	t1,t1,s11
ee0021b2:	97aa                	add	a5,a5,a0
ee0021b4:	01f78db3          	add	s11,a5,t6
                        for(k=0;k<N;k++)
ee0021b8:	05c1                	addi	a1,a1,16
ee0021ba:	9732                	add	a4,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0021bc:	03e282b3          	mul	t0,t0,t5
ee0021c0:	006d8533          	add	a0,s11,t1
ee0021c4:	03ce8f33          	mul	t5,t4,t3
ee0021c8:	00550eb3          	add	t4,a0,t0
ee0021cc:	03a68e33          	mul	t3,a3,s10
ee0021d0:	01ee86b3          	add	a3,t4,t5
ee0021d4:	03988d33          	mul	s10,a7,s9
ee0021d8:	01c688b3          	add	a7,a3,t3
ee0021dc:	03880fb3          	mul	t6,a6,s8
ee0021e0:	01a88cb3          	add	s9,a7,s10
ee0021e4:	01fc87b3          	add	a5,s9,t6
                        for(k=0;k<N;k++)
ee0021e8:	f67591e3          	bne	a1,t2,ee00214a <matrix_test+0xf18>
ee0021ec:	46b2                	lw	a3,12(sp)
ee0021ee:	00fa2023          	sw	a5,0(s4)
                for (j=0; j<N; j++) {
ee0021f2:	00190713          	addi	a4,s2,1
ee0021f6:	0a11                	addi	s4,s4,4
ee0021f8:	0689                	addi	a3,a3,2
ee0021fa:	22e40863          	beq	s0,a4,ee00242a <matrix_test+0x11f8>
ee0021fe:	893a                	mv	s2,a4
ee002200:	b551                	j	ee002084 <matrix_test+0xe52>
                                ret += (cur>prev) ? 1 : 0;
ee002202:	01b2a2b3          	slt	t0,t0,s11
                        cur=C[i*N+j];
ee002206:	00472383          	lw	t2,4(a4)
                                ret += (cur>prev) ? 1 : 0;
ee00220a:	005f8cb3          	add	s9,t6,t0
ee00220e:	010c9493          	slli	s1,s9,0x10
ee002212:	4104da13          	srai	s4,s1,0x10
                                ret+=10;
ee002216:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
ee00221a:	00790eb3          	add	t4,s2,t2
                for (j=0; j<N; j++) {
ee00221e:	0711                	addi	a4,a4,4
                                ret+=10;
ee002220:	0107da93          	srli	s5,a5,0x10
                        if (tmp>clipval) {
ee002224:	11d5de63          	bge	a1,t4,ee002340 <matrix_test+0x110e>
                        cur=C[i*N+j];
ee002228:	00472b83          	lw	s7,4(a4)
                                ret+=10;
ee00222c:	00aa8c93          	addi	s9,s5,10
ee002230:	010c9493          	slli	s1,s9,0x10
ee002234:	4104d293          	srai	t0,s1,0x10
                                tmp=0;
ee002238:	4e81                	li	t4,0
                                ret+=10;
ee00223a:	01029513          	slli	a0,t0,0x10
                        tmp+=cur;
ee00223e:	017e8933          	add	s2,t4,s7
                                ret+=10;
ee002242:	01055a13          	srli	s4,a0,0x10
                        if (tmp>clipval) {
ee002246:	1125df63          	bge	a1,s2,ee002364 <matrix_test+0x1132>
                        cur=C[i*N+j];
ee00224a:	00872283          	lw	t0,8(a4)
                                ret+=10;
ee00224e:	00aa0d93          	addi	s11,s4,10
ee002252:	010d9d13          	slli	s10,s11,0x10
ee002256:	410d5e93          	srai	t4,s10,0x10
                                tmp=0;
ee00225a:	4901                	li	s2,0
                                ret+=10;
ee00225c:	010e9f93          	slli	t6,t4,0x10
                        tmp+=cur;
ee002260:	005904b3          	add	s1,s2,t0
                                ret+=10;
ee002264:	010fdc93          	srli	s9,t6,0x10
                        if (tmp>clipval) {
ee002268:	1295d063          	bge	a1,s1,ee002388 <matrix_test+0x1156>
                        cur=C[i*N+j];
ee00226c:	00c72a83          	lw	s5,12(a4)
                                ret+=10;
ee002270:	00ac8393          	addi	t2,s9,10
ee002274:	01039793          	slli	a5,t2,0x10
ee002278:	4107d913          	srai	s2,a5,0x10
                                tmp=0;
ee00227c:	4481                	li	s1,0
                                ret+=10;
ee00227e:	01091e93          	slli	t4,s2,0x10
                        tmp+=cur;
ee002282:	01548d33          	add	s10,s1,s5
                                ret+=10;
ee002286:	010edd93          	srli	s11,t4,0x10
                        if (tmp>clipval) {
ee00228a:	13a5d163          	bge	a1,s10,ee0023ac <matrix_test+0x117a>
                        cur=C[i*N+j];
ee00228e:	01072a03          	lw	s4,16(a4)
                                ret+=10;
ee002292:	00ad8b93          	addi	s7,s11,10
ee002296:	010b9513          	slli	a0,s7,0x10
ee00229a:	41055493          	srai	s1,a0,0x10
                                tmp=0;
ee00229e:	4d01                	li	s10,0
                                ret+=10;
ee0022a0:	01049913          	slli	s2,s1,0x10
                        tmp+=cur;
ee0022a4:	014d0eb3          	add	t4,s10,s4
                                ret+=10;
ee0022a8:	01095393          	srli	t2,s2,0x10
                        if (tmp>clipval) {
ee0022ac:	13d5d263          	bge	a1,t4,ee0023d0 <matrix_test+0x119e>
                        cur=C[i*N+j];
ee0022b0:	01472c83          	lw	s9,20(a4)
                                ret+=10;
ee0022b4:	00a38293          	addi	t0,t2,10
ee0022b8:	01029f93          	slli	t6,t0,0x10
ee0022bc:	410fdd13          	srai	s10,t6,0x10
                                tmp=0;
ee0022c0:	4e81                	li	t4,0
                                ret+=10;
ee0022c2:	010d1493          	slli	s1,s10,0x10
                        tmp+=cur;
ee0022c6:	019e8533          	add	a0,t4,s9
                                ret+=10;
ee0022ca:	0104db93          	srli	s7,s1,0x10
                        if (tmp>clipval) {
ee0022ce:	12a5d363          	bge	a1,a0,ee0023f4 <matrix_test+0x11c2>
                        cur=C[i*N+j];
ee0022d2:	01872283          	lw	t0,24(a4)
                                ret+=10;
ee0022d6:	00ab8793          	addi	a5,s7,10
ee0022da:	01079a93          	slli	s5,a5,0x10
ee0022de:	410ade93          	srai	t4,s5,0x10
                                tmp=0;
ee0022e2:	4501                	li	a0,0
                                ret+=10;
ee0022e4:	010e9d93          	slli	s11,t4,0x10
                        tmp+=cur;
ee0022e8:	00550eb3          	add	t4,a0,t0
                                ret+=10;
ee0022ec:	010ddd13          	srli	s10,s11,0x10
                        if (tmp>clipval) {
ee0022f0:	13d5d463          	bge	a1,t4,ee002418 <matrix_test+0x11e6>
                                ret+=10;
ee0022f4:	00ad0b93          	addi	s7,s10,10
ee0022f8:	010b9513          	slli	a0,s7,0x10
ee0022fc:	41055793          	srai	a5,a0,0x10
                                tmp=0;
ee002300:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee002302:	0771                	addi	a4,a4,28
ee002304:	aee806e3          	beq	a6,a4,ee001df0 <matrix_test+0xbbe>
                        cur=C[i*N+j];
ee002308:	00072d83          	lw	s11,0(a4)
                                ret+=10;
ee00230c:	01079d13          	slli	s10,a5,0x10
ee002310:	010d5f93          	srli	t6,s10,0x10
                        tmp+=cur;
ee002314:	01be8933          	add	s2,t4,s11
                        if (tmp>clipval) {
ee002318:	ef25d5e3          	bge	a1,s2,ee002202 <matrix_test+0xfd0>
                        cur=C[i*N+j];
ee00231c:	00472383          	lw	t2,4(a4)
                                ret+=10;
ee002320:	00af8b93          	addi	s7,t6,10
ee002324:	010b9513          	slli	a0,s7,0x10
ee002328:	41055a13          	srai	s4,a0,0x10
                                tmp=0;
ee00232c:	4901                	li	s2,0
                                ret+=10;
ee00232e:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
ee002332:	00790eb3          	add	t4,s2,t2
                for (j=0; j<N; j++) {
ee002336:	0711                	addi	a4,a4,4
                                ret+=10;
ee002338:	0107da93          	srli	s5,a5,0x10
                        if (tmp>clipval) {
ee00233c:	efd5c6e3          	blt	a1,t4,ee002228 <matrix_test+0xff6>
                                ret += (cur>prev) ? 1 : 0;
ee002340:	007dadb3          	slt	s11,s11,t2
                        cur=C[i*N+j];
ee002344:	00472b83          	lw	s7,4(a4)
                                ret += (cur>prev) ? 1 : 0;
ee002348:	01ba8d33          	add	s10,s5,s11
ee00234c:	010d1f93          	slli	t6,s10,0x10
ee002350:	410fd293          	srai	t0,t6,0x10
                                ret+=10;
ee002354:	01029513          	slli	a0,t0,0x10
                        tmp+=cur;
ee002358:	017e8933          	add	s2,t4,s7
                                ret+=10;
ee00235c:	01055a13          	srli	s4,a0,0x10
                        if (tmp>clipval) {
ee002360:	ef25c5e3          	blt	a1,s2,ee00224a <matrix_test+0x1018>
                                ret += (cur>prev) ? 1 : 0;
ee002364:	0173a3b3          	slt	t2,t2,s7
                        cur=C[i*N+j];
ee002368:	00872283          	lw	t0,8(a4)
                                ret += (cur>prev) ? 1 : 0;
ee00236c:	007a07b3          	add	a5,s4,t2
ee002370:	01079a93          	slli	s5,a5,0x10
ee002374:	410ade93          	srai	t4,s5,0x10
                                ret+=10;
ee002378:	010e9f93          	slli	t6,t4,0x10
                        tmp+=cur;
ee00237c:	005904b3          	add	s1,s2,t0
                                ret+=10;
ee002380:	010fdc93          	srli	s9,t6,0x10
                        if (tmp>clipval) {
ee002384:	ee95c4e3          	blt	a1,s1,ee00226c <matrix_test+0x103a>
                                ret += (cur>prev) ? 1 : 0;
ee002388:	005babb3          	slt	s7,s7,t0
                        cur=C[i*N+j];
ee00238c:	00c72a83          	lw	s5,12(a4)
                                ret += (cur>prev) ? 1 : 0;
ee002390:	017c8533          	add	a0,s9,s7
ee002394:	01051a13          	slli	s4,a0,0x10
ee002398:	410a5913          	srai	s2,s4,0x10
                                ret+=10;
ee00239c:	01091e93          	slli	t4,s2,0x10
                        tmp+=cur;
ee0023a0:	01548d33          	add	s10,s1,s5
                                ret+=10;
ee0023a4:	010edd93          	srli	s11,t4,0x10
                        if (tmp>clipval) {
ee0023a8:	efa5c3e3          	blt	a1,s10,ee00228e <matrix_test+0x105c>
                                ret += (cur>prev) ? 1 : 0;
ee0023ac:	0152a2b3          	slt	t0,t0,s5
                        cur=C[i*N+j];
ee0023b0:	01072a03          	lw	s4,16(a4)
                                ret += (cur>prev) ? 1 : 0;
ee0023b4:	005d8fb3          	add	t6,s11,t0
ee0023b8:	010f9c93          	slli	s9,t6,0x10
ee0023bc:	410cd493          	srai	s1,s9,0x10
                                ret+=10;
ee0023c0:	01049913          	slli	s2,s1,0x10
                        tmp+=cur;
ee0023c4:	014d0eb3          	add	t4,s10,s4
                                ret+=10;
ee0023c8:	01095393          	srli	t2,s2,0x10
                        if (tmp>clipval) {
ee0023cc:	efd5c2e3          	blt	a1,t4,ee0022b0 <matrix_test+0x107e>
                                ret += (cur>prev) ? 1 : 0;
ee0023d0:	014aa7b3          	slt	a5,s5,s4
                        cur=C[i*N+j];
ee0023d4:	01472c83          	lw	s9,20(a4)
                                ret += (cur>prev) ? 1 : 0;
ee0023d8:	00f38ab3          	add	s5,t2,a5
ee0023dc:	010a9d93          	slli	s11,s5,0x10
ee0023e0:	410ddd13          	srai	s10,s11,0x10
                                ret+=10;
ee0023e4:	010d1493          	slli	s1,s10,0x10
                        tmp+=cur;
ee0023e8:	019e8533          	add	a0,t4,s9
                                ret+=10;
ee0023ec:	0104db93          	srli	s7,s1,0x10
                        if (tmp>clipval) {
ee0023f0:	eea5c1e3          	blt	a1,a0,ee0022d2 <matrix_test+0x10a0>
                                ret += (cur>prev) ? 1 : 0;
ee0023f4:	019a2a33          	slt	s4,s4,s9
                        cur=C[i*N+j];
ee0023f8:	01872283          	lw	t0,24(a4)
                                ret += (cur>prev) ? 1 : 0;
ee0023fc:	014b8933          	add	s2,s7,s4
ee002400:	01091393          	slli	t2,s2,0x10
ee002404:	4103de93          	srai	t4,t2,0x10
                                ret+=10;
ee002408:	010e9d93          	slli	s11,t4,0x10
                        tmp+=cur;
ee00240c:	00550eb3          	add	t4,a0,t0
                                ret+=10;
ee002410:	010ddd13          	srli	s10,s11,0x10
                        if (tmp>clipval) {
ee002414:	efd5c0e3          	blt	a1,t4,ee0022f4 <matrix_test+0x10c2>
                                ret += (cur>prev) ? 1 : 0;
ee002418:	005cafb3          	slt	t6,s9,t0
ee00241c:	01fd0cb3          	add	s9,s10,t6
ee002420:	010c9493          	slli	s1,s9,0x10
ee002424:	4104d793          	srai	a5,s1,0x10
ee002428:	bde9                	j	ee002302 <matrix_test+0x10d0>
        for (i=0; i<N; i++) {
ee00242a:	4a42                	lw	s4,16(sp)
ee00242c:	94b2                	add	s1,s1,a2
ee00242e:	008b8c33          	add	s8,s7,s0
ee002432:	001a0813          	addi	a6,s4,1
ee002436:	00c583b3          	add	t2,a1,a2
ee00243a:	032a05e3          	beq	s4,s2,ee002c64 <matrix_test+0x1a32>
ee00243e:	87c2                	mv	a5,a6
ee002440:	b90d                	j	ee002072 <matrix_test+0xe40>
                                ret += (cur>prev) ? 1 : 0;
ee002442:	005ba933          	slt	s2,s7,t0
ee002446:	012a03b3          	add	t2,s4,s2
ee00244a:	01039793          	slli	a5,t2,0x10
ee00244e:	87c1                	srai	a5,a5,0x10
ee002450:	ba69                	j	ee001dea <matrix_test+0xbb8>
ee002452:	0053adb3          	slt	s11,t2,t0
ee002456:	01ba8d33          	add	s10,s5,s11
ee00245a:	010d1f93          	slli	t6,s10,0x10
ee00245e:	410fd793          	srai	a5,t6,0x10
ee002462:	b295                	j	ee001dc6 <matrix_test+0xb94>
ee002464:	005fabb3          	slt	s7,t6,t0
ee002468:	01748533          	add	a0,s1,s7
ee00246c:	01051a13          	slli	s4,a0,0x10
ee002470:	410a5793          	srai	a5,s4,0x10
ee002474:	ba05                	j	ee001da4 <matrix_test+0xb72>
ee002476:	005527b3          	slt	a5,a0,t0
ee00247a:	00f903b3          	add	t2,s2,a5
ee00247e:	01039a93          	slli	s5,t2,0x10
ee002482:	410ad793          	srai	a5,s5,0x10
ee002486:	b8ed                	j	ee001d80 <matrix_test+0xb4e>
ee002488:	005aafb3          	slt	t6,s5,t0
ee00248c:	01fd0cb3          	add	s9,s10,t6
ee002490:	010c9493          	slli	s1,s9,0x10
ee002494:	4104d793          	srai	a5,s1,0x10
ee002498:	b0d1                	j	ee001d5c <matrix_test+0xb2a>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee00249a:	01079813          	slli	a6,a5,0x10
ee00249e:	01085513          	srli	a0,a6,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee0024a2:	0ff7f493          	zext.b	s1,a5
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee0024a6:	00855d13          	srli	s10,a0,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0024aa:	01c4cbb3          	xor	s7,s1,t3
                if (x16 == 1)
ee0024ae:	001bf293          	andi	t0,s7,1
                data >>= 1;
ee0024b2:	0014dd93          	srli	s11,s1,0x1
                if (x16 == 1)
ee0024b6:	001e5a13          	srli	s4,t3,0x1
ee0024ba:	00028b63          	beqz	t0,ee0024d0 <matrix_test+0x129e>
                   crc |= 0x8000;
ee0024be:	7ee9                	lui	t4,0xffffa
ee0024c0:	001e8c93          	addi	s9,t4,1 # ffffa001 <STACK+0xffb8271>
ee0024c4:	019a4fb3          	xor	t6,s4,s9
ee0024c8:	010f9a93          	slli	s5,t6,0x10
ee0024cc:	010ada13          	srli	s4,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0024d0:	014dcc33          	xor	s8,s11,s4
                if (x16 == 1)
ee0024d4:	001c7713          	andi	a4,s8,1
                data >>= 1;
ee0024d8:	0024d313          	srli	t1,s1,0x2
                if (x16 == 1)
ee0024dc:	001a5513          	srli	a0,s4,0x1
ee0024e0:	cb11                	beqz	a4,ee0024f4 <matrix_test+0x12c2>
                   crc |= 0x8000;
ee0024e2:	78e9                	lui	a7,0xffffa
ee0024e4:	00188913          	addi	s2,a7,1 # ffffa001 <STACK+0xffb8271>
ee0024e8:	01254e33          	xor	t3,a0,s2
ee0024ec:	010e1393          	slli	t2,t3,0x10
ee0024f0:	0103d513          	srli	a0,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0024f4:	00a34833          	xor	a6,t1,a0
                if (x16 == 1)
ee0024f8:	00187793          	andi	a5,a6,1
                data >>= 1;
ee0024fc:	0034db93          	srli	s7,s1,0x3
                if (x16 == 1)
ee002500:	00155c93          	srli	s9,a0,0x1
ee002504:	cb91                	beqz	a5,ee002518 <matrix_test+0x12e6>
                   crc |= 0x8000;
ee002506:	7669                	lui	a2,0xffffa
ee002508:	00160293          	addi	t0,a2,1 # ffffa001 <STACK+0xffb8271>
ee00250c:	005ccdb3          	xor	s11,s9,t0
ee002510:	010d9e93          	slli	t4,s11,0x10
ee002514:	010edc93          	srli	s9,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002518:	019bcfb3          	xor	t6,s7,s9
                if (x16 == 1)
ee00251c:	001ffa93          	andi	s5,t6,1
                data >>= 1;
ee002520:	0044da13          	srli	s4,s1,0x4
                if (x16 == 1)
ee002524:	001cd913          	srli	s2,s9,0x1
ee002528:	000a8b63          	beqz	s5,ee00253e <matrix_test+0x130c>
                   crc |= 0x8000;
ee00252c:	7c69                	lui	s8,0xffffa
ee00252e:	001c0713          	addi	a4,s8,1 # ffffa001 <STACK+0xffb8271>
ee002532:	00e94333          	xor	t1,s2,a4
ee002536:	01031893          	slli	a7,t1,0x10
ee00253a:	0108d913          	srli	s2,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00253e:	012a4e33          	xor	t3,s4,s2
                if (x16 == 1)
ee002542:	001e7393          	andi	t2,t3,1
                data >>= 1;
ee002546:	0054d813          	srli	a6,s1,0x5
                if (x16 == 1)
ee00254a:	00195293          	srli	t0,s2,0x1
ee00254e:	00038b63          	beqz	t2,ee002564 <matrix_test+0x1332>
                   crc |= 0x8000;
ee002552:	77e9                	lui	a5,0xffffa
ee002554:	00178b93          	addi	s7,a5,1 # ffffa001 <STACK+0xffb8271>
ee002558:	0172c533          	xor	a0,t0,s7
ee00255c:	01051613          	slli	a2,a0,0x10
ee002560:	01065293          	srli	t0,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002564:	00584db3          	xor	s11,a6,t0
                if (x16 == 1)
ee002568:	001dfe93          	andi	t4,s11,1
                data >>= 1;
ee00256c:	0064dc93          	srli	s9,s1,0x6
                if (x16 == 1)
ee002570:	0012d313          	srli	t1,t0,0x1
ee002574:	000e8b63          	beqz	t4,ee00258a <matrix_test+0x1358>
                   crc |= 0x8000;
ee002578:	7fe9                	lui	t6,0xffffa
ee00257a:	001f8a93          	addi	s5,t6,1 # ffffa001 <STACK+0xffb8271>
ee00257e:	01534a33          	xor	s4,t1,s5
ee002582:	010a1c13          	slli	s8,s4,0x10
ee002586:	010c5313          	srli	t1,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00258a:	006cc733          	xor	a4,s9,t1
                if (x16 == 1)
ee00258e:	00177893          	andi	a7,a4,1
                data >>= 1;
ee002592:	809d                	srli	s1,s1,0x7
                if (x16 == 1)
ee002594:	00135793          	srli	a5,t1,0x1
ee002598:	00088b63          	beqz	a7,ee0025ae <matrix_test+0x137c>
                   crc |= 0x8000;
ee00259c:	7969                	lui	s2,0xffffa
ee00259e:	00190e13          	addi	t3,s2,1 # ffffa001 <STACK+0xffb8271>
ee0025a2:	01c7c3b3          	xor	t2,a5,t3
ee0025a6:	01039813          	slli	a6,t2,0x10
ee0025aa:	01085793          	srli	a5,a6,0x10
                if (x16 == 1)
ee0025ae:	0017fb93          	andi	s7,a5,1
ee0025b2:	0017de93          	srli	t4,a5,0x1
ee0025b6:	009b8b63          	beq	s7,s1,ee0025cc <matrix_test+0x139a>
                   crc |= 0x8000;
ee0025ba:	7669                	lui	a2,0xffffa
ee0025bc:	00160293          	addi	t0,a2,1 # ffffa001 <STACK+0xffb8271>
ee0025c0:	005ec533          	xor	a0,t4,t0
ee0025c4:	01051d93          	slli	s11,a0,0x10
ee0025c8:	010dde93          	srli	t4,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0025cc:	01dd4cb3          	xor	s9,s10,t4
                if (x16 == 1)
ee0025d0:	001cff93          	andi	t6,s9,1
                data >>= 1;
ee0025d4:	001d5a93          	srli	s5,s10,0x1
                if (x16 == 1)
ee0025d8:	001ed893          	srli	a7,t4,0x1
ee0025dc:	000f8b63          	beqz	t6,ee0025f2 <matrix_test+0x13c0>
                   crc |= 0x8000;
ee0025e0:	7a69                	lui	s4,0xffffa
ee0025e2:	001a0c13          	addi	s8,s4,1 # ffffa001 <STACK+0xffb8271>
ee0025e6:	0188c333          	xor	t1,a7,s8
ee0025ea:	01031713          	slli	a4,t1,0x10
ee0025ee:	01075893          	srli	a7,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0025f2:	011ac4b3          	xor	s1,s5,a7
                if (x16 == 1)
ee0025f6:	0014f913          	andi	s2,s1,1
                data >>= 1;
ee0025fa:	002d5e13          	srli	t3,s10,0x2
                if (x16 == 1)
ee0025fe:	0018d293          	srli	t0,a7,0x1
ee002602:	00090b63          	beqz	s2,ee002618 <matrix_test+0x13e6>
                   crc |= 0x8000;
ee002606:	73e9                	lui	t2,0xffffa
ee002608:	00138813          	addi	a6,t2,1 # ffffa001 <STACK+0xffb8271>
ee00260c:	0102c7b3          	xor	a5,t0,a6
ee002610:	01079b93          	slli	s7,a5,0x10
ee002614:	010bd293          	srli	t0,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002618:	005e4633          	xor	a2,t3,t0
                if (x16 == 1)
ee00261c:	00167d93          	andi	s11,a2,1
                data >>= 1;
ee002620:	003d5e93          	srli	t4,s10,0x3
                if (x16 == 1)
ee002624:	0012da13          	srli	s4,t0,0x1
ee002628:	000d8b63          	beqz	s11,ee00263e <matrix_test+0x140c>
                   crc |= 0x8000;
ee00262c:	7ce9                	lui	s9,0xffffa
ee00262e:	001c8f93          	addi	t6,s9,1 # ffffa001 <STACK+0xffb8271>
ee002632:	01fa4533          	xor	a0,s4,t6
ee002636:	01051a93          	slli	s5,a0,0x10
ee00263a:	010ada13          	srli	s4,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00263e:	014ecc33          	xor	s8,t4,s4
                if (x16 == 1)
ee002642:	001c7313          	andi	t1,s8,1
                data >>= 1;
ee002646:	004d5713          	srli	a4,s10,0x4
                if (x16 == 1)
ee00264a:	001a5393          	srli	t2,s4,0x1
ee00264e:	00030b63          	beqz	t1,ee002664 <matrix_test+0x1432>
                   crc |= 0x8000;
ee002652:	78e9                	lui	a7,0xffffa
ee002654:	00188493          	addi	s1,a7,1 # ffffa001 <STACK+0xffb8271>
ee002658:	0093c933          	xor	s2,t2,s1
ee00265c:	01091e13          	slli	t3,s2,0x10
ee002660:	010e5393          	srli	t2,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002664:	00774833          	xor	a6,a4,t2
                if (x16 == 1)
ee002668:	00187793          	andi	a5,a6,1
                data >>= 1;
ee00266c:	005d5b93          	srli	s7,s10,0x5
                if (x16 == 1)
ee002670:	0013dc93          	srli	s9,t2,0x1
ee002674:	cb91                	beqz	a5,ee002688 <matrix_test+0x1456>
                   crc |= 0x8000;
ee002676:	72e9                	lui	t0,0xffffa
ee002678:	00128613          	addi	a2,t0,1 # ffffa001 <STACK+0xffb8271>
ee00267c:	00cccdb3          	xor	s11,s9,a2
ee002680:	010d9e93          	slli	t4,s11,0x10
ee002684:	010edc93          	srli	s9,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002688:	019bcfb3          	xor	t6,s7,s9
                if (x16 == 1)
ee00268c:	001ffa93          	andi	s5,t6,1
                data >>= 1;
ee002690:	006d5a13          	srli	s4,s10,0x6
                if (x16 == 1)
ee002694:	001cd893          	srli	a7,s9,0x1
ee002698:	000a8b63          	beqz	s5,ee0026ae <matrix_test+0x147c>
                   crc |= 0x8000;
ee00269c:	7c69                	lui	s8,0xffffa
ee00269e:	001c0313          	addi	t1,s8,1 # ffffa001 <STACK+0xffb8271>
ee0026a2:	0068c533          	xor	a0,a7,t1
ee0026a6:	01051713          	slli	a4,a0,0x10
ee0026aa:	01075893          	srli	a7,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0026ae:	011a44b3          	xor	s1,s4,a7
                if (x16 == 1)
ee0026b2:	0014f913          	andi	s2,s1,1
                data >>= 1;
ee0026b6:	007d5d13          	srli	s10,s10,0x7
                if (x16 == 1)
ee0026ba:	0018db93          	srli	s7,a7,0x1
ee0026be:	00090b63          	beqz	s2,ee0026d4 <matrix_test+0x14a2>
                   crc |= 0x8000;
ee0026c2:	7e69                	lui	t3,0xffffa
ee0026c4:	001e0393          	addi	t2,t3,1 # ffffa001 <STACK+0xffb8271>
ee0026c8:	007bc833          	xor	a6,s7,t2
ee0026cc:	01081793          	slli	a5,a6,0x10
ee0026d0:	0107db93          	srli	s7,a5,0x10
                if (x16 == 1)
ee0026d4:	001bf293          	andi	t0,s7,1
ee0026d8:	001bd513          	srli	a0,s7,0x1
ee0026dc:	01a28b63          	beq	t0,s10,ee0026f2 <matrix_test+0x14c0>
                   crc |= 0x8000;
ee0026e0:	7669                	lui	a2,0xffffa
ee0026e2:	00160d93          	addi	s11,a2,1 # ffffa001 <STACK+0xffb8271>
ee0026e6:	01b54eb3          	xor	t4,a0,s11
ee0026ea:	010e9c93          	slli	s9,t4,0x10
ee0026ee:	010cd513          	srli	a0,s9,0x10
        for (i=0; i<N; i++) {
ee0026f2:	4c01                	li	s8,0
ee0026f4:	4601                	li	a2,0
ee0026f6:	18040c63          	beqz	s0,ee00288e <matrix_test+0x165c>
ee0026fa:	00141313          	slli	t1,s0,0x1
ee0026fe:	82da                	mv	t0,s6
ee002700:	006b0e33          	add	t3,s6,t1
ee002704:	4481                	li	s1,0
ee002706:	4901                	li	s2,0
                for (j=0; j<N; j++) {
ee002708:	00249f93          	slli	t6,s1,0x2
ee00270c:	01ef8a33          	add	s4,t6,t5
ee002710:	8dce                	mv	s11,s3
ee002712:	4381                	li	t2,0
                        for(k=0;k<N;k++)
ee002714:	405e0ab3          	sub	s5,t3,t0
ee002718:	ffea8c13          	addi	s8,s5,-2
ee00271c:	001c5713          	srli	a4,s8,0x1
ee002720:	00170893          	addi	a7,a4,1
ee002724:	0038fd13          	andi	s10,a7,3
                for (j=0; j<N; j++) {
ee002728:	8eee                	mv	t4,s11
ee00272a:	8816                	mv	a6,t0
ee00272c:	4b81                	li	s7,0
ee00272e:	080d0463          	beqz	s10,ee0027b6 <matrix_test+0x1584>
ee002732:	4785                	li	a5,1
ee002734:	04fd0c63          	beq	s10,a5,ee00278c <matrix_test+0x155a>
ee002738:	4609                	li	a2,2
ee00273a:	02cd0663          	beq	s10,a2,ee002766 <matrix_test+0x1534>
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00273e:	00029b83          	lh	s7,0(t0)
ee002742:	000d9c83          	lh	s9,0(s11)
                        for(k=0;k<N;k++)
ee002746:	00228813          	addi	a6,t0,2
ee00274a:	006d8eb3          	add	t4,s11,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00274e:	039b8fb3          	mul	t6,s7,s9
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee002752:	402fda93          	srai	s5,t6,0x2
ee002756:	405fdc13          	srai	s8,t6,0x5
ee00275a:	00faf713          	andi	a4,s5,15
ee00275e:	07fc7893          	andi	a7,s8,127
ee002762:	03170bb3          	mul	s7,a4,a7
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee002766:	00081d03          	lh	s10,0(a6)
ee00276a:	000e9783          	lh	a5,0(t4)
                        for(k=0;k<N;k++)
ee00276e:	0809                	addi	a6,a6,2
ee002770:	9e9a                	add	t4,t4,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee002772:	02fd0633          	mul	a2,s10,a5
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee002776:	40265c93          	srai	s9,a2,0x2
ee00277a:	40565f93          	srai	t6,a2,0x5
ee00277e:	00fcfa93          	andi	s5,s9,15
ee002782:	07fffc13          	andi	s8,t6,127
ee002786:	038a8733          	mul	a4,s5,s8
ee00278a:	9bba                	add	s7,s7,a4
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00278c:	00081883          	lh	a7,0(a6)
ee002790:	000e9d03          	lh	s10,0(t4)
                        for(k=0;k<N;k++)
ee002794:	0809                	addi	a6,a6,2
ee002796:	9e9a                	add	t4,t4,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee002798:	03a887b3          	mul	a5,a7,s10
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee00279c:	4027d613          	srai	a2,a5,0x2
ee0027a0:	4057dc93          	srai	s9,a5,0x5
ee0027a4:	00f67f93          	andi	t6,a2,15
ee0027a8:	07fcfa93          	andi	s5,s9,127
ee0027ac:	035f8c33          	mul	s8,t6,s5
ee0027b0:	9be2                	add	s7,s7,s8
                        for(k=0;k<N;k++)
ee0027b2:	0bc80263          	beq	a6,t3,ee002856 <matrix_test+0x1624>
ee0027b6:	006e88b3          	add	a7,t4,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0027ba:	000e9d03          	lh	s10,0(t4)
ee0027be:	00081703          	lh	a4,0(a6)
                        for(k=0;k<N;k++)
ee0027c2:	006887b3          	add	a5,a7,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0027c6:	00089f83          	lh	t6,0(a7)
ee0027ca:	00281603          	lh	a2,2(a6)
ee0027ce:	00079a83          	lh	s5,0(a5)
                        for(k=0;k<N;k++)
ee0027d2:	00678eb3          	add	t4,a5,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0027d6:	00481883          	lh	a7,4(a6)
ee0027da:	03a70733          	mul	a4,a4,s10
ee0027de:	000e9c83          	lh	s9,0(t4)
ee0027e2:	00681783          	lh	a5,6(a6)
                        for(k=0;k<N;k++)
ee0027e6:	0821                	addi	a6,a6,8
ee0027e8:	9e9a                	add	t4,t4,t1
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0027ea:	03f60633          	mul	a2,a2,t6
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee0027ee:	40275c13          	srai	s8,a4,0x2
ee0027f2:	40575d13          	srai	s10,a4,0x5
ee0027f6:	07fd7713          	andi	a4,s10,127
ee0027fa:	00fc7f93          	andi	t6,s8,15
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0027fe:	035888b3          	mul	a7,a7,s5
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee002802:	40265a93          	srai	s5,a2,0x2
ee002806:	8615                	srai	a2,a2,0x5
ee002808:	00fafd13          	andi	s10,s5,15
ee00280c:	07f67a93          	andi	s5,a2,127
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee002810:	039787b3          	mul	a5,a5,s9
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee002814:	4058dc13          	srai	s8,a7,0x5
ee002818:	4028dc93          	srai	s9,a7,0x2
ee00281c:	00fcfc93          	andi	s9,s9,15
ee002820:	07fc7893          	andi	a7,s8,127
ee002824:	02ef8fb3          	mul	t6,t6,a4
ee002828:	4057d613          	srai	a2,a5,0x5
ee00282c:	4027d713          	srai	a4,a5,0x2
ee002830:	00f77c13          	andi	s8,a4,15
ee002834:	07f67713          	andi	a4,a2,127
ee002838:	035d0d33          	mul	s10,s10,s5
ee00283c:	9bfe                	add	s7,s7,t6
ee00283e:	031c8ab3          	mul	s5,s9,a7
ee002842:	01ab87b3          	add	a5,s7,s10
ee002846:	02ec0cb3          	mul	s9,s8,a4
ee00284a:	015788b3          	add	a7,a5,s5
ee00284e:	01988bb3          	add	s7,a7,s9
                        for(k=0;k<N;k++)
ee002852:	f7c812e3          	bne	a6,t3,ee0027b6 <matrix_test+0x1584>
ee002856:	017a2023          	sw	s7,0(s4)
                for (j=0; j<N; j++) {
ee00285a:	00138e93          	addi	t4,t2,1
ee00285e:	0a11                	addi	s4,s4,4
ee002860:	0d89                	addi	s11,s11,2
ee002862:	01d40463          	beq	s0,t4,ee00286a <matrix_test+0x1638>
ee002866:	83f6                	mv	t2,t4
ee002868:	b575                	j	ee002714 <matrix_test+0x14e2>
        for (i=0; i<N; i++) {
ee00286a:	00190a13          	addi	s4,s2,1
ee00286e:	929a                	add	t0,t0,t1
ee002870:	94a2                	add	s1,s1,s0
ee002872:	00680e33          	add	t3,a6,t1
ee002876:	7e790b63          	beq	s2,t2,ee00306c <matrix_test+0x1e3a>
ee00287a:	8952                	mv	s2,s4
ee00287c:	b571                	j	ee002708 <matrix_test+0x14d6>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee00287e:	01079813          	slli	a6,a5,0x10
ee002882:	01085913          	srli	s2,a6,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee002886:	0ff7f613          	zext.b	a2,a5
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee00288a:	00895c13          	srli	s8,s2,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00288e:	00a64d33          	xor	s10,a2,a0
                if (x16 == 1)
ee002892:	001d7b93          	andi	s7,s10,1
                data >>= 1;
ee002896:	00165f93          	srli	t6,a2,0x1
                if (x16 == 1)
ee00289a:	00155293          	srli	t0,a0,0x1
ee00289e:	000b8b63          	beqz	s7,ee0028b4 <matrix_test+0x1682>
                   crc |= 0x8000;
ee0028a2:	7ae9                	lui	s5,0xffffa
ee0028a4:	001a8c93          	addi	s9,s5,1 # ffffa001 <STACK+0xffb8271>
ee0028a8:	0192ceb3          	xor	t4,t0,s9
ee0028ac:	010e9a13          	slli	s4,t4,0x10
ee0028b0:	010a5293          	srli	t0,s4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0028b4:	005fc4b3          	xor	s1,t6,t0
                if (x16 == 1)
ee0028b8:	0014fe13          	andi	t3,s1,1
                data >>= 1;
ee0028bc:	00265393          	srli	t2,a2,0x2
                if (x16 == 1)
ee0028c0:	0012dd93          	srli	s11,t0,0x1
ee0028c4:	000e0b63          	beqz	t3,ee0028da <matrix_test+0x16a8>
                   crc |= 0x8000;
ee0028c8:	7569                	lui	a0,0xffffa
ee0028ca:	00150593          	addi	a1,a0,1 # ffffa001 <STACK+0xffb8271>
ee0028ce:	00bdc7b3          	xor	a5,s11,a1
ee0028d2:	01079893          	slli	a7,a5,0x10
ee0028d6:	0108dd93          	srli	s11,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0028da:	01b3c733          	xor	a4,t2,s11
                if (x16 == 1)
ee0028de:	00177813          	andi	a6,a4,1
                data >>= 1;
ee0028e2:	00365913          	srli	s2,a2,0x3
                if (x16 == 1)
ee0028e6:	001ddb93          	srli	s7,s11,0x1
ee0028ea:	00080b63          	beqz	a6,ee002900 <matrix_test+0x16ce>
                   crc |= 0x8000;
ee0028ee:	7369                	lui	t1,0xffffa
ee0028f0:	00130993          	addi	s3,t1,1 # ffffa001 <STACK+0xffb8271>
ee0028f4:	013bcf33          	xor	t5,s7,s3
ee0028f8:	010f1d13          	slli	s10,t5,0x10
ee0028fc:	010d5b93          	srli	s7,s10,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002900:	01794fb3          	xor	t6,s2,s7
                if (x16 == 1)
ee002904:	001ffa93          	andi	s5,t6,1
                data >>= 1;
ee002908:	00465c93          	srli	s9,a2,0x4
                if (x16 == 1)
ee00290c:	001bde13          	srli	t3,s7,0x1
ee002910:	000a8b63          	beqz	s5,ee002926 <matrix_test+0x16f4>
                   crc |= 0x8000;
ee002914:	7ee9                	lui	t4,0xffffa
ee002916:	001e8a13          	addi	s4,t4,1 # ffffa001 <STACK+0xffb8271>
ee00291a:	014e42b3          	xor	t0,t3,s4
ee00291e:	01029493          	slli	s1,t0,0x10
ee002922:	0104de13          	srli	t3,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002926:	01ccc3b3          	xor	t2,s9,t3
                if (x16 == 1)
ee00292a:	0013f593          	andi	a1,t2,1
                data >>= 1;
ee00292e:	00565513          	srli	a0,a2,0x5
                if (x16 == 1)
ee002932:	001e5813          	srli	a6,t3,0x1
ee002936:	c991                	beqz	a1,ee00294a <matrix_test+0x1718>
                   crc |= 0x8000;
ee002938:	78e9                	lui	a7,0xffffa
ee00293a:	00188d93          	addi	s11,a7,1 # ffffa001 <STACK+0xffb8271>
ee00293e:	01b847b3          	xor	a5,a6,s11
ee002942:	01079713          	slli	a4,a5,0x10
ee002946:	01075813          	srli	a6,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00294a:	01054933          	xor	s2,a0,a6
                if (x16 == 1)
ee00294e:	00197313          	andi	t1,s2,1
                data >>= 1;
ee002952:	00665993          	srli	s3,a2,0x6
                if (x16 == 1)
ee002956:	00185a93          	srli	s5,a6,0x1
ee00295a:	00030b63          	beqz	t1,ee002970 <matrix_test+0x173e>
                   crc |= 0x8000;
ee00295e:	7f69                	lui	t5,0xffffa
ee002960:	001f0d13          	addi	s10,t5,1 # ffffa001 <STACK+0xffb8271>
ee002964:	01aacbb3          	xor	s7,s5,s10
ee002968:	010b9f93          	slli	t6,s7,0x10
ee00296c:	010fda93          	srli	s5,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002970:	0159ccb3          	xor	s9,s3,s5
                if (x16 == 1)
ee002974:	001cfe93          	andi	t4,s9,1
                data >>= 1;
ee002978:	821d                	srli	a2,a2,0x7
                if (x16 == 1)
ee00297a:	001ad393          	srli	t2,s5,0x1
ee00297e:	000e8b63          	beqz	t4,ee002994 <matrix_test+0x1762>
                   crc |= 0x8000;
ee002982:	7a69                	lui	s4,0xffffa
ee002984:	001a0293          	addi	t0,s4,1 # ffffa001 <STACK+0xffb8271>
ee002988:	0053c4b3          	xor	s1,t2,t0
ee00298c:	01049e13          	slli	t3,s1,0x10
ee002990:	010e5393          	srli	t2,t3,0x10
                if (x16 == 1)
ee002994:	0013f593          	andi	a1,t2,1
ee002998:	0013d713          	srli	a4,t2,0x1
ee00299c:	00c58b63          	beq	a1,a2,ee0029b2 <matrix_test+0x1780>
                   crc |= 0x8000;
ee0029a0:	7569                	lui	a0,0xffffa
ee0029a2:	00150893          	addi	a7,a0,1 # ffffa001 <STACK+0xffb8271>
ee0029a6:	01174db3          	xor	s11,a4,a7
ee0029aa:	010d9793          	slli	a5,s11,0x10
ee0029ae:	0107d713          	srli	a4,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0029b2:	00ec4833          	xor	a6,s8,a4
                if (x16 == 1)
ee0029b6:	00187913          	andi	s2,a6,1
                data >>= 1;
ee0029ba:	001c5313          	srli	t1,s8,0x1
                if (x16 == 1)
ee0029be:	00175f93          	srli	t6,a4,0x1
ee0029c2:	00090b63          	beqz	s2,ee0029d8 <matrix_test+0x17a6>
                   crc |= 0x8000;
ee0029c6:	79e9                	lui	s3,0xffffa
ee0029c8:	00198f13          	addi	t5,s3,1 # ffffa001 <STACK+0xffb8271>
ee0029cc:	01efcd33          	xor	s10,t6,t5
ee0029d0:	010d1b93          	slli	s7,s10,0x10
ee0029d4:	010bdf93          	srli	t6,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0029d8:	01f34ab3          	xor	s5,t1,t6
                if (x16 == 1)
ee0029dc:	001afc93          	andi	s9,s5,1
                data >>= 1;
ee0029e0:	002c5e93          	srli	t4,s8,0x2
                if (x16 == 1)
ee0029e4:	001fde13          	srli	t3,t6,0x1
ee0029e8:	000c8b63          	beqz	s9,ee0029fe <matrix_test+0x17cc>
                   crc |= 0x8000;
ee0029ec:	7669                	lui	a2,0xffffa
ee0029ee:	00160a13          	addi	s4,a2,1 # ffffa001 <STACK+0xffb8271>
ee0029f2:	014e42b3          	xor	t0,t3,s4
ee0029f6:	01029493          	slli	s1,t0,0x10
ee0029fa:	0104de13          	srli	t3,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0029fe:	01cec3b3          	xor	t2,t4,t3
                if (x16 == 1)
ee002a02:	0013f513          	andi	a0,t2,1
                data >>= 1;
ee002a06:	003c5593          	srli	a1,s8,0x3
                if (x16 == 1)
ee002a0a:	001e5813          	srli	a6,t3,0x1
ee002a0e:	c911                	beqz	a0,ee002a22 <matrix_test+0x17f0>
                   crc |= 0x8000;
ee002a10:	78e9                	lui	a7,0xffffa
ee002a12:	00188d93          	addi	s11,a7,1 # ffffa001 <STACK+0xffb8271>
ee002a16:	01b847b3          	xor	a5,a6,s11
ee002a1a:	01079713          	slli	a4,a5,0x10
ee002a1e:	01075813          	srli	a6,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002a22:	0105c933          	xor	s2,a1,a6
                if (x16 == 1)
ee002a26:	00197313          	andi	t1,s2,1
                data >>= 1;
ee002a2a:	004c5993          	srli	s3,s8,0x4
                if (x16 == 1)
ee002a2e:	00185a93          	srli	s5,a6,0x1
ee002a32:	00030b63          	beqz	t1,ee002a48 <matrix_test+0x1816>
                   crc |= 0x8000;
ee002a36:	7f69                	lui	t5,0xffffa
ee002a38:	001f0d13          	addi	s10,t5,1 # ffffa001 <STACK+0xffb8271>
ee002a3c:	01aacbb3          	xor	s7,s5,s10
ee002a40:	010b9f93          	slli	t6,s7,0x10
ee002a44:	010fda93          	srli	s5,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002a48:	0159ccb3          	xor	s9,s3,s5
                if (x16 == 1)
ee002a4c:	001cfe93          	andi	t4,s9,1
                data >>= 1;
ee002a50:	005c5a13          	srli	s4,s8,0x5
                if (x16 == 1)
ee002a54:	001ad393          	srli	t2,s5,0x1
ee002a58:	000e8b63          	beqz	t4,ee002a6e <matrix_test+0x183c>
                   crc |= 0x8000;
ee002a5c:	7669                	lui	a2,0xffffa
ee002a5e:	00160293          	addi	t0,a2,1 # ffffa001 <STACK+0xffb8271>
ee002a62:	0053c4b3          	xor	s1,t2,t0
ee002a66:	01049e13          	slli	t3,s1,0x10
ee002a6a:	010e5393          	srli	t2,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002a6e:	007a4533          	xor	a0,s4,t2
                if (x16 == 1)
ee002a72:	00157593          	andi	a1,a0,1
                data >>= 1;
ee002a76:	006c5893          	srli	a7,s8,0x6
                if (x16 == 1)
ee002a7a:	0013d913          	srli	s2,t2,0x1
ee002a7e:	c991                	beqz	a1,ee002a92 <matrix_test+0x1860>
                   crc |= 0x8000;
ee002a80:	7de9                	lui	s11,0xffffa
ee002a82:	001d8713          	addi	a4,s11,1 # ffffa001 <STACK+0xffb8271>
ee002a86:	00e947b3          	xor	a5,s2,a4
ee002a8a:	01079813          	slli	a6,a5,0x10
ee002a8e:	01085913          	srli	s2,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee002a92:	0128c333          	xor	t1,a7,s2
                if (x16 == 1)
ee002a96:	00137993          	andi	s3,t1,1
                data >>= 1;
ee002a9a:	007c5c13          	srli	s8,s8,0x7
                if (x16 == 1)
ee002a9e:	00195a93          	srli	s5,s2,0x1
ee002aa2:	00098b63          	beqz	s3,ee002ab8 <matrix_test+0x1886>
                   crc |= 0x8000;
ee002aa6:	7f69                	lui	t5,0xffffa
ee002aa8:	001f0d13          	addi	s10,t5,1 # ffffa001 <STACK+0xffb8271>
ee002aac:	01aacbb3          	xor	s7,s5,s10
ee002ab0:	010b9f93          	slli	t6,s7,0x10
ee002ab4:	010fda93          	srli	s5,t6,0x10
                if (x16 == 1)
ee002ab8:	001afc93          	andi	s9,s5,1
ee002abc:	001ad513          	srli	a0,s5,0x1
ee002ac0:	018c8b63          	beq	s9,s8,ee002ad6 <matrix_test+0x18a4>
                   crc |= 0x8000;
ee002ac4:	7ee9                	lui	t4,0xffffa
ee002ac6:	001e8a13          	addi	s4,t4,1 # ffffa001 <STACK+0xffb8271>
ee002aca:	01454633          	xor	a2,a0,s4
ee002ace:	01061293          	slli	t0,a2,0x10
ee002ad2:	0102d513          	srli	a0,t0,0x10
        for (i=0; i<N; i++) {
ee002ad6:	12040763          	beqz	s0,ee002c04 <matrix_test+0x19d2>
ee002ada:	00141293          	slli	t0,s0,0x1
ee002ade:	408004b3          	neg	s1,s0
ee002ae2:	005b0633          	add	a2,s6,t0
ee002ae6:	4f81                	li	t6,0
ee002ae8:	00249393          	slli	t2,s1,0x2
                for (j=0; j<N; j++) {
ee002aec:	40560b33          	sub	s6,a2,t0
ee002af0:	41660e33          	sub	t3,a2,s6
ee002af4:	ffee0593          	addi	a1,t3,-2
ee002af8:	0015d893          	srli	a7,a1,0x1
ee002afc:	00188d93          	addi	s11,a7,1
ee002b00:	007df713          	andi	a4,s11,7
        for (i=0; i<N; i++) {
ee002b04:	87da                	mv	a5,s6
ee002b06:	c759                	beqz	a4,ee002b94 <matrix_test+0x1962>
ee002b08:	4805                	li	a6,1
ee002b0a:	07070c63          	beq	a4,a6,ee002b82 <matrix_test+0x1950>
ee002b0e:	4909                	li	s2,2
ee002b10:	07270263          	beq	a4,s2,ee002b74 <matrix_test+0x1942>
ee002b14:	430d                	li	t1,3
ee002b16:	04670863          	beq	a4,t1,ee002b66 <matrix_test+0x1934>
ee002b1a:	4991                	li	s3,4
ee002b1c:	03370e63          	beq	a4,s3,ee002b58 <matrix_test+0x1926>
ee002b20:	4c15                	li	s8,5
ee002b22:	03870463          	beq	a4,s8,ee002b4a <matrix_test+0x1918>
ee002b26:	4f19                	li	t5,6
ee002b28:	01e70a63          	beq	a4,t5,ee002b3c <matrix_test+0x190a>
                        A[i*N+j] += val;
ee002b2c:	000b5d03          	lhu	s10,0(s6)
                for (j=0; j<N; j++) {
ee002b30:	002b0793          	addi	a5,s6,2
                        A[i*N+j] += val;
ee002b34:	40dd0bb3          	sub	s7,s10,a3
ee002b38:	017b1023          	sh	s7,0(s6)
ee002b3c:	0007da83          	lhu	s5,0(a5)
                for (j=0; j<N; j++) {
ee002b40:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee002b42:	40da8cb3          	sub	s9,s5,a3
ee002b46:	ff979f23          	sh	s9,-2(a5)
ee002b4a:	0007de83          	lhu	t4,0(a5)
                for (j=0; j<N; j++) {
ee002b4e:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee002b50:	40de8a33          	sub	s4,t4,a3
ee002b54:	ff479f23          	sh	s4,-2(a5)
ee002b58:	0007d483          	lhu	s1,0(a5)
                for (j=0; j<N; j++) {
ee002b5c:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee002b5e:	40d48e33          	sub	t3,s1,a3
ee002b62:	ffc79f23          	sh	t3,-2(a5)
ee002b66:	0007d583          	lhu	a1,0(a5)
                for (j=0; j<N; j++) {
ee002b6a:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee002b6c:	40d588b3          	sub	a7,a1,a3
ee002b70:	ff179f23          	sh	a7,-2(a5)
ee002b74:	0007dd83          	lhu	s11,0(a5)
                for (j=0; j<N; j++) {
ee002b78:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee002b7a:	40dd8733          	sub	a4,s11,a3
ee002b7e:	fee79f23          	sh	a4,-2(a5)
ee002b82:	0007d803          	lhu	a6,0(a5)
                for (j=0; j<N; j++) {
ee002b86:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee002b88:	40d80933          	sub	s2,a6,a3
ee002b8c:	ff279f23          	sh	s2,-2(a5)
                for (j=0; j<N; j++) {
ee002b90:	06c78563          	beq	a5,a2,ee002bfa <matrix_test+0x19c8>
                        A[i*N+j] += val;
ee002b94:	0007d983          	lhu	s3,0(a5)
ee002b98:	0027dc03          	lhu	s8,2(a5)
ee002b9c:	0047dd03          	lhu	s10,4(a5)
ee002ba0:	0067db83          	lhu	s7,6(a5)
ee002ba4:	0087d303          	lhu	t1,8(a5)
ee002ba8:	00a7da83          	lhu	s5,10(a5)
ee002bac:	00c7dc83          	lhu	s9,12(a5)
ee002bb0:	00e7da03          	lhu	s4,14(a5)
ee002bb4:	40d984b3          	sub	s1,s3,a3
ee002bb8:	40dc0f33          	sub	t5,s8,a3
ee002bbc:	40dd0eb3          	sub	t4,s10,a3
ee002bc0:	40db8e33          	sub	t3,s7,a3
ee002bc4:	40d305b3          	sub	a1,t1,a3
ee002bc8:	40da88b3          	sub	a7,s5,a3
ee002bcc:	40dc8db3          	sub	s11,s9,a3
ee002bd0:	40da0733          	sub	a4,s4,a3
ee002bd4:	00979023          	sh	s1,0(a5)
ee002bd8:	01e79123          	sh	t5,2(a5)
ee002bdc:	01d79223          	sh	t4,4(a5)
ee002be0:	01c79323          	sh	t3,6(a5)
ee002be4:	00b79423          	sh	a1,8(a5)
ee002be8:	01179523          	sh	a7,10(a5)
ee002bec:	01b79623          	sh	s11,12(a5)
ee002bf0:	00e79723          	sh	a4,14(a5)
                for (j=0; j<N; j++) {
ee002bf4:	07c1                	addi	a5,a5,16
ee002bf6:	f8c79fe3          	bne	a5,a2,ee002b94 <matrix_test+0x1962>
        for (i=0; i<N; i++) {
ee002bfa:	0f85                	addi	t6,t6,1
ee002bfc:	407b0633          	sub	a2,s6,t2
ee002c00:	eff416e3          	bne	s0,t6,ee002aec <matrix_test+0x18ba>
}
ee002c04:	4436                	lw	s0,76(sp)
ee002c06:	01051b13          	slli	s6,a0,0x10
ee002c0a:	44a6                	lw	s1,72(sp)
ee002c0c:	4916                	lw	s2,68(sp)
ee002c0e:	4986                	lw	s3,64(sp)
ee002c10:	5a72                	lw	s4,60(sp)
ee002c12:	5ae2                	lw	s5,56(sp)
ee002c14:	5bc2                	lw	s7,48(sp)
ee002c16:	5c32                	lw	s8,44(sp)
ee002c18:	5ca2                	lw	s9,40(sp)
ee002c1a:	5d12                	lw	s10,36(sp)
ee002c1c:	5d82                	lw	s11,32(sp)
ee002c1e:	410b5513          	srai	a0,s6,0x10
ee002c22:	5b52                	lw	s6,52(sp)
ee002c24:	6161                	addi	sp,sp,80
ee002c26:	8082                	ret
                                ret += (cur>prev) ? 1 : 0;
ee002c28:	005ca533          	slt	a0,s9,t0
ee002c2c:	00ab8a33          	add	s4,s7,a0
ee002c30:	010a1913          	slli	s2,s4,0x10
ee002c34:	41095793          	srai	a5,s2,0x10
ee002c38:	900ff06f          	j	ee001d38 <matrix_test+0xb06>
ee002c3c:	00572ab3          	slt	s5,a4,t0
ee002c40:	01538db3          	add	s11,t2,s5
ee002c44:	010d9d13          	slli	s10,s11,0x10
ee002c48:	410d5793          	srai	a5,s10,0x10
ee002c4c:	8c6ff06f          	j	ee001d12 <matrix_test+0xae0>
ee002c50:	00552cb3          	slt	s9,a0,t0
ee002c54:	019f8c33          	add	s8,t6,s9
ee002c58:	010c1d13          	slli	s10,s8,0x10
ee002c5c:	410d5793          	srai	a5,s10,0x10
ee002c60:	8f3fe06f          	j	ee001552 <matrix_test+0x320>
ee002c64:	4f52                	lw	t5,20(sp)
ee002c66:	45e2                	lw	a1,24(sp)
ee002c68:	46f2                	lw	a3,28(sp)
ee002c6a:	40800db3          	neg	s11,s0
ee002c6e:	00241613          	slli	a2,s0,0x2
ee002c72:	8e56                	mv	t3,s5
ee002c74:	967a                	add	a2,a2,t5
ee002c76:	002d9313          	slli	t1,s11,0x2
        ee_s16 ret=0;
ee002c7a:	4781                	li	a5,0
        MATRES tmp=0,prev=0,cur=0;
ee002c7c:	4281                	li	t0,0
ee002c7e:	4e81                	li	t4,0
        for (i=0; i<N; i++) {
ee002c80:	4801                	li	a6,0
ee002c82:	003d9893          	slli	a7,s11,0x3
                for (j=0; j<N; j++) {
ee002c86:	00660533          	add	a0,a2,t1
ee002c8a:	40a60d33          	sub	s10,a2,a0
ee002c8e:	ffcd0f93          	addi	t6,s10,-4
ee002c92:	002fdc93          	srli	s9,t6,0x2
ee002c96:	001c8713          	addi	a4,s9,1
ee002c9a:	00777b93          	andi	s7,a4,7
        for (i=0; i<N; i++) {
ee002c9e:	872a                	mv	a4,a0
ee002ca0:	220b8b63          	beqz	s7,ee002ed6 <matrix_test+0x1ca4>
ee002ca4:	4a05                	li	s4,1
ee002ca6:	0f4b8d63          	beq	s7,s4,ee002da0 <matrix_test+0x1b6e>
ee002caa:	4a89                	li	s5,2
ee002cac:	0d5b8863          	beq	s7,s5,ee002d7c <matrix_test+0x1b4a>
ee002cb0:	448d                	li	s1,3
ee002cb2:	0a9b8363          	beq	s7,s1,ee002d58 <matrix_test+0x1b26>
ee002cb6:	4c11                	li	s8,4
ee002cb8:	078b8e63          	beq	s7,s8,ee002d34 <matrix_test+0x1b02>
ee002cbc:	4395                	li	t2,5
ee002cbe:	047b8963          	beq	s7,t2,ee002d10 <matrix_test+0x1ade>
ee002cc2:	4d99                	li	s11,6
ee002cc4:	03bb8463          	beq	s7,s11,ee002cec <matrix_test+0x1aba>
                        cur=C[i*N+j];
ee002cc8:	8d16                	mv	s10,t0
ee002cca:	00052283          	lw	t0,0(a0)
                                ret+=10;
ee002cce:	07c2                	slli	a5,a5,0x10
ee002cd0:	0107df93          	srli	t6,a5,0x10
                        tmp+=cur;
ee002cd4:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee002cd6:	39d5d263          	bge	a1,t4,ee00305a <matrix_test+0x1e28>
                                ret+=10;
ee002cda:	00af8e93          	addi	t4,t6,10
ee002cde:	010e9a13          	slli	s4,t4,0x10
ee002ce2:	410a5793          	srai	a5,s4,0x10
                                tmp=0;
ee002ce6:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee002ce8:	00450713          	addi	a4,a0,4
                        cur=C[i*N+j];
ee002cec:	8a96                	mv	s5,t0
ee002cee:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee002cf2:	01079493          	slli	s1,a5,0x10
ee002cf6:	0104dc13          	srli	s8,s1,0x10
                        tmp+=cur;
ee002cfa:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee002cfc:	35d5d663          	bge	a1,t4,ee003048 <matrix_test+0x1e16>
                                ret+=10;
ee002d00:	00ac0793          	addi	a5,s8,10
ee002d04:	01079f93          	slli	t6,a5,0x10
ee002d08:	410fd793          	srai	a5,t6,0x10
                                tmp=0;
ee002d0c:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee002d0e:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
ee002d10:	8c96                	mv	s9,t0
ee002d12:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee002d16:	01079b93          	slli	s7,a5,0x10
ee002d1a:	010bda13          	srli	s4,s7,0x10
                        tmp+=cur;
ee002d1e:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee002d20:	31d5db63          	bge	a1,t4,ee003036 <matrix_test+0x1e04>
                                ret+=10;
ee002d24:	00aa0e93          	addi	t4,s4,10
ee002d28:	010e9393          	slli	t2,t4,0x10
ee002d2c:	4103d793          	srai	a5,t2,0x10
                                tmp=0;
ee002d30:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee002d32:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
ee002d34:	8d96                	mv	s11,t0
ee002d36:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee002d3a:	01079d13          	slli	s10,a5,0x10
ee002d3e:	010d5793          	srli	a5,s10,0x10
                        tmp+=cur;
ee002d42:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee002d44:	2fd5d063          	bge	a1,t4,ee003024 <matrix_test+0x1df2>
                                ret+=10;
ee002d48:	00a78a13          	addi	s4,a5,10
ee002d4c:	010a1a93          	slli	s5,s4,0x10
ee002d50:	410ad793          	srai	a5,s5,0x10
                                tmp=0;
ee002d54:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee002d56:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
ee002d58:	8496                	mv	s1,t0
ee002d5a:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee002d5e:	01079c13          	slli	s8,a5,0x10
ee002d62:	010c5393          	srli	t2,s8,0x10
                        tmp+=cur;
ee002d66:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee002d68:	2bd5d663          	bge	a1,t4,ee003014 <matrix_test+0x1de2>
                                ret+=10;
ee002d6c:	00a38e93          	addi	t4,t2,10
ee002d70:	010e9f93          	slli	t6,t4,0x10
ee002d74:	410fd793          	srai	a5,t6,0x10
                                tmp=0;
ee002d78:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee002d7a:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
ee002d7c:	8c96                	mv	s9,t0
ee002d7e:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee002d82:	01079b93          	slli	s7,a5,0x10
ee002d86:	010bda13          	srli	s4,s7,0x10
                        tmp+=cur;
ee002d8a:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee002d8c:	27d5db63          	bge	a1,t4,ee003002 <matrix_test+0x1dd0>
                                ret+=10;
ee002d90:	00aa0393          	addi	t2,s4,10
ee002d94:	01039d93          	slli	s11,t2,0x10
ee002d98:	410dd793          	srai	a5,s11,0x10
                                tmp=0;
ee002d9c:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee002d9e:	0711                	addi	a4,a4,4
                        cur=C[i*N+j];
ee002da0:	8d16                	mv	s10,t0
ee002da2:	00072283          	lw	t0,0(a4)
                                ret+=10;
ee002da6:	07c2                	slli	a5,a5,0x10
ee002da8:	0107dc93          	srli	s9,a5,0x10
                        tmp+=cur;
ee002dac:	9e96                	add	t4,t4,t0
                        if (tmp>clipval) {
ee002dae:	25d5d163          	bge	a1,t4,ee002ff0 <matrix_test+0x1dbe>
                                ret+=10;
ee002db2:	00ac8e93          	addi	t4,s9,10
ee002db6:	010e9a93          	slli	s5,t4,0x10
ee002dba:	410ad793          	srai	a5,s5,0x10
                                tmp=0;
ee002dbe:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee002dc0:	0711                	addi	a4,a4,4
ee002dc2:	10e61a63          	bne	a2,a4,ee002ed6 <matrix_test+0x1ca4>
        for (i=0; i<N; i++) {
ee002dc6:	00180393          	addi	t2,a6,1
ee002dca:	41150633          	sub	a2,a0,a7
ee002dce:	ed090663          	beq	s2,a6,ee00249a <matrix_test+0x1268>
ee002dd2:	881e                	mv	a6,t2
ee002dd4:	bd4d                	j	ee002c86 <matrix_test+0x1a54>
                                ret += (cur>prev) ? 1 : 0;
ee002dd6:	0092a2b3          	slt	t0,t0,s1
                        cur=C[i*N+j];
ee002dda:	00472a03          	lw	s4,4(a4)
                                ret += (cur>prev) ? 1 : 0;
ee002dde:	00538db3          	add	s11,t2,t0
ee002de2:	010d9d13          	slli	s10,s11,0x10
ee002de6:	410d5f93          	srai	t6,s10,0x10
                                ret+=10;
ee002dea:	010f9e93          	slli	t4,t6,0x10
                        tmp+=cur;
ee002dee:	014b8c33          	add	s8,s7,s4
                for (j=0; j<N; j++) {
ee002df2:	0711                	addi	a4,a4,4
                                ret+=10;
ee002df4:	010eda93          	srli	s5,t4,0x10
                        if (tmp>clipval) {
ee002df8:	1185da63          	bge	a1,s8,ee002f0c <matrix_test+0x1cda>
                        cur=C[i*N+j];
ee002dfc:	00472c83          	lw	s9,4(a4)
                                ret+=10;
ee002e00:	00aa8d13          	addi	s10,s5,10
ee002e04:	010d1793          	slli	a5,s10,0x10
ee002e08:	4107dd93          	srai	s11,a5,0x10
                                tmp=0;
ee002e0c:	4c01                	li	s8,0
                                ret+=10;
ee002e0e:	010d9f93          	slli	t6,s11,0x10
                        tmp+=cur;
ee002e12:	019c0eb3          	add	t4,s8,s9
                                ret+=10;
ee002e16:	010fdb93          	srli	s7,t6,0x10
                        if (tmp>clipval) {
ee002e1a:	11d5db63          	bge	a1,t4,ee002f30 <matrix_test+0x1cfe>
                                ret+=10;
ee002e1e:	00ab8393          	addi	t2,s7,10
                        cur=C[i*N+j];
ee002e22:	00872d83          	lw	s11,8(a4)
                                ret+=10;
ee002e26:	01039293          	slli	t0,t2,0x10
ee002e2a:	4102d493          	srai	s1,t0,0x10
                                tmp=0;
ee002e2e:	4e81                	li	t4,0
                                ret+=10;
ee002e30:	01049d13          	slli	s10,s1,0x10
                        tmp+=cur;
ee002e34:	01be8bb3          	add	s7,t4,s11
                                ret+=10;
ee002e38:	010d5793          	srli	a5,s10,0x10
                        if (tmp>clipval) {
ee002e3c:	1175dc63          	bge	a1,s7,ee002f54 <matrix_test+0x1d22>
                        cur=C[i*N+j];
ee002e40:	4744                	lw	s1,12(a4)
                                ret+=10;
ee002e42:	00a78a93          	addi	s5,a5,10
ee002e46:	010a9c13          	slli	s8,s5,0x10
ee002e4a:	410c5a13          	srai	s4,s8,0x10
                                tmp=0;
ee002e4e:	4b81                	li	s7,0
                                ret+=10;
ee002e50:	010a1393          	slli	t2,s4,0x10
                        tmp+=cur;
ee002e54:	9ba6                	add	s7,s7,s1
                                ret+=10;
ee002e56:	0103dd13          	srli	s10,t2,0x10
                        if (tmp>clipval) {
ee002e5a:	1175dd63          	bge	a1,s7,ee002f74 <matrix_test+0x1d42>
                        cur=C[i*N+j];
ee002e5e:	01072a03          	lw	s4,16(a4)
                                ret+=10;
ee002e62:	00ad0f93          	addi	t6,s10,10
ee002e66:	010f9e93          	slli	t4,t6,0x10
ee002e6a:	410edc93          	srai	s9,t4,0x10
                                tmp=0;
ee002e6e:	4b81                	li	s7,0
                                ret+=10;
ee002e70:	010c9a93          	slli	s5,s9,0x10
                        tmp+=cur;
ee002e74:	014b83b3          	add	t2,s7,s4
                                ret+=10;
ee002e78:	010adc13          	srli	s8,s5,0x10
                        if (tmp>clipval) {
ee002e7c:	1075de63          	bge	a1,t2,ee002f98 <matrix_test+0x1d66>
                        cur=C[i*N+j];
ee002e80:	01472c83          	lw	s9,20(a4)
                                ret+=10;
ee002e84:	00ac0d93          	addi	s11,s8,10
ee002e88:	010d9793          	slli	a5,s11,0x10
ee002e8c:	4107d293          	srai	t0,a5,0x10
                                tmp=0;
ee002e90:	4381                	li	t2,0
                                ret+=10;
ee002e92:	01029f93          	slli	t6,t0,0x10
                        tmp+=cur;
ee002e96:	01938eb3          	add	t4,t2,s9
                                ret+=10;
ee002e9a:	010fda93          	srli	s5,t6,0x10
                        if (tmp>clipval) {
ee002e9e:	11d5df63          	bge	a1,t4,ee002fbc <matrix_test+0x1d8a>
                        cur=C[i*N+j];
ee002ea2:	01872283          	lw	t0,24(a4)
                                ret+=10;
ee002ea6:	00aa8d13          	addi	s10,s5,10
ee002eaa:	010d1b93          	slli	s7,s10,0x10
ee002eae:	410bd493          	srai	s1,s7,0x10
                                tmp=0;
ee002eb2:	4e81                	li	t4,0
                                ret+=10;
ee002eb4:	01049d93          	slli	s11,s1,0x10
                        tmp+=cur;
ee002eb8:	9e96                	add	t4,t4,t0
                                ret+=10;
ee002eba:	010dd793          	srli	a5,s11,0x10
                        if (tmp>clipval) {
ee002ebe:	13d5d063          	bge	a1,t4,ee002fde <matrix_test+0x1dac>
                                ret+=10;
ee002ec2:	00a78a13          	addi	s4,a5,10
ee002ec6:	010a1c13          	slli	s8,s4,0x10
ee002eca:	410c5793          	srai	a5,s8,0x10
                                tmp=0;
ee002ece:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee002ed0:	0771                	addi	a4,a4,28
ee002ed2:	eee60ae3          	beq	a2,a4,ee002dc6 <matrix_test+0x1b94>
                        cur=C[i*N+j];
ee002ed6:	4304                	lw	s1,0(a4)
                                ret+=10;
ee002ed8:	01079c13          	slli	s8,a5,0x10
ee002edc:	010c5393          	srli	t2,s8,0x10
                        tmp+=cur;
ee002ee0:	009e8bb3          	add	s7,t4,s1
                        if (tmp>clipval) {
ee002ee4:	ef75d9e3          	bge	a1,s7,ee002dd6 <matrix_test+0x1ba4>
                        cur=C[i*N+j];
ee002ee8:	00472a03          	lw	s4,4(a4)
                                ret+=10;
ee002eec:	00a38793          	addi	a5,t2,10
ee002ef0:	01079c93          	slli	s9,a5,0x10
ee002ef4:	410cdf93          	srai	t6,s9,0x10
                                tmp=0;
ee002ef8:	4b81                	li	s7,0
                                ret+=10;
ee002efa:	010f9e93          	slli	t4,t6,0x10
                        tmp+=cur;
ee002efe:	014b8c33          	add	s8,s7,s4
                for (j=0; j<N; j++) {
ee002f02:	0711                	addi	a4,a4,4
                                ret+=10;
ee002f04:	010eda93          	srli	s5,t4,0x10
                        if (tmp>clipval) {
ee002f08:	ef85cae3          	blt	a1,s8,ee002dfc <matrix_test+0x1bca>
                                ret += (cur>prev) ? 1 : 0;
ee002f0c:	0144a4b3          	slt	s1,s1,s4
                        cur=C[i*N+j];
ee002f10:	00472c83          	lw	s9,4(a4)
                                ret += (cur>prev) ? 1 : 0;
ee002f14:	009a83b3          	add	t2,s5,s1
ee002f18:	01039293          	slli	t0,t2,0x10
ee002f1c:	4102dd93          	srai	s11,t0,0x10
                                ret+=10;
ee002f20:	010d9f93          	slli	t6,s11,0x10
                        tmp+=cur;
ee002f24:	019c0eb3          	add	t4,s8,s9
                                ret+=10;
ee002f28:	010fdb93          	srli	s7,t6,0x10
                        if (tmp>clipval) {
ee002f2c:	efd5c9e3          	blt	a1,t4,ee002e1e <matrix_test+0x1bec>
                                ret += (cur>prev) ? 1 : 0;
ee002f30:	019a2a33          	slt	s4,s4,s9
ee002f34:	014b8ab3          	add	s5,s7,s4
                        cur=C[i*N+j];
ee002f38:	00872d83          	lw	s11,8(a4)
                                ret += (cur>prev) ? 1 : 0;
ee002f3c:	010a9c13          	slli	s8,s5,0x10
ee002f40:	410c5493          	srai	s1,s8,0x10
                                ret+=10;
ee002f44:	01049d13          	slli	s10,s1,0x10
                        tmp+=cur;
ee002f48:	01be8bb3          	add	s7,t4,s11
                                ret+=10;
ee002f4c:	010d5793          	srli	a5,s10,0x10
                        if (tmp>clipval) {
ee002f50:	ef75c8e3          	blt	a1,s7,ee002e40 <matrix_test+0x1c0e>
                                ret += (cur>prev) ? 1 : 0;
ee002f54:	01bcacb3          	slt	s9,s9,s11
                        cur=C[i*N+j];
ee002f58:	4744                	lw	s1,12(a4)
                                ret += (cur>prev) ? 1 : 0;
ee002f5a:	01978fb3          	add	t6,a5,s9
ee002f5e:	010f9e93          	slli	t4,t6,0x10
ee002f62:	410eda13          	srai	s4,t4,0x10
                                ret+=10;
ee002f66:	010a1393          	slli	t2,s4,0x10
                        tmp+=cur;
ee002f6a:	9ba6                	add	s7,s7,s1
                                ret+=10;
ee002f6c:	0103dd13          	srli	s10,t2,0x10
                        if (tmp>clipval) {
ee002f70:	ef75c7e3          	blt	a1,s7,ee002e5e <matrix_test+0x1c2c>
                                ret += (cur>prev) ? 1 : 0;
ee002f74:	009da2b3          	slt	t0,s11,s1
                        cur=C[i*N+j];
ee002f78:	01072a03          	lw	s4,16(a4)
                                ret += (cur>prev) ? 1 : 0;
ee002f7c:	005d0db3          	add	s11,s10,t0
ee002f80:	010d9793          	slli	a5,s11,0x10
ee002f84:	4107dc93          	srai	s9,a5,0x10
                                ret+=10;
ee002f88:	010c9a93          	slli	s5,s9,0x10
                        tmp+=cur;
ee002f8c:	014b83b3          	add	t2,s7,s4
                                ret+=10;
ee002f90:	010adc13          	srli	s8,s5,0x10
                        if (tmp>clipval) {
ee002f94:	ee75c6e3          	blt	a1,t2,ee002e80 <matrix_test+0x1c4e>
                                ret += (cur>prev) ? 1 : 0;
ee002f98:	0144a4b3          	slt	s1,s1,s4
                        cur=C[i*N+j];
ee002f9c:	01472c83          	lw	s9,20(a4)
                                ret += (cur>prev) ? 1 : 0;
ee002fa0:	009c0d33          	add	s10,s8,s1
ee002fa4:	010d1b93          	slli	s7,s10,0x10
ee002fa8:	410bd293          	srai	t0,s7,0x10
                                ret+=10;
ee002fac:	01029f93          	slli	t6,t0,0x10
                        tmp+=cur;
ee002fb0:	01938eb3          	add	t4,t2,s9
                                ret+=10;
ee002fb4:	010fda93          	srli	s5,t6,0x10
                        if (tmp>clipval) {
ee002fb8:	efd5c5e3          	blt	a1,t4,ee002ea2 <matrix_test+0x1c70>
                                ret += (cur>prev) ? 1 : 0;
ee002fbc:	019a2a33          	slt	s4,s4,s9
                        cur=C[i*N+j];
ee002fc0:	01872283          	lw	t0,24(a4)
                                ret += (cur>prev) ? 1 : 0;
ee002fc4:	014a8c33          	add	s8,s5,s4
ee002fc8:	010c1393          	slli	t2,s8,0x10
ee002fcc:	4103d493          	srai	s1,t2,0x10
                                ret+=10;
ee002fd0:	01049d93          	slli	s11,s1,0x10
                        tmp+=cur;
ee002fd4:	9e96                	add	t4,t4,t0
                                ret+=10;
ee002fd6:	010dd793          	srli	a5,s11,0x10
                        if (tmp>clipval) {
ee002fda:	efd5c4e3          	blt	a1,t4,ee002ec2 <matrix_test+0x1c90>
                                ret += (cur>prev) ? 1 : 0;
ee002fde:	005cacb3          	slt	s9,s9,t0
ee002fe2:	01978fb3          	add	t6,a5,s9
ee002fe6:	010f9a93          	slli	s5,t6,0x10
ee002fea:	410ad793          	srai	a5,s5,0x10
ee002fee:	b5cd                	j	ee002ed0 <matrix_test+0x1c9e>
ee002ff0:	005d2fb3          	slt	t6,s10,t0
ee002ff4:	01fc8bb3          	add	s7,s9,t6
ee002ff8:	010b9a13          	slli	s4,s7,0x10
ee002ffc:	410a5793          	srai	a5,s4,0x10
ee003000:	b3c1                	j	ee002dc0 <matrix_test+0x1b8e>
ee003002:	005caab3          	slt	s5,s9,t0
ee003006:	015a04b3          	add	s1,s4,s5
ee00300a:	01049c13          	slli	s8,s1,0x10
ee00300e:	410c5793          	srai	a5,s8,0x10
ee003012:	b371                	j	ee002d9e <matrix_test+0x1b6c>
ee003014:	0054adb3          	slt	s11,s1,t0
ee003018:	01b38d33          	add	s10,t2,s11
ee00301c:	010d1793          	slli	a5,s10,0x10
ee003020:	87c1                	srai	a5,a5,0x10
ee003022:	bba1                	j	ee002d7a <matrix_test+0x1b48>
ee003024:	005dafb3          	slt	t6,s11,t0
ee003028:	01f78cb3          	add	s9,a5,t6
ee00302c:	010c9b93          	slli	s7,s9,0x10
ee003030:	410bd793          	srai	a5,s7,0x10
ee003034:	b30d                	j	ee002d56 <matrix_test+0x1b24>
ee003036:	005caab3          	slt	s5,s9,t0
ee00303a:	015a04b3          	add	s1,s4,s5
ee00303e:	01049c13          	slli	s8,s1,0x10
ee003042:	410c5793          	srai	a5,s8,0x10
ee003046:	b1f5                	j	ee002d32 <matrix_test+0x1b00>
ee003048:	005aa3b3          	slt	t2,s5,t0
ee00304c:	007c0db3          	add	s11,s8,t2
ee003050:	010d9d13          	slli	s10,s11,0x10
ee003054:	410d5793          	srai	a5,s10,0x10
ee003058:	b95d                	j	ee002d0e <matrix_test+0x1adc>
ee00305a:	005d2cb3          	slt	s9,s10,t0
ee00305e:	019f8733          	add	a4,t6,s9
ee003062:	01071b93          	slli	s7,a4,0x10
ee003066:	410bd793          	srai	a5,s7,0x10
ee00306a:	b9bd                	j	ee002ce8 <matrix_test+0x1ab6>
ee00306c:	408009b3          	neg	s3,s0
ee003070:	00241313          	slli	t1,s0,0x2
ee003074:	006f0733          	add	a4,t5,t1
        ee_s16 ret=0;
ee003078:	4781                	li	a5,0
ee00307a:	00299313          	slli	t1,s3,0x2
        MATRES tmp=0,prev=0,cur=0;
ee00307e:	4f81                	li	t6,0
ee003080:	4e81                	li	t4,0
        for (i=0; i<N; i++) {
ee003082:	4801                	li	a6,0
ee003084:	00399893          	slli	a7,s3,0x3
                for (j=0; j<N; j++) {
ee003088:	00670933          	add	s2,a4,t1
ee00308c:	41270f33          	sub	t5,a4,s2
ee003090:	ffcf0d93          	addi	s11,t5,-4
ee003094:	002dd613          	srli	a2,s11,0x2
ee003098:	00160c13          	addi	s8,a2,1
ee00309c:	007c7d13          	andi	s10,s8,7
        for (i=0; i<N; i++) {
ee0030a0:	8e4a                	mv	t3,s2
ee0030a2:	220d0e63          	beqz	s10,ee0032de <matrix_test+0x20ac>
ee0030a6:	4b85                	li	s7,1
ee0030a8:	0f7d0c63          	beq	s10,s7,ee0031a0 <matrix_test+0x1f6e>
ee0030ac:	4a89                	li	s5,2
ee0030ae:	0d5d0763          	beq	s10,s5,ee00317c <matrix_test+0x1f4a>
ee0030b2:	4c8d                	li	s9,3
ee0030b4:	0b9d0263          	beq	s10,s9,ee003158 <matrix_test+0x1f26>
ee0030b8:	4a11                	li	s4,4
ee0030ba:	074d0d63          	beq	s10,s4,ee003134 <matrix_test+0x1f02>
ee0030be:	4295                	li	t0,5
ee0030c0:	045d0863          	beq	s10,t0,ee003110 <matrix_test+0x1ede>
ee0030c4:	4499                	li	s1,6
ee0030c6:	029d0463          	beq	s10,s1,ee0030ee <matrix_test+0x1ebc>
                        cur=C[i*N+j];
ee0030ca:	8e7e                	mv	t3,t6
ee0030cc:	00092f83          	lw	t6,0(s2)
                                ret+=10;
ee0030d0:	07c2                	slli	a5,a5,0x10
ee0030d2:	0107d993          	srli	s3,a5,0x10
                        tmp+=cur;
ee0030d6:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee0030d8:	39d5d863          	bge	a1,t4,ee003468 <matrix_test+0x2236>
                                ret+=10;
ee0030dc:	00a98e93          	addi	t4,s3,10
ee0030e0:	010e9c13          	slli	s8,t4,0x10
ee0030e4:	410c5793          	srai	a5,s8,0x10
                                tmp=0;
ee0030e8:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee0030ea:	00490e13          	addi	t3,s2,4
                        cur=C[i*N+j];
ee0030ee:	8d7e                	mv	s10,t6
ee0030f0:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee0030f4:	01079b93          	slli	s7,a5,0x10
ee0030f8:	010bda93          	srli	s5,s7,0x10
                        tmp+=cur;
ee0030fc:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee0030fe:	35d5dc63          	bge	a1,t4,ee003456 <matrix_test+0x2224>
                                ret+=10;
ee003102:	00aa8493          	addi	s1,s5,10
ee003106:	01049793          	slli	a5,s1,0x10
ee00310a:	87c1                	srai	a5,a5,0x10
                                tmp=0;
ee00310c:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee00310e:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
ee003110:	89fe                	mv	s3,t6
ee003112:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee003116:	01079f13          	slli	t5,a5,0x10
ee00311a:	010f5d93          	srli	s11,t5,0x10
                        tmp+=cur;
ee00311e:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee003120:	33d5d263          	bge	a1,t4,ee003444 <matrix_test+0x2212>
                                ret+=10;
ee003124:	00ad8e93          	addi	t4,s11,10
ee003128:	010e9b93          	slli	s7,t4,0x10
ee00312c:	410bd793          	srai	a5,s7,0x10
                                tmp=0;
ee003130:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee003132:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
ee003134:	8afe                	mv	s5,t6
ee003136:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee00313a:	01079c93          	slli	s9,a5,0x10
ee00313e:	010cda13          	srli	s4,s9,0x10
                        tmp+=cur;
ee003142:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee003144:	2fd5d863          	bge	a1,t4,ee003434 <matrix_test+0x2202>
                                ret+=10;
ee003148:	00aa0993          	addi	s3,s4,10
ee00314c:	01099f13          	slli	t5,s3,0x10
ee003150:	410f5793          	srai	a5,t5,0x10
                                tmp=0;
ee003154:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee003156:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
ee003158:	8dfe                	mv	s11,t6
ee00315a:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee00315e:	01079613          	slli	a2,a5,0x10
ee003162:	01065c13          	srli	s8,a2,0x10
                        tmp+=cur;
ee003166:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee003168:	2bd5dd63          	bge	a1,t4,ee003422 <matrix_test+0x21f0>
                                ret+=10;
ee00316c:	00ac0e93          	addi	t4,s8,10
ee003170:	010e9c93          	slli	s9,t4,0x10
ee003174:	410cd793          	srai	a5,s9,0x10
                                tmp=0;
ee003178:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee00317a:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
ee00317c:	8a7e                	mv	s4,t6
ee00317e:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee003182:	01079293          	slli	t0,a5,0x10
ee003186:	0102d493          	srli	s1,t0,0x10
                        tmp+=cur;
ee00318a:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee00318c:	29d5d263          	bge	a1,t4,ee003410 <matrix_test+0x21de>
                                ret+=10;
ee003190:	00a48d93          	addi	s11,s1,10
ee003194:	010d9613          	slli	a2,s11,0x10
ee003198:	41065793          	srai	a5,a2,0x10
                                tmp=0;
ee00319c:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee00319e:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
ee0031a0:	8c7e                	mv	s8,t6
ee0031a2:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee0031a6:	01079d13          	slli	s10,a5,0x10
ee0031aa:	010d5b93          	srli	s7,s10,0x10
                        tmp+=cur;
ee0031ae:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee0031b0:	25d5d763          	bge	a1,t4,ee0033fe <matrix_test+0x21cc>
                                ret+=10;
ee0031b4:	00ab8e93          	addi	t4,s7,10
ee0031b8:	010e9293          	slli	t0,t4,0x10
ee0031bc:	4102d793          	srai	a5,t0,0x10
                                tmp=0;
ee0031c0:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee0031c2:	0e11                	addi	t3,t3,4
ee0031c4:	11c71d63          	bne	a4,t3,ee0032de <matrix_test+0x20ac>
        for (i=0; i<N; i++) {
ee0031c8:	00180d93          	addi	s11,a6,1
ee0031cc:	41190733          	sub	a4,s2,a7
ee0031d0:	eb038763          	beq	t2,a6,ee00287e <matrix_test+0x164c>
ee0031d4:	886e                	mv	a6,s11
ee0031d6:	bd4d                	j	ee003088 <matrix_test+0x1e56>
                                ret += (cur>prev) ? 1 : 0;
ee0031d8:	009fafb3          	slt	t6,t6,s1
                        cur=C[i*N+j];
ee0031dc:	004e2a83          	lw	s5,4(t3)
                                ret += (cur>prev) ? 1 : 0;
ee0031e0:	01f98f33          	add	t5,s3,t6
ee0031e4:	010f1d93          	slli	s11,t5,0x10
ee0031e8:	410ddd13          	srai	s10,s11,0x10
                                ret+=10;
ee0031ec:	010d1c93          	slli	s9,s10,0x10
                        tmp+=cur;
ee0031f0:	015b8eb3          	add	t4,s7,s5
                for (j=0; j<N; j++) {
ee0031f4:	0e11                	addi	t3,t3,4
                                ret+=10;
ee0031f6:	010cda13          	srli	s4,s9,0x10
                        if (tmp>clipval) {
ee0031fa:	11d5dd63          	bge	a1,t4,ee003314 <matrix_test+0x20e2>
                        cur=C[i*N+j];
ee0031fe:	004e2d83          	lw	s11,4(t3)
                                ret+=10;
ee003202:	00aa0f93          	addi	t6,s4,10
ee003206:	010f9f13          	slli	t5,t6,0x10
ee00320a:	410f5993          	srai	s3,t5,0x10
                                tmp=0;
ee00320e:	4e81                	li	t4,0
                                ret+=10;
ee003210:	01099613          	slli	a2,s3,0x10
                        tmp+=cur;
ee003214:	01be8d33          	add	s10,t4,s11
                                ret+=10;
ee003218:	01065c13          	srli	s8,a2,0x10
                        if (tmp>clipval) {
ee00321c:	11a5de63          	bge	a1,s10,ee003338 <matrix_test+0x2106>
                        cur=C[i*N+j];
ee003220:	008e2483          	lw	s1,8(t3)
                                ret+=10;
ee003224:	00ac0e93          	addi	t4,s8,10
ee003228:	010e9293          	slli	t0,t4,0x10
ee00322c:	4102da13          	srai	s4,t0,0x10
                                tmp=0;
ee003230:	4d01                	li	s10,0
                                ret+=10;
ee003232:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
ee003236:	009d0fb3          	add	t6,s10,s1
                                ret+=10;
ee00323a:	0107d993          	srli	s3,a5,0x10
                        if (tmp>clipval) {
ee00323e:	11f5df63          	bge	a1,t6,ee00335c <matrix_test+0x212a>
                        cur=C[i*N+j];
ee003242:	00ce2a83          	lw	s5,12(t3)
                                ret+=10;
ee003246:	00a98d13          	addi	s10,s3,10
ee00324a:	010d1b93          	slli	s7,s10,0x10
ee00324e:	410bdc13          	srai	s8,s7,0x10
                                tmp=0;
ee003252:	4f81                	li	t6,0
                                ret+=10;
ee003254:	010c1c93          	slli	s9,s8,0x10
                        tmp+=cur;
ee003258:	015f8eb3          	add	t4,t6,s5
                                ret+=10;
ee00325c:	010cda13          	srli	s4,s9,0x10
                        if (tmp>clipval) {
ee003260:	13d5d063          	bge	a1,t4,ee003380 <matrix_test+0x214e>
                        cur=C[i*N+j];
ee003264:	010e2d83          	lw	s11,16(t3)
                                ret+=10;
ee003268:	00aa0f93          	addi	t6,s4,10
ee00326c:	010f9f13          	slli	t5,t6,0x10
ee003270:	410f5993          	srai	s3,t5,0x10
                                tmp=0;
ee003274:	4e81                	li	t4,0
                                ret+=10;
ee003276:	01099613          	slli	a2,s3,0x10
                        tmp+=cur;
ee00327a:	01be8d33          	add	s10,t4,s11
                                ret+=10;
ee00327e:	01065c13          	srli	s8,a2,0x10
                        if (tmp>clipval) {
ee003282:	13a5d163          	bge	a1,s10,ee0033a4 <matrix_test+0x2172>
                        cur=C[i*N+j];
ee003286:	014e2483          	lw	s1,20(t3)
                                ret+=10;
ee00328a:	00ac0e93          	addi	t4,s8,10
ee00328e:	010e9293          	slli	t0,t4,0x10
ee003292:	4102da13          	srai	s4,t0,0x10
                                tmp=0;
ee003296:	4d01                	li	s10,0
                                ret+=10;
ee003298:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
ee00329c:	009d0f33          	add	t5,s10,s1
                                ret+=10;
ee0032a0:	0107d993          	srli	s3,a5,0x10
                        if (tmp>clipval) {
ee0032a4:	13e5d263          	bge	a1,t5,ee0033c8 <matrix_test+0x2196>
                        cur=C[i*N+j];
ee0032a8:	018e2f83          	lw	t6,24(t3)
                                ret+=10;
ee0032ac:	00a98d13          	addi	s10,s3,10
ee0032b0:	010d1b93          	slli	s7,s10,0x10
ee0032b4:	410bdc13          	srai	s8,s7,0x10
                                tmp=0;
ee0032b8:	4f01                	li	t5,0
                                ret+=10;
ee0032ba:	010c1a93          	slli	s5,s8,0x10
                        tmp+=cur;
ee0032be:	01ff0eb3          	add	t4,t5,t6
                                ret+=10;
ee0032c2:	010adc93          	srli	s9,s5,0x10
                        if (tmp>clipval) {
ee0032c6:	13d5d363          	bge	a1,t4,ee0033ec <matrix_test+0x21ba>
                                ret+=10;
ee0032ca:	00ac8993          	addi	s3,s9,10
ee0032ce:	01099f13          	slli	t5,s3,0x10
ee0032d2:	410f5793          	srai	a5,t5,0x10
                                tmp=0;
ee0032d6:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee0032d8:	0e71                	addi	t3,t3,28
ee0032da:	efc707e3          	beq	a4,t3,ee0031c8 <matrix_test+0x1f96>
                        cur=C[i*N+j];
ee0032de:	000e2483          	lw	s1,0(t3)
                                ret+=10;
ee0032e2:	07c2                	slli	a5,a5,0x10
ee0032e4:	0107d993          	srli	s3,a5,0x10
                        tmp+=cur;
ee0032e8:	009e8bb3          	add	s7,t4,s1
                        if (tmp>clipval) {
ee0032ec:	ef75d6e3          	bge	a1,s7,ee0031d8 <matrix_test+0x1fa6>
                        cur=C[i*N+j];
ee0032f0:	004e2a83          	lw	s5,4(t3)
                                ret+=10;
ee0032f4:	00a98613          	addi	a2,s3,10
ee0032f8:	01061c13          	slli	s8,a2,0x10
ee0032fc:	410c5d13          	srai	s10,s8,0x10
                                tmp=0;
ee003300:	4b81                	li	s7,0
                                ret+=10;
ee003302:	010d1c93          	slli	s9,s10,0x10
                        tmp+=cur;
ee003306:	015b8eb3          	add	t4,s7,s5
                for (j=0; j<N; j++) {
ee00330a:	0e11                	addi	t3,t3,4
                                ret+=10;
ee00330c:	010cda13          	srli	s4,s9,0x10
                        if (tmp>clipval) {
ee003310:	efd5c7e3          	blt	a1,t4,ee0031fe <matrix_test+0x1fcc>
                                ret += (cur>prev) ? 1 : 0;
ee003314:	0154a2b3          	slt	t0,s1,s5
                        cur=C[i*N+j];
ee003318:	004e2d83          	lw	s11,4(t3)
                                ret += (cur>prev) ? 1 : 0;
ee00331c:	005a04b3          	add	s1,s4,t0
ee003320:	01049793          	slli	a5,s1,0x10
ee003324:	4107d993          	srai	s3,a5,0x10
                                ret+=10;
ee003328:	01099613          	slli	a2,s3,0x10
                        tmp+=cur;
ee00332c:	01be8d33          	add	s10,t4,s11
                                ret+=10;
ee003330:	01065c13          	srli	s8,a2,0x10
                        if (tmp>clipval) {
ee003334:	efa5c6e3          	blt	a1,s10,ee003220 <matrix_test+0x1fee>
                                ret += (cur>prev) ? 1 : 0;
ee003338:	01baabb3          	slt	s7,s5,s11
                        cur=C[i*N+j];
ee00333c:	008e2483          	lw	s1,8(t3)
                                ret += (cur>prev) ? 1 : 0;
ee003340:	017c0ab3          	add	s5,s8,s7
ee003344:	010a9c93          	slli	s9,s5,0x10
ee003348:	410cda13          	srai	s4,s9,0x10
                                ret+=10;
ee00334c:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
ee003350:	009d0fb3          	add	t6,s10,s1
                                ret+=10;
ee003354:	0107d993          	srli	s3,a5,0x10
                        if (tmp>clipval) {
ee003358:	eff5c5e3          	blt	a1,t6,ee003242 <matrix_test+0x2010>
                                ret += (cur>prev) ? 1 : 0;
ee00335c:	009daf33          	slt	t5,s11,s1
                        cur=C[i*N+j];
ee003360:	00ce2a83          	lw	s5,12(t3)
                                ret += (cur>prev) ? 1 : 0;
ee003364:	01e98db3          	add	s11,s3,t5
ee003368:	010d9613          	slli	a2,s11,0x10
ee00336c:	41065c13          	srai	s8,a2,0x10
                                ret+=10;
ee003370:	010c1c93          	slli	s9,s8,0x10
                        tmp+=cur;
ee003374:	015f8eb3          	add	t4,t6,s5
                                ret+=10;
ee003378:	010cda13          	srli	s4,s9,0x10
                        if (tmp>clipval) {
ee00337c:	efd5c4e3          	blt	a1,t4,ee003264 <matrix_test+0x2032>
                                ret += (cur>prev) ? 1 : 0;
ee003380:	0154a2b3          	slt	t0,s1,s5
                        cur=C[i*N+j];
ee003384:	010e2d83          	lw	s11,16(t3)
                                ret += (cur>prev) ? 1 : 0;
ee003388:	005a04b3          	add	s1,s4,t0
ee00338c:	01049793          	slli	a5,s1,0x10
ee003390:	4107d993          	srai	s3,a5,0x10
                                ret+=10;
ee003394:	01099613          	slli	a2,s3,0x10
                        tmp+=cur;
ee003398:	01be8d33          	add	s10,t4,s11
                                ret+=10;
ee00339c:	01065c13          	srli	s8,a2,0x10
                        if (tmp>clipval) {
ee0033a0:	efa5c3e3          	blt	a1,s10,ee003286 <matrix_test+0x2054>
                                ret += (cur>prev) ? 1 : 0;
ee0033a4:	01baabb3          	slt	s7,s5,s11
                        cur=C[i*N+j];
ee0033a8:	014e2483          	lw	s1,20(t3)
                                ret += (cur>prev) ? 1 : 0;
ee0033ac:	017c0ab3          	add	s5,s8,s7
ee0033b0:	010a9c93          	slli	s9,s5,0x10
ee0033b4:	410cda13          	srai	s4,s9,0x10
                                ret+=10;
ee0033b8:	010a1793          	slli	a5,s4,0x10
                        tmp+=cur;
ee0033bc:	009d0f33          	add	t5,s10,s1
                                ret+=10;
ee0033c0:	0107d993          	srli	s3,a5,0x10
                        if (tmp>clipval) {
ee0033c4:	efe5c2e3          	blt	a1,t5,ee0032a8 <matrix_test+0x2076>
                                ret += (cur>prev) ? 1 : 0;
ee0033c8:	009dafb3          	slt	t6,s11,s1
ee0033cc:	01f98db3          	add	s11,s3,t6
                        cur=C[i*N+j];
ee0033d0:	018e2f83          	lw	t6,24(t3)
                                ret += (cur>prev) ? 1 : 0;
ee0033d4:	010d9613          	slli	a2,s11,0x10
ee0033d8:	41065c13          	srai	s8,a2,0x10
                                ret+=10;
ee0033dc:	010c1a93          	slli	s5,s8,0x10
                        tmp+=cur;
ee0033e0:	01ff0eb3          	add	t4,t5,t6
                                ret+=10;
ee0033e4:	010adc93          	srli	s9,s5,0x10
                        if (tmp>clipval) {
ee0033e8:	efd5c1e3          	blt	a1,t4,ee0032ca <matrix_test+0x2098>
                                ret += (cur>prev) ? 1 : 0;
ee0033ec:	01f4aa33          	slt	s4,s1,t6
ee0033f0:	014c82b3          	add	t0,s9,s4
ee0033f4:	01029493          	slli	s1,t0,0x10
ee0033f8:	4104d793          	srai	a5,s1,0x10
ee0033fc:	bdf1                	j	ee0032d8 <matrix_test+0x20a6>
ee0033fe:	01fc2ab3          	slt	s5,s8,t6
ee003402:	015b8cb3          	add	s9,s7,s5
ee003406:	010c9a13          	slli	s4,s9,0x10
ee00340a:	410a5793          	srai	a5,s4,0x10
ee00340e:	bb55                	j	ee0031c2 <matrix_test+0x1f90>
ee003410:	01fa27b3          	slt	a5,s4,t6
ee003414:	00f489b3          	add	s3,s1,a5
ee003418:	01099f13          	slli	t5,s3,0x10
ee00341c:	410f5793          	srai	a5,t5,0x10
ee003420:	bbbd                	j	ee00319e <matrix_test+0x1f6c>
ee003422:	01fdad33          	slt	s10,s11,t6
ee003426:	01ac0bb3          	add	s7,s8,s10
ee00342a:	010b9a93          	slli	s5,s7,0x10
ee00342e:	410ad793          	srai	a5,s5,0x10
ee003432:	b3a1                	j	ee00317a <matrix_test+0x1f48>
ee003434:	01faa2b3          	slt	t0,s5,t6
ee003438:	005a04b3          	add	s1,s4,t0
ee00343c:	01049793          	slli	a5,s1,0x10
ee003440:	87c1                	srai	a5,a5,0x10
ee003442:	bb11                	j	ee003156 <matrix_test+0x1f24>
ee003444:	01f9a633          	slt	a2,s3,t6
ee003448:	00cd8c33          	add	s8,s11,a2
ee00344c:	010c1d13          	slli	s10,s8,0x10
ee003450:	410d5793          	srai	a5,s10,0x10
ee003454:	b9f9                	j	ee003132 <matrix_test+0x1f00>
ee003456:	01fd2cb3          	slt	s9,s10,t6
ee00345a:	019a8a33          	add	s4,s5,s9
ee00345e:	010a1293          	slli	t0,s4,0x10
ee003462:	4102d793          	srai	a5,t0,0x10
ee003466:	b165                	j	ee00310e <matrix_test+0x1edc>
ee003468:	01fe2f33          	slt	t5,t3,t6
ee00346c:	01e98db3          	add	s11,s3,t5
ee003470:	010d9613          	slli	a2,s11,0x10
ee003474:	41065793          	srai	a5,a2,0x10
ee003478:	b98d                	j	ee0030ea <matrix_test+0x1eb8>
        for (i=0; i<N; i++) {
ee00347a:	4f81                	li	t6,0
ee00347c:	4281                	li	t0,0
ee00347e:	98dfe06f          	j	ee001e0a <matrix_test+0xbd8>
        for (i=0; i<N; i++) {
ee003482:	4781                	li	a5,0
                data >>= 1;
ee003484:	4601                	li	a2,0
                crc >>= 1;
ee003486:	4701                	li	a4,0
ee003488:	cbafe06f          	j	ee001942 <matrix_test+0x710>

ee00348c <core_bench_matrix>:
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
ee00348c:	1141                	addi	sp,sp,-16
        crc=crc16(matrix_test(N,C,A,B,val),crc);
ee00348e:	4514                	lw	a3,8(a0)
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
ee003490:	872e                	mv	a4,a1
ee003492:	c422                	sw	s0,8(sp)
        crc=crc16(matrix_test(N,C,A,B,val),crc);
ee003494:	454c                	lw	a1,12(a0)
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
ee003496:	8432                	mv	s0,a2
        crc=crc16(matrix_test(N,C,A,B,val),crc);
ee003498:	4150                	lw	a2,4(a0)
ee00349a:	4108                	lw	a0,0(a0)
ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
ee00349c:	c606                	sw	ra,12(sp)
        crc=crc16(matrix_test(N,C,A,B,val),crc);
ee00349e:	d95fd0ef          	jal	ra,ee001232 <matrix_test>
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee0034a2:	0ff57713          	zext.b	a4,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0034a6:	008746b3          	xor	a3,a4,s0
        crc=crc16((ee_s16) newval               ,crc);
        crc=crc16((ee_s16) (newval>>16) ,crc);
        return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
        return crcu16((ee_u16)newval, crc);
ee0034aa:	01051793          	slli	a5,a0,0x10
                if (x16 == 1)
ee0034ae:	0016f293          	andi	t0,a3,1
        return crcu16((ee_u16)newval, crc);
ee0034b2:	0107d313          	srli	t1,a5,0x10
                data >>= 1;
ee0034b6:	00175613          	srli	a2,a4,0x1
                crc >>= 1;
ee0034ba:	00145813          	srli	a6,s0,0x1
                if (x16 == 1)
ee0034be:	00028b63          	beqz	t0,ee0034d4 <core_bench_matrix+0x48>
                   crc |= 0x8000;
ee0034c2:	70e9                	lui	ra,0xffffa
ee0034c4:	00108393          	addi	t2,ra,1 # ffffa001 <STACK+0xffb8271>
ee0034c8:	00784533          	xor	a0,a6,t2
ee0034cc:	01051593          	slli	a1,a0,0x10
ee0034d0:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0034d4:	010648b3          	xor	a7,a2,a6
                if (x16 == 1)
ee0034d8:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee0034dc:	00275e93          	srli	t4,a4,0x2
                crc >>= 1;
ee0034e0:	00185293          	srli	t0,a6,0x1
                if (x16 == 1)
ee0034e4:	000e0b63          	beqz	t3,ee0034fa <core_bench_matrix+0x6e>
                   crc |= 0x8000;
ee0034e8:	7f69                	lui	t5,0xffffa
ee0034ea:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee0034ee:	01f2c433          	xor	s0,t0,t6
ee0034f2:	01041693          	slli	a3,s0,0x10
ee0034f6:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0034fa:	005ec7b3          	xor	a5,t4,t0
                if (x16 == 1)
ee0034fe:	0017f093          	andi	ra,a5,1
                data >>= 1;
ee003502:	00375613          	srli	a2,a4,0x3
                crc >>= 1;
ee003506:	0012d893          	srli	a7,t0,0x1
                if (x16 == 1)
ee00350a:	00008b63          	beqz	ra,ee003520 <core_bench_matrix+0x94>
                   crc |= 0x8000;
ee00350e:	73e9                	lui	t2,0xffffa
ee003510:	00138593          	addi	a1,t2,1 # ffffa001 <STACK+0xffb8271>
ee003514:	00b8c533          	xor	a0,a7,a1
ee003518:	01051813          	slli	a6,a0,0x10
ee00351c:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee003520:	01164e33          	xor	t3,a2,a7
                if (x16 == 1)
ee003524:	001e7e93          	andi	t4,t3,1
                data >>= 1;
ee003528:	00475f13          	srli	t5,a4,0x4
                crc >>= 1;
ee00352c:	0018d793          	srli	a5,a7,0x1
                if (x16 == 1)
ee003530:	000e8b63          	beqz	t4,ee003546 <core_bench_matrix+0xba>
                   crc |= 0x8000;
ee003534:	7fe9                	lui	t6,0xffffa
ee003536:	001f8413          	addi	s0,t6,1 # ffffa001 <STACK+0xffb8271>
ee00353a:	0087c6b3          	xor	a3,a5,s0
ee00353e:	01069293          	slli	t0,a3,0x10
ee003542:	0102d793          	srli	a5,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee003546:	00ff40b3          	xor	ra,t5,a5
                if (x16 == 1)
ee00354a:	0010f393          	andi	t2,ra,1
                data >>= 1;
ee00354e:	00575613          	srli	a2,a4,0x5
                crc >>= 1;
ee003552:	0017de13          	srli	t3,a5,0x1
                if (x16 == 1)
ee003556:	00038b63          	beqz	t2,ee00356c <core_bench_matrix+0xe0>
                   crc |= 0x8000;
ee00355a:	75e9                	lui	a1,0xffffa
ee00355c:	00158813          	addi	a6,a1,1 # ffffa001 <STACK+0xffb8271>
ee003560:	010e4533          	xor	a0,t3,a6
ee003564:	01051893          	slli	a7,a0,0x10
ee003568:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00356c:	01c64eb3          	xor	t4,a2,t3
                if (x16 == 1)
ee003570:	001eff13          	andi	t5,t4,1
                data >>= 1;
ee003574:	00675f93          	srli	t6,a4,0x6
                crc >>= 1;
ee003578:	001e5093          	srli	ra,t3,0x1
                if (x16 == 1)
ee00357c:	000f0b63          	beqz	t5,ee003592 <core_bench_matrix+0x106>
                   crc |= 0x8000;
ee003580:	7469                	lui	s0,0xffffa
ee003582:	00140693          	addi	a3,s0,1 # ffffa001 <STACK+0xffb8271>
ee003586:	00d0c2b3          	xor	t0,ra,a3
ee00358a:	01029793          	slli	a5,t0,0x10
ee00358e:	0107d093          	srli	ra,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee003592:	001fc3b3          	xor	t2,t6,ra
                if (x16 == 1)
ee003596:	0013f613          	andi	a2,t2,1
                data >>= 1;
ee00359a:	831d                	srli	a4,a4,0x7
                crc >>= 1;
ee00359c:	0010de13          	srli	t3,ra,0x1
                if (x16 == 1)
ee0035a0:	ca11                	beqz	a2,ee0035b4 <core_bench_matrix+0x128>
                   crc |= 0x8000;
ee0035a2:	75e9                	lui	a1,0xffffa
ee0035a4:	00158813          	addi	a6,a1,1 # ffffa001 <STACK+0xffb8271>
ee0035a8:	010e4533          	xor	a0,t3,a6
ee0035ac:	01051893          	slli	a7,a0,0x10
ee0035b0:	0108de13          	srli	t3,a7,0x10
                if (x16 == 1)
ee0035b4:	001e7e93          	andi	t4,t3,1
                crc >>= 1;
ee0035b8:	001e5293          	srli	t0,t3,0x1
                if (x16 == 1)
ee0035bc:	12ee9c63          	bne	t4,a4,ee0036f4 <core_bench_matrix+0x268>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee0035c0:	00835093          	srli	ra,t1,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0035c4:	0050c7b3          	xor	a5,ra,t0
                if (x16 == 1)
ee0035c8:	0017f393          	andi	t2,a5,1
                data >>= 1;
ee0035cc:	00935313          	srli	t1,t1,0x9
                if (x16 == 1)
ee0035d0:	0012d513          	srli	a0,t0,0x1
ee0035d4:	00038b63          	beqz	t2,ee0035ea <core_bench_matrix+0x15e>
                   crc |= 0x8000;
ee0035d8:	7669                	lui	a2,0xffffa
ee0035da:	00160713          	addi	a4,a2,1 # ffffa001 <STACK+0xffb8271>
ee0035de:	00e545b3          	xor	a1,a0,a4
ee0035e2:	01059813          	slli	a6,a1,0x10
ee0035e6:	01085513          	srli	a0,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0035ea:	00a348b3          	xor	a7,t1,a0
                if (x16 == 1)
ee0035ee:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee0035f2:	0020de93          	srli	t4,ra,0x2
                if (x16 == 1)
ee0035f6:	00155293          	srli	t0,a0,0x1
ee0035fa:	000e0b63          	beqz	t3,ee003610 <core_bench_matrix+0x184>
                   crc |= 0x8000;
ee0035fe:	7f69                	lui	t5,0xffffa
ee003600:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee003604:	01f2c433          	xor	s0,t0,t6
ee003608:	01041693          	slli	a3,s0,0x10
ee00360c:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee003610:	005ec7b3          	xor	a5,t4,t0
                if (x16 == 1)
ee003614:	0017f393          	andi	t2,a5,1
                data >>= 1;
ee003618:	0030d313          	srli	t1,ra,0x3
                if (x16 == 1)
ee00361c:	0012d513          	srli	a0,t0,0x1
ee003620:	00038b63          	beqz	t2,ee003636 <core_bench_matrix+0x1aa>
                   crc |= 0x8000;
ee003624:	7669                	lui	a2,0xffffa
ee003626:	00160713          	addi	a4,a2,1 # ffffa001 <STACK+0xffb8271>
ee00362a:	00e545b3          	xor	a1,a0,a4
ee00362e:	01059813          	slli	a6,a1,0x10
ee003632:	01085513          	srli	a0,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee003636:	00a348b3          	xor	a7,t1,a0
                if (x16 == 1)
ee00363a:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee00363e:	0040de93          	srli	t4,ra,0x4
                if (x16 == 1)
ee003642:	00155293          	srli	t0,a0,0x1
ee003646:	000e0b63          	beqz	t3,ee00365c <core_bench_matrix+0x1d0>
                   crc |= 0x8000;
ee00364a:	7f69                	lui	t5,0xffffa
ee00364c:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee003650:	01f2c433          	xor	s0,t0,t6
ee003654:	01041693          	slli	a3,s0,0x10
ee003658:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00365c:	005ec7b3          	xor	a5,t4,t0
                if (x16 == 1)
ee003660:	0017f393          	andi	t2,a5,1
                data >>= 1;
ee003664:	0050d313          	srli	t1,ra,0x5
                if (x16 == 1)
ee003668:	0012d513          	srli	a0,t0,0x1
ee00366c:	00038b63          	beqz	t2,ee003682 <core_bench_matrix+0x1f6>
                   crc |= 0x8000;
ee003670:	7669                	lui	a2,0xffffa
ee003672:	00160713          	addi	a4,a2,1 # ffffa001 <STACK+0xffb8271>
ee003676:	00e545b3          	xor	a1,a0,a4
ee00367a:	01059813          	slli	a6,a1,0x10
ee00367e:	01085513          	srli	a0,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee003682:	00a348b3          	xor	a7,t1,a0
                if (x16 == 1)
ee003686:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee00368a:	0060de93          	srli	t4,ra,0x6
                if (x16 == 1)
ee00368e:	00155293          	srli	t0,a0,0x1
ee003692:	000e0b63          	beqz	t3,ee0036a8 <core_bench_matrix+0x21c>
                   crc |= 0x8000;
ee003696:	7f69                	lui	t5,0xffffa
ee003698:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee00369c:	01f2c433          	xor	s0,t0,t6
ee0036a0:	01041693          	slli	a3,s0,0x10
ee0036a4:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0036a8:	005ec7b3          	xor	a5,t4,t0
                if (x16 == 1)
ee0036ac:	0017f393          	andi	t2,a5,1
                data >>= 1;
ee0036b0:	0070d093          	srli	ra,ra,0x7
                if (x16 == 1)
ee0036b4:	0012d813          	srli	a6,t0,0x1
ee0036b8:	00038b63          	beqz	t2,ee0036ce <core_bench_matrix+0x242>
                   crc |= 0x8000;
ee0036bc:	7369                	lui	t1,0xffffa
ee0036be:	00130613          	addi	a2,t1,1 # ffffa001 <STACK+0xffb8271>
ee0036c2:	00c84733          	xor	a4,a6,a2
ee0036c6:	01071593          	slli	a1,a4,0x10
ee0036ca:	0105d813          	srli	a6,a1,0x10
                if (x16 == 1)
ee0036ce:	00187893          	andi	a7,a6,1
ee0036d2:	00185513          	srli	a0,a6,0x1
ee0036d6:	00188b63          	beq	a7,ra,ee0036ec <core_bench_matrix+0x260>
                   crc |= 0x8000;
ee0036da:	7e69                	lui	t3,0xffffa
ee0036dc:	001e0e93          	addi	t4,t3,1 # ffffa001 <STACK+0xffb8271>
ee0036e0:	01d54533          	xor	a0,a0,t4
ee0036e4:	01051f13          	slli	t5,a0,0x10
ee0036e8:	010f5513          	srli	a0,t5,0x10
}
ee0036ec:	40b2                	lw	ra,12(sp)
ee0036ee:	4422                	lw	s0,8(sp)
ee0036f0:	0141                	addi	sp,sp,16
ee0036f2:	8082                	ret
                   crc |= 0x8000;
ee0036f4:	7f69                	lui	t5,0xffffa
ee0036f6:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee0036fa:	01f2c433          	xor	s0,t0,t6
ee0036fe:	01041693          	slli	a3,s0,0x10
ee003702:	0106d293          	srli	t0,a3,0x10
ee003706:	bd6d                	j	ee0035c0 <core_bench_matrix+0x134>

ee003708 <core_init_matrix>:
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
ee003708:	7179                	addi	sp,sp,-48
ee00370a:	d04e                	sw	s3,32(sp)
ee00370c:	d622                	sw	s0,44(sp)
ee00370e:	d426                	sw	s1,40(sp)
ee003710:	d24a                	sw	s2,36(sp)
ee003712:	ce52                	sw	s4,28(sp)
ee003714:	cc56                	sw	s5,24(sp)
ee003716:	ca5a                	sw	s6,20(sp)
ee003718:	c85e                	sw	s7,16(sp)
ee00371a:	c662                	sw	s8,12(sp)
ee00371c:	c466                	sw	s9,8(sp)
ee00371e:	c26a                	sw	s10,4(sp)
ee003720:	872a                	mv	a4,a0
ee003722:	89b6                	mv	s3,a3
        if (seed==0)
ee003724:	e211                	bnez	a2,ee003728 <core_init_matrix+0x20>
                seed=1;
ee003726:	4605                	li	a2,1
        while (j<blksize) {
ee003728:	4781                	li	a5,0
ee00372a:	2e070e63          	beqz	a4,ee003a26 <core_init_matrix+0x31e>
                i++;
ee00372e:	00178813          	addi	a6,a5,1
                j=i*i*2*4;
ee003732:	030806b3          	mul	a3,a6,a6
                i++;
ee003736:	00278893          	addi	a7,a5,2
ee00373a:	00378e93          	addi	t4,a5,3
ee00373e:	00478f93          	addi	t6,a5,4
ee003742:	00578f13          	addi	t5,a5,5
ee003746:	00678313          	addi	t1,a5,6
ee00374a:	00778393          	addi	t2,a5,7
        while (j<blksize) {
ee00374e:	853e                	mv	a0,a5
                i++;
ee003750:	07a1                	addi	a5,a5,8
                j=i*i*2*4;
ee003752:	00369413          	slli	s0,a3,0x3
        while (j<blksize) {
ee003756:	06e47363          	bgeu	s0,a4,ee0037bc <core_init_matrix+0xb4>
                j=i*i*2*4;
ee00375a:	03188933          	mul	s2,a7,a7
ee00375e:	8542                	mv	a0,a6
ee003760:	00391a13          	slli	s4,s2,0x3
        while (j<blksize) {
ee003764:	04ea7c63          	bgeu	s4,a4,ee0037bc <core_init_matrix+0xb4>
                j=i*i*2*4;
ee003768:	03de8ab3          	mul	s5,t4,t4
ee00376c:	8546                	mv	a0,a7
ee00376e:	003a9b13          	slli	s6,s5,0x3
        while (j<blksize) {
ee003772:	04eb7563          	bgeu	s6,a4,ee0037bc <core_init_matrix+0xb4>
                j=i*i*2*4;
ee003776:	03ff8bb3          	mul	s7,t6,t6
ee00377a:	8576                	mv	a0,t4
ee00377c:	003b9c13          	slli	s8,s7,0x3
        while (j<blksize) {
ee003780:	02ec7e63          	bgeu	s8,a4,ee0037bc <core_init_matrix+0xb4>
                j=i*i*2*4;
ee003784:	03ef0cb3          	mul	s9,t5,t5
ee003788:	857e                	mv	a0,t6
ee00378a:	003c9d13          	slli	s10,s9,0x3
        while (j<blksize) {
ee00378e:	02ed7763          	bgeu	s10,a4,ee0037bc <core_init_matrix+0xb4>
                j=i*i*2*4;
ee003792:	026304b3          	mul	s1,t1,t1
ee003796:	857a                	mv	a0,t5
ee003798:	00349293          	slli	t0,s1,0x3
        while (j<blksize) {
ee00379c:	02e2f063          	bgeu	t0,a4,ee0037bc <core_init_matrix+0xb4>
                j=i*i*2*4;
ee0037a0:	02738e33          	mul	t3,t2,t2
ee0037a4:	851a                	mv	a0,t1
ee0037a6:	003e1813          	slli	a6,t3,0x3
        while (j<blksize) {
ee0037aa:	00e87963          	bgeu	a6,a4,ee0037bc <core_init_matrix+0xb4>
                j=i*i*2*4;
ee0037ae:	02f788b3          	mul	a7,a5,a5
ee0037b2:	851e                	mv	a0,t2
ee0037b4:	00389e93          	slli	t4,a7,0x3
        while (j<blksize) {
ee0037b8:	f6eeebe3          	bltu	t4,a4,ee00372e <core_init_matrix+0x26>
        B=A+N*N;
ee0037bc:	02a50733          	mul	a4,a0,a0
        A=(MATDAT *)align_mem(memblk);
ee0037c0:	15fd                	addi	a1,a1,-1
ee0037c2:	ffc5ff93          	andi	t6,a1,-4
ee0037c6:	004f8a13          	addi	s4,t6,4
        p->N=N;
ee0037ca:	8aaa                	mv	s5,a0
        A=(MATDAT *)align_mem(memblk);
ee0037cc:	8e52                	mv	t3,s4
        B=A+N*N;
ee0037ce:	00171413          	slli	s0,a4,0x1
ee0037d2:	008a04b3          	add	s1,s4,s0
        for (i=0; i<N; i++) {
ee0037d6:	20050b63          	beqz	a0,ee0039ec <core_init_matrix+0x2e4>
                        seed = ( ( order * seed ) % 65536 );
ee0037da:	6341                	lui	t1,0x10
ee0037dc:	00150f13          	addi	t5,a0,1
ee0037e0:	00151913          	slli	s2,a0,0x1
        B=A+N*N;
ee0037e4:	8fa6                	mv	t6,s1
        for (i=0; i<N; i++) {
ee0037e6:	4381                	li	t2,0
        ee_s32 order=1;
ee0037e8:	4805                	li	a6,1
ee0037ea:	409e0e33          	sub	t3,t3,s1
                        seed = ( ( order * seed ) % 65536 );
ee0037ee:	fff30e93          	addi	t4,t1,-1 # ffff <_start-0x7fff0001>
                for (j=0; j<N; j++) {
ee0037f2:	410f06b3          	sub	a3,t5,a6
ee0037f6:	0036f793          	andi	a5,a3,3
        B=A+N*N;
ee0037fa:	85fe                	mv	a1,t6
ee0037fc:	86c2                	mv	a3,a6
ee0037fe:	c3e5                	beqz	a5,ee0038de <core_init_matrix+0x1d6>
ee003800:	4b05                	li	s6,1
ee003802:	09678a63          	beq	a5,s6,ee003896 <core_init_matrix+0x18e>
ee003806:	4b89                	li	s7,2
ee003808:	05778563          	beq	a5,s7,ee003852 <core_init_matrix+0x14a>
                        seed = ( ( order * seed ) % 65536 );
ee00380c:	03060633          	mul	a2,a2,a6
ee003810:	01081c13          	slli	s8,a6,0x10
ee003814:	010c5c93          	srli	s9,s8,0x10
                        A[i*N+j] = val;
ee003818:	01fe0d33          	add	s10,t3,t6
                for (j=0; j<N; j++) {
ee00381c:	002f8593          	addi	a1,t6,2
                        val = (seed + order);
ee003820:	0805                	addi	a6,a6,1
                        seed = ( ( order * seed ) % 65536 );
ee003822:	41f65293          	srai	t0,a2,0x1f
ee003826:	0102d893          	srli	a7,t0,0x10
ee00382a:	01160733          	add	a4,a2,a7
ee00382e:	01d77333          	and	t1,a4,t4
ee003832:	41130633          	sub	a2,t1,a7
                        val = (seed + order);
ee003836:	00cc87b3          	add	a5,s9,a2
ee00383a:	01079b13          	slli	s6,a5,0x10
ee00383e:	010b5b93          	srli	s7,s6,0x10
                        val =  (val + order);
ee003842:	019b8c33          	add	s8,s7,s9
                        B[i*N+j] = val;
ee003846:	017f9023          	sh	s7,0(t6)
                        val=matrix_clip(val,1);
ee00384a:	0ffc7c93          	zext.b	s9,s8
                        A[i*N+j] = val;
ee00384e:	019d1023          	sh	s9,0(s10)
                        seed = ( ( order * seed ) % 65536 );
ee003852:	03060633          	mul	a2,a2,a6
ee003856:	01081d13          	slli	s10,a6,0x10
ee00385a:	010d5293          	srli	t0,s10,0x10
                        A[i*N+j] = val;
ee00385e:	00be08b3          	add	a7,t3,a1
                        val = (seed + order);
ee003862:	0805                	addi	a6,a6,1
                for (j=0; j<N; j++) {
ee003864:	0589                	addi	a1,a1,2
                        seed = ( ( order * seed ) % 65536 );
ee003866:	41f65713          	srai	a4,a2,0x1f
ee00386a:	01075313          	srli	t1,a4,0x10
ee00386e:	006607b3          	add	a5,a2,t1
ee003872:	01d7fb33          	and	s6,a5,t4
ee003876:	406b0633          	sub	a2,s6,t1
                        val = (seed + order);
ee00387a:	00c28bb3          	add	s7,t0,a2
ee00387e:	010b9c13          	slli	s8,s7,0x10
ee003882:	010c5c93          	srli	s9,s8,0x10
                        val =  (val + order);
ee003886:	005c8d33          	add	s10,s9,t0
                        B[i*N+j] = val;
ee00388a:	ff959f23          	sh	s9,-2(a1)
                        val=matrix_clip(val,1);
ee00388e:	0ffd7293          	zext.b	t0,s10
                        A[i*N+j] = val;
ee003892:	00589023          	sh	t0,0(a7)
                        seed = ( ( order * seed ) % 65536 );
ee003896:	03060633          	mul	a2,a2,a6
ee00389a:	01081893          	slli	a7,a6,0x10
ee00389e:	0108d313          	srli	t1,a7,0x10
                        A[i*N+j] = val;
ee0038a2:	00be0b33          	add	s6,t3,a1
                for (j=0; j<N; j++) {
ee0038a6:	0589                	addi	a1,a1,2
                        order++;
ee0038a8:	0805                	addi	a6,a6,1
                        seed = ( ( order * seed ) % 65536 );
ee0038aa:	41f65713          	srai	a4,a2,0x1f
ee0038ae:	01075793          	srli	a5,a4,0x10
ee0038b2:	00f60bb3          	add	s7,a2,a5
ee0038b6:	01dbfc33          	and	s8,s7,t4
ee0038ba:	40fc0633          	sub	a2,s8,a5
                        val = (seed + order);
ee0038be:	00c30cb3          	add	s9,t1,a2
ee0038c2:	010c9d13          	slli	s10,s9,0x10
ee0038c6:	010d5293          	srli	t0,s10,0x10
                        val =  (val + order);
ee0038ca:	006288b3          	add	a7,t0,t1
                        B[i*N+j] = val;
ee0038ce:	fe559f23          	sh	t0,-2(a1)
                        val=matrix_clip(val,1);
ee0038d2:	0ff8f313          	zext.b	t1,a7
                        A[i*N+j] = val;
ee0038d6:	006b1023          	sh	t1,0(s6)
                for (j=0; j<N; j++) {
ee0038da:	11e80263          	beq	a6,t5,ee0039de <core_init_matrix+0x2d6>
                        seed = ( ( order * seed ) % 65536 );
ee0038de:	03060633          	mul	a2,a2,a6
                        order++;
ee0038e2:	00280793          	addi	a5,a6,2
ee0038e6:	01079d13          	slli	s10,a5,0x10
ee0038ea:	010d5313          	srli	t1,s10,0x10
ee0038ee:	00180713          	addi	a4,a6,1
ee0038f2:	01071c13          	slli	s8,a4,0x10
ee0038f6:	01081b93          	slli	s7,a6,0x10
ee0038fa:	010bd293          	srli	t0,s7,0x10
                        A[i*N+j] = val;
ee0038fe:	00be0cb3          	add	s9,t3,a1
ee003902:	010c5b93          	srli	s7,s8,0x10
                        seed = ( ( order * seed ) % 65536 );
ee003906:	41f65d13          	srai	s10,a2,0x1f
ee00390a:	010d5d13          	srli	s10,s10,0x10
ee00390e:	966a                	add	a2,a2,s10
ee003910:	01d67633          	and	a2,a2,t4
ee003914:	41a60d33          	sub	s10,a2,s10
ee003918:	02ed0733          	mul	a4,s10,a4
                        val = (seed + order);
ee00391c:	01a28633          	add	a2,t0,s10
ee003920:	01061d13          	slli	s10,a2,0x10
ee003924:	010d5613          	srli	a2,s10,0x10
                        val =  (val + order);
ee003928:	92b2                	add	t0,t0,a2
                        B[i*N+j] = val;
ee00392a:	00c59023          	sh	a2,0(a1)
                        val=matrix_clip(val,1);
ee00392e:	0ff2fd13          	zext.b	s10,t0
                        A[i*N+j] = val;
ee003932:	01ac9023          	sh	s10,0(s9)
ee003936:	8c66                	mv	s8,s9
ee003938:	8666                	mv	a2,s9
ee00393a:	82e6                	mv	t0,s9
                        seed = ( ( order * seed ) % 65536 );
ee00393c:	41f75c93          	srai	s9,a4,0x1f
ee003940:	010cdd13          	srli	s10,s9,0x10
ee003944:	976a                	add	a4,a4,s10
ee003946:	01d77cb3          	and	s9,a4,t4
ee00394a:	41ac8d33          	sub	s10,s9,s10
ee00394e:	02fd07b3          	mul	a5,s10,a5
                        val = (seed + order);
ee003952:	01ab8733          	add	a4,s7,s10
ee003956:	01071c93          	slli	s9,a4,0x10
ee00395a:	010cdd13          	srli	s10,s9,0x10
                        val =  (val + order);
ee00395e:	9bea                	add	s7,s7,s10
                        B[i*N+j] = val;
ee003960:	01a59123          	sh	s10,2(a1)
                        val=matrix_clip(val,1);
ee003964:	0ffbf713          	zext.b	a4,s7
                        A[i*N+j] = val;
ee003968:	00ec1123          	sh	a4,2(s8)
                        order++;
ee00396c:	00380b13          	addi	s6,a6,3
ee003970:	010b1893          	slli	a7,s6,0x10
                        seed = ( ( order * seed ) % 65536 );
ee003974:	41f7dc13          	srai	s8,a5,0x1f
ee003978:	010c5c93          	srli	s9,s8,0x10
ee00397c:	97e6                	add	a5,a5,s9
ee00397e:	01d7fd33          	and	s10,a5,t4
ee003982:	419d0bb3          	sub	s7,s10,s9
ee003986:	036b8b33          	mul	s6,s7,s6
                        val = (seed + order);
ee00398a:	01730733          	add	a4,t1,s7
ee00398e:	01071c13          	slli	s8,a4,0x10
ee003992:	010c5c93          	srli	s9,s8,0x10
                        val =  (val + order);
ee003996:	9366                	add	t1,t1,s9
                        B[i*N+j] = val;
ee003998:	01959223          	sh	s9,4(a1)
                        val=matrix_clip(val,1);
ee00399c:	0ff37793          	zext.b	a5,t1
                        A[i*N+j] = val;
ee0039a0:	00f61223          	sh	a5,4(a2)
                        seed = ( ( order * seed ) % 65536 );
ee0039a4:	0108d893          	srli	a7,a7,0x10
                        order++;
ee0039a8:	0811                	addi	a6,a6,4
                        seed = ( ( order * seed ) % 65536 );
ee0039aa:	41fb5613          	srai	a2,s6,0x1f
ee0039ae:	01065d13          	srli	s10,a2,0x10
ee0039b2:	01ab0bb3          	add	s7,s6,s10
ee0039b6:	01dbfb33          	and	s6,s7,t4
ee0039ba:	41ab0633          	sub	a2,s6,s10
                        val = (seed + order);
ee0039be:	00c88733          	add	a4,a7,a2
ee0039c2:	01071c13          	slli	s8,a4,0x10
ee0039c6:	010c5c93          	srli	s9,s8,0x10
                        val =  (val + order);
ee0039ca:	98e6                	add	a7,a7,s9
                        val=matrix_clip(val,1);
ee0039cc:	0ff8f313          	zext.b	t1,a7
                        B[i*N+j] = val;
ee0039d0:	01959323          	sh	s9,6(a1)
                        A[i*N+j] = val;
ee0039d4:	00629323          	sh	t1,6(t0)
                for (j=0; j<N; j++) {
ee0039d8:	05a1                	addi	a1,a1,8
ee0039da:	f1e812e3          	bne	a6,t5,ee0038de <core_init_matrix+0x1d6>
        for (i=0; i<N; i++) {
ee0039de:	0385                	addi	t2,t2,1
                        order++;
ee0039e0:	00d50833          	add	a6,a0,a3
        for (i=0; i<N; i++) {
ee0039e4:	9f2a                	add	t5,t5,a0
ee0039e6:	9fca                	add	t6,t6,s2
ee0039e8:	e0a395e3          	bne	t2,a0,ee0037f2 <core_init_matrix+0xea>
        p->C=(MATRES *)align_mem(B+N*N);
ee0039ec:	008486b3          	add	a3,s1,s0
ee0039f0:	fff68813          	addi	a6,a3,-1
ee0039f4:	ffc87593          	andi	a1,a6,-4
ee0039f8:	00458413          	addi	s0,a1,4
ee0039fc:	0089a623          	sw	s0,12(s3)
}
ee003a00:	5432                	lw	s0,44(sp)
        p->A=A;
ee003a02:	0149a223          	sw	s4,4(s3)
        p->B=B;
ee003a06:	0099a423          	sw	s1,8(s3)
        p->N=N;
ee003a0a:	0159a023          	sw	s5,0(s3)
}
ee003a0e:	54a2                	lw	s1,40(sp)
ee003a10:	5912                	lw	s2,36(sp)
ee003a12:	5982                	lw	s3,32(sp)
ee003a14:	4a72                	lw	s4,28(sp)
ee003a16:	4ae2                	lw	s5,24(sp)
ee003a18:	4b52                	lw	s6,20(sp)
ee003a1a:	4bc2                	lw	s7,16(sp)
ee003a1c:	4c32                	lw	s8,12(sp)
ee003a1e:	4ca2                	lw	s9,8(sp)
ee003a20:	4d12                	lw	s10,4(sp)
ee003a22:	6145                	addi	sp,sp,48
ee003a24:	8082                	ret
        A=(MATDAT *)align_mem(memblk);
ee003a26:	fff58493          	addi	s1,a1,-1
ee003a2a:	ffc4f293          	andi	t0,s1,-4
ee003a2e:	00428e13          	addi	t3,t0,4
ee003a32:	8a72                	mv	s4,t3
        B=A+N*N;
ee003a34:	00628493          	addi	s1,t0,6
ee003a38:	5afd                	li	s5,-1
ee003a3a:	4409                	li	s0,2
ee003a3c:	557d                	li	a0,-1
ee003a3e:	bb71                	j	ee0037da <core_init_matrix+0xd2>

ee003a40 <matrix_sum>:
ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
ee003a40:	882a                	mv	a6,a0
        for (i=0; i<N; i++) {
ee003a42:	3e050963          	beqz	a0,ee003e34 <matrix_sum+0x3f4>
ee003a46:	00251313          	slli	t1,a0,0x2
ee003a4a:	40a008b3          	neg	a7,a0
ee003a4e:	00658733          	add	a4,a1,t1
        ee_s16 ret=0;
ee003a52:	4501                	li	a0,0
        for (i=0; i<N; i++) {
ee003a54:	4581                	li	a1,0
        MATRES tmp=0,prev=0,cur=0;
ee003a56:	4f81                	li	t6,0
ee003a58:	4e81                	li	t4,0
        for (i=0; i<N; i++) {
ee003a5a:	088e                	slli	a7,a7,0x3
                for (j=0; j<N; j++) {
ee003a5c:	406706b3          	sub	a3,a4,t1
ee003a60:	40d707b3          	sub	a5,a4,a3
ee003a64:	ffc78293          	addi	t0,a5,-4
ee003a68:	0022d393          	srli	t2,t0,0x2
ee003a6c:	00138e13          	addi	t3,t2,1
ee003a70:	007e7793          	andi	a5,t3,7
        MATRES tmp=0,prev=0,cur=0;
ee003a74:	8e36                	mv	t3,a3
ee003a76:	22078263          	beqz	a5,ee003c9a <matrix_sum+0x25a>
ee003a7a:	4f05                	li	t5,1
ee003a7c:	0fe78963          	beq	a5,t5,ee003b6e <matrix_sum+0x12e>
ee003a80:	4289                	li	t0,2
ee003a82:	0c578463          	beq	a5,t0,ee003b4a <matrix_sum+0x10a>
ee003a86:	438d                	li	t2,3
ee003a88:	0a778163          	beq	a5,t2,ee003b2a <matrix_sum+0xea>
ee003a8c:	4f11                	li	t5,4
ee003a8e:	07e78c63          	beq	a5,t5,ee003b06 <matrix_sum+0xc6>
ee003a92:	4295                	li	t0,5
ee003a94:	04578763          	beq	a5,t0,ee003ae2 <matrix_sum+0xa2>
ee003a98:	4399                	li	t2,6
ee003a9a:	02778463          	beq	a5,t2,ee003ac2 <matrix_sum+0x82>
                        cur=C[i*N+j];
ee003a9e:	8e7e                	mv	t3,t6
ee003aa0:	0006af83          	lw	t6,0(a3)
                                ret+=10;
ee003aa4:	0542                	slli	a0,a0,0x10
ee003aa6:	01055f13          	srli	t5,a0,0x10
                        tmp+=cur;
ee003aaa:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee003aac:	37d65b63          	bge	a2,t4,ee003e22 <matrix_sum+0x3e2>
                                ret+=10;
ee003ab0:	00af0e93          	addi	t4,t5,10
ee003ab4:	010e9e13          	slli	t3,t4,0x10
ee003ab8:	410e5513          	srai	a0,t3,0x10
                                tmp=0;
ee003abc:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee003abe:	00468e13          	addi	t3,a3,4
                        cur=C[i*N+j];
ee003ac2:	8f7e                	mv	t5,t6
ee003ac4:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee003ac8:	0542                	slli	a0,a0,0x10
ee003aca:	01055293          	srli	t0,a0,0x10
                        tmp+=cur;
ee003ace:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee003ad0:	35d65063          	bge	a2,t4,ee003e10 <matrix_sum+0x3d0>
                                ret+=10;
ee003ad4:	00a28e93          	addi	t4,t0,10
ee003ad8:	010e9513          	slli	a0,t4,0x10
ee003adc:	8541                	srai	a0,a0,0x10
                                tmp=0;
ee003ade:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee003ae0:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
ee003ae2:	82fe                	mv	t0,t6
ee003ae4:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee003ae8:	01051793          	slli	a5,a0,0x10
ee003aec:	0107d393          	srli	t2,a5,0x10
                        tmp+=cur;
ee003af0:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee003af2:	31d65663          	bge	a2,t4,ee003dfe <matrix_sum+0x3be>
                                ret+=10;
ee003af6:	00a38e93          	addi	t4,t2,10
ee003afa:	010e9793          	slli	a5,t4,0x10
ee003afe:	4107d513          	srai	a0,a5,0x10
                                tmp=0;
ee003b02:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee003b04:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
ee003b06:	83fe                	mv	t2,t6
ee003b08:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee003b0c:	01051f13          	slli	t5,a0,0x10
ee003b10:	010f5513          	srli	a0,t5,0x10
                        tmp+=cur;
ee003b14:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee003b16:	2dd65b63          	bge	a2,t4,ee003dec <matrix_sum+0x3ac>
                                ret+=10;
ee003b1a:	00a50e93          	addi	t4,a0,10
ee003b1e:	010e9f13          	slli	t5,t4,0x10
ee003b22:	410f5513          	srai	a0,t5,0x10
                                tmp=0;
ee003b26:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee003b28:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
ee003b2a:	82fe                	mv	t0,t6
ee003b2c:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee003b30:	0542                	slli	a0,a0,0x10
ee003b32:	01055793          	srli	a5,a0,0x10
                        tmp+=cur;
ee003b36:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee003b38:	2bd65163          	bge	a2,t4,ee003dda <matrix_sum+0x39a>
                                ret+=10;
ee003b3c:	00a78e93          	addi	t4,a5,10
ee003b40:	010e9513          	slli	a0,t4,0x10
ee003b44:	8541                	srai	a0,a0,0x10
                                tmp=0;
ee003b46:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee003b48:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
ee003b4a:	83fe                	mv	t2,t6
ee003b4c:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee003b50:	01051793          	slli	a5,a0,0x10
ee003b54:	0107d293          	srli	t0,a5,0x10
                        tmp+=cur;
ee003b58:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee003b5a:	27d65763          	bge	a2,t4,ee003dc8 <matrix_sum+0x388>
                                ret+=10;
ee003b5e:	00a28e93          	addi	t4,t0,10
ee003b62:	010e9793          	slli	a5,t4,0x10
ee003b66:	4107d513          	srai	a0,a5,0x10
                                tmp=0;
ee003b6a:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee003b6c:	0e11                	addi	t3,t3,4
                        cur=C[i*N+j];
ee003b6e:	82fe                	mv	t0,t6
ee003b70:	000e2f83          	lw	t6,0(t3)
                                ret+=10;
ee003b74:	01051f13          	slli	t5,a0,0x10
ee003b78:	010f5513          	srli	a0,t5,0x10
                        tmp+=cur;
ee003b7c:	9efe                	add	t4,t4,t6
                        if (tmp>clipval) {
ee003b7e:	23d65c63          	bge	a2,t4,ee003db6 <matrix_sum+0x376>
                                ret+=10;
ee003b82:	00a50e93          	addi	t4,a0,10
ee003b86:	010e9f13          	slli	t5,t4,0x10
ee003b8a:	410f5513          	srai	a0,t5,0x10
                                tmp=0;
ee003b8e:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee003b90:	0e11                	addi	t3,t3,4
ee003b92:	11c71463          	bne	a4,t3,ee003c9a <matrix_sum+0x25a>
        for (i=0; i<N; i++) {
ee003b96:	0585                	addi	a1,a1,1
ee003b98:	41168733          	sub	a4,a3,a7
ee003b9c:	ecb810e3          	bne	a6,a1,ee003a5c <matrix_sum+0x1c>
ee003ba0:	8082                	ret
                                ret += (cur>prev) ? 1 : 0;
ee003ba2:	007fafb3          	slt	t6,t6,t2
ee003ba6:	01f782b3          	add	t0,a5,t6
                        cur=C[i*N+j];
ee003baa:	004e2f83          	lw	t6,4(t3)
                                ret += (cur>prev) ? 1 : 0;
ee003bae:	01029f13          	slli	t5,t0,0x10
ee003bb2:	410f5793          	srai	a5,t5,0x10
                                ret+=10;
ee003bb6:	01079293          	slli	t0,a5,0x10
                        tmp+=cur;
ee003bba:	01fe8533          	add	a0,t4,t6
                for (j=0; j<N; j++) {
ee003bbe:	0e11                	addi	t3,t3,4
                                ret+=10;
ee003bc0:	0102d793          	srli	a5,t0,0x10
                        if (tmp>clipval) {
ee003bc4:	10a65563          	bge	a2,a0,ee003cce <matrix_sum+0x28e>
                        cur=C[i*N+j];
ee003bc8:	004e2383          	lw	t2,4(t3)
                                ret+=10;
ee003bcc:	07a9                	addi	a5,a5,10
ee003bce:	01079513          	slli	a0,a5,0x10
ee003bd2:	41055293          	srai	t0,a0,0x10
                                tmp=0;
ee003bd6:	4501                	li	a0,0
                                ret+=10;
ee003bd8:	01029f13          	slli	t5,t0,0x10
                        tmp+=cur;
ee003bdc:	007502b3          	add	t0,a0,t2
                                ret+=10;
ee003be0:	010f5e93          	srli	t4,t5,0x10
                        if (tmp>clipval) {
ee003be4:	10565763          	bge	a2,t0,ee003cf2 <matrix_sum+0x2b2>
                                ret+=10;
ee003be8:	0ea9                	addi	t4,t4,10
                        cur=C[i*N+j];
ee003bea:	008e2f83          	lw	t6,8(t3)
                                ret+=10;
ee003bee:	010e9293          	slli	t0,t4,0x10
ee003bf2:	4102df13          	srai	t5,t0,0x10
                                tmp=0;
ee003bf6:	4281                	li	t0,0
                                ret+=10;
ee003bf8:	010f1793          	slli	a5,t5,0x10
                        tmp+=cur;
ee003bfc:	01f28533          	add	a0,t0,t6
                                ret+=10;
ee003c00:	0107de93          	srli	t4,a5,0x10
                        if (tmp>clipval) {
ee003c04:	10a65963          	bge	a2,a0,ee003d16 <matrix_sum+0x2d6>
                        cur=C[i*N+j];
ee003c08:	00ce2383          	lw	t2,12(t3)
                                ret+=10;
ee003c0c:	0ea9                	addi	t4,t4,10
ee003c0e:	010e9513          	slli	a0,t4,0x10
ee003c12:	41055793          	srai	a5,a0,0x10
                                tmp=0;
ee003c16:	4501                	li	a0,0
                                ret+=10;
ee003c18:	01079f13          	slli	t5,a5,0x10
                        tmp+=cur;
ee003c1c:	951e                	add	a0,a0,t2
                                ret+=10;
ee003c1e:	010f5293          	srli	t0,t5,0x10
                        if (tmp>clipval) {
ee003c22:	10a65b63          	bge	a2,a0,ee003d38 <matrix_sum+0x2f8>
                                ret+=10;
ee003c26:	02a9                	addi	t0,t0,10
                        cur=C[i*N+j];
ee003c28:	010e2f83          	lw	t6,16(t3)
                                ret+=10;
ee003c2c:	01029513          	slli	a0,t0,0x10
ee003c30:	41055f13          	srai	t5,a0,0x10
                                tmp=0;
ee003c34:	4501                	li	a0,0
                                ret+=10;
ee003c36:	010f1793          	slli	a5,t5,0x10
                        tmp+=cur;
ee003c3a:	01f502b3          	add	t0,a0,t6
                                ret+=10;
ee003c3e:	0107de93          	srli	t4,a5,0x10
                        if (tmp>clipval) {
ee003c42:	10565d63          	bge	a2,t0,ee003d5c <matrix_sum+0x31c>
                        cur=C[i*N+j];
ee003c46:	014e2383          	lw	t2,20(t3)
                                ret+=10;
ee003c4a:	0ea9                	addi	t4,t4,10
ee003c4c:	010e9293          	slli	t0,t4,0x10
ee003c50:	4102d793          	srai	a5,t0,0x10
                                tmp=0;
ee003c54:	4281                	li	t0,0
                                ret+=10;
ee003c56:	01079f13          	slli	t5,a5,0x10
                        tmp+=cur;
ee003c5a:	00728533          	add	a0,t0,t2
                                ret+=10;
ee003c5e:	010f5793          	srli	a5,t5,0x10
                        if (tmp>clipval) {
ee003c62:	10a65f63          	bge	a2,a0,ee003d80 <matrix_sum+0x340>
                                ret+=10;
ee003c66:	07a9                	addi	a5,a5,10
ee003c68:	01079513          	slli	a0,a5,0x10
                        cur=C[i*N+j];
ee003c6c:	018e2f83          	lw	t6,24(t3)
                                ret+=10;
ee003c70:	41055f13          	srai	t5,a0,0x10
ee003c74:	010f1e93          	slli	t4,t5,0x10
                                tmp=0;
ee003c78:	4501                	li	a0,0
                                ret+=10;
ee003c7a:	010ed293          	srli	t0,t4,0x10
                        tmp+=cur;
ee003c7e:	01f50eb3          	add	t4,a0,t6
                        if (tmp>clipval) {
ee003c82:	13d65163          	bge	a2,t4,ee003da4 <matrix_sum+0x364>
                                ret+=10;
ee003c86:	00a28513          	addi	a0,t0,10
ee003c8a:	01051293          	slli	t0,a0,0x10
ee003c8e:	4102d513          	srai	a0,t0,0x10
                                tmp=0;
ee003c92:	4e81                	li	t4,0
                for (j=0; j<N; j++) {
ee003c94:	0e71                	addi	t3,t3,28
ee003c96:	f1c700e3          	beq	a4,t3,ee003b96 <matrix_sum+0x156>
                        cur=C[i*N+j];
ee003c9a:	000e2383          	lw	t2,0(t3)
                                ret+=10;
ee003c9e:	0542                	slli	a0,a0,0x10
ee003ca0:	01055793          	srli	a5,a0,0x10
                        tmp+=cur;
ee003ca4:	9e9e                	add	t4,t4,t2
                        if (tmp>clipval) {
ee003ca6:	efd65ee3          	bge	a2,t4,ee003ba2 <matrix_sum+0x162>
                                ret+=10;
ee003caa:	00a78e93          	addi	t4,a5,10
                        cur=C[i*N+j];
ee003cae:	004e2f83          	lw	t6,4(t3)
                                ret+=10;
ee003cb2:	010e9513          	slli	a0,t4,0x10
ee003cb6:	41055793          	srai	a5,a0,0x10
                                tmp=0;
ee003cba:	4e81                	li	t4,0
                                ret+=10;
ee003cbc:	01079293          	slli	t0,a5,0x10
                        tmp+=cur;
ee003cc0:	01fe8533          	add	a0,t4,t6
                for (j=0; j<N; j++) {
ee003cc4:	0e11                	addi	t3,t3,4
                                ret+=10;
ee003cc6:	0102d793          	srli	a5,t0,0x10
                        if (tmp>clipval) {
ee003cca:	eea64fe3          	blt	a2,a0,ee003bc8 <matrix_sum+0x188>
                                ret += (cur>prev) ? 1 : 0;
ee003cce:	01f3a3b3          	slt	t2,t2,t6
ee003cd2:	00778f33          	add	t5,a5,t2
                        cur=C[i*N+j];
ee003cd6:	004e2383          	lw	t2,4(t3)
                                ret += (cur>prev) ? 1 : 0;
ee003cda:	010f1e93          	slli	t4,t5,0x10
ee003cde:	410ed293          	srai	t0,t4,0x10
                                ret+=10;
ee003ce2:	01029f13          	slli	t5,t0,0x10
                        tmp+=cur;
ee003ce6:	007502b3          	add	t0,a0,t2
                                ret+=10;
ee003cea:	010f5e93          	srli	t4,t5,0x10
                        if (tmp>clipval) {
ee003cee:	ee564de3          	blt	a2,t0,ee003be8 <matrix_sum+0x1a8>
                                ret += (cur>prev) ? 1 : 0;
ee003cf2:	007fafb3          	slt	t6,t6,t2
ee003cf6:	01fe87b3          	add	a5,t4,t6
                        cur=C[i*N+j];
ee003cfa:	008e2f83          	lw	t6,8(t3)
                                ret += (cur>prev) ? 1 : 0;
ee003cfe:	01079513          	slli	a0,a5,0x10
ee003d02:	41055f13          	srai	t5,a0,0x10
                                ret+=10;
ee003d06:	010f1793          	slli	a5,t5,0x10
                        tmp+=cur;
ee003d0a:	01f28533          	add	a0,t0,t6
                                ret+=10;
ee003d0e:	0107de93          	srli	t4,a5,0x10
                        if (tmp>clipval) {
ee003d12:	eea64be3          	blt	a2,a0,ee003c08 <matrix_sum+0x1c8>
                                ret += (cur>prev) ? 1 : 0;
ee003d16:	01f3a3b3          	slt	t2,t2,t6
ee003d1a:	007e8f33          	add	t5,t4,t2
                        cur=C[i*N+j];
ee003d1e:	00ce2383          	lw	t2,12(t3)
                                ret += (cur>prev) ? 1 : 0;
ee003d22:	010f1293          	slli	t0,t5,0x10
ee003d26:	4102d793          	srai	a5,t0,0x10
                                ret+=10;
ee003d2a:	01079f13          	slli	t5,a5,0x10
                        tmp+=cur;
ee003d2e:	951e                	add	a0,a0,t2
                                ret+=10;
ee003d30:	010f5293          	srli	t0,t5,0x10
                        if (tmp>clipval) {
ee003d34:	eea649e3          	blt	a2,a0,ee003c26 <matrix_sum+0x1e6>
                                ret += (cur>prev) ? 1 : 0;
ee003d38:	007fafb3          	slt	t6,t6,t2
ee003d3c:	01f287b3          	add	a5,t0,t6
                        cur=C[i*N+j];
ee003d40:	010e2f83          	lw	t6,16(t3)
                                ret += (cur>prev) ? 1 : 0;
ee003d44:	01079e93          	slli	t4,a5,0x10
ee003d48:	410edf13          	srai	t5,t4,0x10
                                ret+=10;
ee003d4c:	010f1793          	slli	a5,t5,0x10
                        tmp+=cur;
ee003d50:	01f502b3          	add	t0,a0,t6
                                ret+=10;
ee003d54:	0107de93          	srli	t4,a5,0x10
                        if (tmp>clipval) {
ee003d58:	ee5647e3          	blt	a2,t0,ee003c46 <matrix_sum+0x206>
                                ret += (cur>prev) ? 1 : 0;
ee003d5c:	01f3a3b3          	slt	t2,t2,t6
ee003d60:	007e8f33          	add	t5,t4,t2
                        cur=C[i*N+j];
ee003d64:	014e2383          	lw	t2,20(t3)
                                ret += (cur>prev) ? 1 : 0;
ee003d68:	010f1513          	slli	a0,t5,0x10
ee003d6c:	41055793          	srai	a5,a0,0x10
                                ret+=10;
ee003d70:	01079f13          	slli	t5,a5,0x10
                        tmp+=cur;
ee003d74:	00728533          	add	a0,t0,t2
                                ret+=10;
ee003d78:	010f5793          	srli	a5,t5,0x10
                        if (tmp>clipval) {
ee003d7c:	eea645e3          	blt	a2,a0,ee003c66 <matrix_sum+0x226>
                                ret += (cur>prev) ? 1 : 0;
ee003d80:	007fafb3          	slt	t6,t6,t2
ee003d84:	01f78eb3          	add	t4,a5,t6
ee003d88:	010e9293          	slli	t0,t4,0x10
                        cur=C[i*N+j];
ee003d8c:	018e2f83          	lw	t6,24(t3)
                                ret += (cur>prev) ? 1 : 0;
ee003d90:	4102df13          	srai	t5,t0,0x10
                                ret+=10;
ee003d94:	010f1e93          	slli	t4,t5,0x10
ee003d98:	010ed293          	srli	t0,t4,0x10
                        tmp+=cur;
ee003d9c:	01f50eb3          	add	t4,a0,t6
                        if (tmp>clipval) {
ee003da0:	efd643e3          	blt	a2,t4,ee003c86 <matrix_sum+0x246>
                                ret += (cur>prev) ? 1 : 0;
ee003da4:	01f3a3b3          	slt	t2,t2,t6
ee003da8:	00728f33          	add	t5,t0,t2
ee003dac:	010f1793          	slli	a5,t5,0x10
ee003db0:	4107d513          	srai	a0,a5,0x10
ee003db4:	b5c5                	j	ee003c94 <matrix_sum+0x254>
ee003db6:	01f2a3b3          	slt	t2,t0,t6
ee003dba:	007507b3          	add	a5,a0,t2
ee003dbe:	01079293          	slli	t0,a5,0x10
ee003dc2:	4102d513          	srai	a0,t0,0x10
ee003dc6:	b3e9                	j	ee003b90 <matrix_sum+0x150>
ee003dc8:	01f3af33          	slt	t5,t2,t6
ee003dcc:	01e28533          	add	a0,t0,t5
ee003dd0:	01051393          	slli	t2,a0,0x10
ee003dd4:	4103d513          	srai	a0,t2,0x10
ee003dd8:	bb51                	j	ee003b6c <matrix_sum+0x12c>
ee003dda:	01f2a3b3          	slt	t2,t0,t6
ee003dde:	00778f33          	add	t5,a5,t2
ee003de2:	010f1293          	slli	t0,t5,0x10
ee003de6:	4102d513          	srai	a0,t0,0x10
ee003dea:	bbb9                	j	ee003b48 <matrix_sum+0x108>
ee003dec:	01f3a2b3          	slt	t0,t2,t6
ee003df0:	005507b3          	add	a5,a0,t0
ee003df4:	01079393          	slli	t2,a5,0x10
ee003df8:	4103d513          	srai	a0,t2,0x10
ee003dfc:	b335                	j	ee003b28 <matrix_sum+0xe8>
ee003dfe:	01f2af33          	slt	t5,t0,t6
ee003e02:	01e38533          	add	a0,t2,t5
ee003e06:	01051293          	slli	t0,a0,0x10
ee003e0a:	4102d513          	srai	a0,t0,0x10
ee003e0e:	b9dd                	j	ee003b04 <matrix_sum+0xc4>
ee003e10:	01ff27b3          	slt	a5,t5,t6
ee003e14:	00f283b3          	add	t2,t0,a5
ee003e18:	01039f13          	slli	t5,t2,0x10
ee003e1c:	410f5513          	srai	a0,t5,0x10
ee003e20:	b1c1                	j	ee003ae0 <matrix_sum+0xa0>
ee003e22:	01fe27b3          	slt	a5,t3,t6
ee003e26:	00ff02b3          	add	t0,t5,a5
ee003e2a:	01029393          	slli	t2,t0,0x10
ee003e2e:	4103d513          	srai	a0,t2,0x10
ee003e32:	b171                	j	ee003abe <matrix_sum+0x7e>
        ee_s16 ret=0;
ee003e34:	4501                	li	a0,0
}
ee003e36:	8082                	ret

ee003e38 <matrix_mul_const>:
        for (i=0; i<N; i++) {
ee003e38:	16050063          	beqz	a0,ee003f98 <matrix_mul_const+0x160>
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
ee003e3c:	1141                	addi	sp,sp,-16
ee003e3e:	c622                	sw	s0,12(sp)
ee003e40:	40a003b3          	neg	t2,a0
ee003e44:	00151413          	slli	s0,a0,0x1
ee003e48:	c426                	sw	s1,8(sp)
ee003e4a:	c24a                	sw	s2,4(sp)
ee003e4c:	c04e                	sw	s3,0(sp)
ee003e4e:	00860833          	add	a6,a2,s0
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003e52:	4f81                	li	t6,0
        for (i=0; i<N; i++) {
ee003e54:	4281                	li	t0,0
ee003e56:	038a                	slli	t2,t2,0x2
                for (j=0; j<N; j++) {
ee003e58:	408808b3          	sub	a7,a6,s0
ee003e5c:	41180633          	sub	a2,a6,a7
ee003e60:	ffe60313          	addi	t1,a2,-2
ee003e64:	00135493          	srli	s1,t1,0x1
ee003e68:	00148713          	addi	a4,s1,1
ee003e6c:	002f9793          	slli	a5,t6,0x2
ee003e70:	00777913          	andi	s2,a4,7
ee003e74:	97ae                	add	a5,a5,a1
void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
ee003e76:	8746                	mv	a4,a7
ee003e78:	08090f63          	beqz	s2,ee003f16 <matrix_mul_const+0xde>
ee003e7c:	4985                	li	s3,1
ee003e7e:	09390263          	beq	s2,s3,ee003f02 <matrix_mul_const+0xca>
ee003e82:	4e09                	li	t3,2
ee003e84:	07c90763          	beq	s2,t3,ee003ef2 <matrix_mul_const+0xba>
ee003e88:	4e8d                	li	t4,3
ee003e8a:	05d90c63          	beq	s2,t4,ee003ee2 <matrix_mul_const+0xaa>
ee003e8e:	4f11                	li	t5,4
ee003e90:	05e90163          	beq	s2,t5,ee003ed2 <matrix_mul_const+0x9a>
ee003e94:	4615                	li	a2,5
ee003e96:	02c90663          	beq	s2,a2,ee003ec2 <matrix_mul_const+0x8a>
ee003e9a:	4319                	li	t1,6
ee003e9c:	00690b63          	beq	s2,t1,ee003eb2 <matrix_mul_const+0x7a>
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003ea0:	00089483          	lh	s1,0(a7)
                for (j=0; j<N; j++) {
ee003ea4:	00288713          	addi	a4,a7,2
ee003ea8:	0791                	addi	a5,a5,4
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003eaa:	02d48933          	mul	s2,s1,a3
ee003eae:	ff27ae23          	sw	s2,-4(a5)
ee003eb2:	00071983          	lh	s3,0(a4)
                for (j=0; j<N; j++) {
ee003eb6:	0791                	addi	a5,a5,4
ee003eb8:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003eba:	02d98e33          	mul	t3,s3,a3
ee003ebe:	ffc7ae23          	sw	t3,-4(a5)
ee003ec2:	00071e83          	lh	t4,0(a4)
                for (j=0; j<N; j++) {
ee003ec6:	0791                	addi	a5,a5,4
ee003ec8:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003eca:	02de8f33          	mul	t5,t4,a3
ee003ece:	ffe7ae23          	sw	t5,-4(a5)
ee003ed2:	00071603          	lh	a2,0(a4)
                for (j=0; j<N; j++) {
ee003ed6:	0791                	addi	a5,a5,4
ee003ed8:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003eda:	02d60333          	mul	t1,a2,a3
ee003ede:	fe67ae23          	sw	t1,-4(a5)
ee003ee2:	00071483          	lh	s1,0(a4)
                for (j=0; j<N; j++) {
ee003ee6:	0791                	addi	a5,a5,4
ee003ee8:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003eea:	02d48933          	mul	s2,s1,a3
ee003eee:	ff27ae23          	sw	s2,-4(a5)
ee003ef2:	00071983          	lh	s3,0(a4)
                for (j=0; j<N; j++) {
ee003ef6:	0791                	addi	a5,a5,4
ee003ef8:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003efa:	02d98e33          	mul	t3,s3,a3
ee003efe:	ffc7ae23          	sw	t3,-4(a5)
ee003f02:	00071e83          	lh	t4,0(a4)
                for (j=0; j<N; j++) {
ee003f06:	0791                	addi	a5,a5,4
ee003f08:	0709                	addi	a4,a4,2
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003f0a:	02de8f33          	mul	t5,t4,a3
ee003f0e:	ffe7ae23          	sw	t5,-4(a5)
                for (j=0; j<N; j++) {
ee003f12:	06e80763          	beq	a6,a4,ee003f80 <matrix_mul_const+0x148>
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003f16:	00071983          	lh	s3,0(a4)
ee003f1a:	00271903          	lh	s2,2(a4)
ee003f1e:	00471483          	lh	s1,4(a4)
ee003f22:	00671f03          	lh	t5,6(a4)
ee003f26:	00871e83          	lh	t4,8(a4)
ee003f2a:	00a71e03          	lh	t3,10(a4)
ee003f2e:	00c71303          	lh	t1,12(a4)
ee003f32:	00e71603          	lh	a2,14(a4)
ee003f36:	02d989b3          	mul	s3,s3,a3
                for (j=0; j<N; j++) {
ee003f3a:	0741                	addi	a4,a4,16
ee003f3c:	02078793          	addi	a5,a5,32
                        C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
ee003f40:	02d90933          	mul	s2,s2,a3
ee003f44:	ff37a023          	sw	s3,-32(a5)
ee003f48:	02d484b3          	mul	s1,s1,a3
ee003f4c:	ff27a223          	sw	s2,-28(a5)
ee003f50:	02df0f33          	mul	t5,t5,a3
ee003f54:	fe97a423          	sw	s1,-24(a5)
ee003f58:	02de8eb3          	mul	t4,t4,a3
ee003f5c:	ffe7a623          	sw	t5,-20(a5)
ee003f60:	02de0e33          	mul	t3,t3,a3
ee003f64:	ffd7a823          	sw	t4,-16(a5)
ee003f68:	02d30333          	mul	t1,t1,a3
ee003f6c:	ffc7aa23          	sw	t3,-12(a5)
ee003f70:	02d60633          	mul	a2,a2,a3
ee003f74:	fe67ac23          	sw	t1,-8(a5)
ee003f78:	fec7ae23          	sw	a2,-4(a5)
                for (j=0; j<N; j++) {
ee003f7c:	f8e81de3          	bne	a6,a4,ee003f16 <matrix_mul_const+0xde>
        for (i=0; i<N; i++) {
ee003f80:	0285                	addi	t0,t0,1
ee003f82:	9faa                	add	t6,t6,a0
ee003f84:	40788833          	sub	a6,a7,t2
ee003f88:	ec5518e3          	bne	a0,t0,ee003e58 <matrix_mul_const+0x20>
}
ee003f8c:	4432                	lw	s0,12(sp)
ee003f8e:	44a2                	lw	s1,8(sp)
ee003f90:	4912                	lw	s2,4(sp)
ee003f92:	4982                	lw	s3,0(sp)
ee003f94:	0141                	addi	sp,sp,16
ee003f96:	8082                	ret
ee003f98:	8082                	ret

ee003f9a <matrix_add_const>:
        for (i=0; i<N; i++) {
ee003f9a:	1c050e63          	beqz	a0,ee004176 <matrix_add_const+0x1dc>
                        A[i*N+j] += val;
ee003f9e:	01061693          	slli	a3,a2,0x10
ee003fa2:	00151393          	slli	t2,a0,0x1
ee003fa6:	40a002b3          	neg	t0,a0
ee003faa:	82c1                	srli	a3,a3,0x10
ee003fac:	00758633          	add	a2,a1,t2
        for (i=0; i<N; i++) {
ee003fb0:	4f81                	li	t6,0
ee003fb2:	028a                	slli	t0,t0,0x2
                for (j=0; j<N; j++) {
ee003fb4:	407605b3          	sub	a1,a2,t2
ee003fb8:	40b60733          	sub	a4,a2,a1
ee003fbc:	ffe70313          	addi	t1,a4,-2
ee003fc0:	00135793          	srli	a5,t1,0x1
ee003fc4:	00178813          	addi	a6,a5,1
ee003fc8:	00787893          	andi	a7,a6,7
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
ee003fcc:	87ae                	mv	a5,a1
ee003fce:	08088863          	beqz	a7,ee00405e <matrix_add_const+0xc4>
ee003fd2:	4e05                	li	t3,1
ee003fd4:	07c88c63          	beq	a7,t3,ee00404c <matrix_add_const+0xb2>
ee003fd8:	4e89                	li	t4,2
ee003fda:	07d88263          	beq	a7,t4,ee00403e <matrix_add_const+0xa4>
ee003fde:	4f0d                	li	t5,3
ee003fe0:	05e88863          	beq	a7,t5,ee004030 <matrix_add_const+0x96>
ee003fe4:	4711                	li	a4,4
ee003fe6:	02e88e63          	beq	a7,a4,ee004022 <matrix_add_const+0x88>
ee003fea:	4315                	li	t1,5
ee003fec:	02688463          	beq	a7,t1,ee004014 <matrix_add_const+0x7a>
ee003ff0:	4819                	li	a6,6
ee003ff2:	01088a63          	beq	a7,a6,ee004006 <matrix_add_const+0x6c>
                        A[i*N+j] += val;
ee003ff6:	0005d883          	lhu	a7,0(a1)
                for (j=0; j<N; j++) {
ee003ffa:	00258793          	addi	a5,a1,2
                        A[i*N+j] += val;
ee003ffe:	01168e33          	add	t3,a3,a7
ee004002:	01c59023          	sh	t3,0(a1)
ee004006:	0007de83          	lhu	t4,0(a5)
                for (j=0; j<N; j++) {
ee00400a:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee00400c:	01d68f33          	add	t5,a3,t4
ee004010:	ffe79f23          	sh	t5,-2(a5)
ee004014:	0007d703          	lhu	a4,0(a5)
                for (j=0; j<N; j++) {
ee004018:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee00401a:	00e68333          	add	t1,a3,a4
ee00401e:	fe679f23          	sh	t1,-2(a5)
ee004022:	0007d803          	lhu	a6,0(a5)
                for (j=0; j<N; j++) {
ee004026:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee004028:	010688b3          	add	a7,a3,a6
ee00402c:	ff179f23          	sh	a7,-2(a5)
ee004030:	0007de03          	lhu	t3,0(a5)
                for (j=0; j<N; j++) {
ee004034:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee004036:	01c68eb3          	add	t4,a3,t3
ee00403a:	ffd79f23          	sh	t4,-2(a5)
ee00403e:	0007df03          	lhu	t5,0(a5)
                for (j=0; j<N; j++) {
ee004042:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee004044:	01e68733          	add	a4,a3,t5
ee004048:	fee79f23          	sh	a4,-2(a5)
ee00404c:	0007d303          	lhu	t1,0(a5)
                for (j=0; j<N; j++) {
ee004050:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee004052:	00668833          	add	a6,a3,t1
ee004056:	ff079f23          	sh	a6,-2(a5)
                for (j=0; j<N; j++) {
ee00405a:	10f60963          	beq	a2,a5,ee00416c <matrix_add_const+0x1d2>
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
ee00405e:	1141                	addi	sp,sp,-16
ee004060:	c622                	sw	s0,12(sp)
                        A[i*N+j] += val;
ee004062:	0007d403          	lhu	s0,0(a5)
ee004066:	0027df03          	lhu	t5,2(a5)
ee00406a:	0047de83          	lhu	t4,4(a5)
ee00406e:	0067de03          	lhu	t3,6(a5)
ee004072:	0087d303          	lhu	t1,8(a5)
ee004076:	00a7d883          	lhu	a7,10(a5)
ee00407a:	00c7d803          	lhu	a6,12(a5)
ee00407e:	00e7d703          	lhu	a4,14(a5)
ee004082:	9436                	add	s0,s0,a3
ee004084:	9f36                	add	t5,t5,a3
ee004086:	9eb6                	add	t4,t4,a3
ee004088:	9e36                	add	t3,t3,a3
ee00408a:	9336                	add	t1,t1,a3
ee00408c:	98b6                	add	a7,a7,a3
ee00408e:	9836                	add	a6,a6,a3
ee004090:	9736                	add	a4,a4,a3
ee004092:	00879023          	sh	s0,0(a5)
ee004096:	01e79123          	sh	t5,2(a5)
ee00409a:	01d79223          	sh	t4,4(a5)
ee00409e:	01c79323          	sh	t3,6(a5)
ee0040a2:	00679423          	sh	t1,8(a5)
ee0040a6:	01179523          	sh	a7,10(a5)
ee0040aa:	01079623          	sh	a6,12(a5)
ee0040ae:	00e79723          	sh	a4,14(a5)
                for (j=0; j<N; j++) {
ee0040b2:	07c1                	addi	a5,a5,16
ee0040b4:	faf617e3          	bne	a2,a5,ee004062 <matrix_add_const+0xc8>
        for (i=0; i<N; i++) {
ee0040b8:	0f85                	addi	t6,t6,1
ee0040ba:	40558633          	sub	a2,a1,t0
ee0040be:	0bf50463          	beq	a0,t6,ee004166 <matrix_add_const+0x1cc>
                for (j=0; j<N; j++) {
ee0040c2:	407605b3          	sub	a1,a2,t2
ee0040c6:	40b607b3          	sub	a5,a2,a1
ee0040ca:	ffe78413          	addi	s0,a5,-2
ee0040ce:	00145f13          	srli	t5,s0,0x1
ee0040d2:	001f0e93          	addi	t4,t5,1
ee0040d6:	007efe13          	andi	t3,t4,7
void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
ee0040da:	87ae                	mv	a5,a1
ee0040dc:	f80e03e3          	beqz	t3,ee004062 <matrix_add_const+0xc8>
ee0040e0:	4305                	li	t1,1
ee0040e2:	066e0463          	beq	t3,t1,ee00414a <matrix_add_const+0x1b0>
ee0040e6:	4889                	li	a7,2
ee0040e8:	051e0a63          	beq	t3,a7,ee00413c <matrix_add_const+0x1a2>
ee0040ec:	480d                	li	a6,3
ee0040ee:	050e0063          	beq	t3,a6,ee00412e <matrix_add_const+0x194>
ee0040f2:	4711                	li	a4,4
ee0040f4:	02ee0663          	beq	t3,a4,ee004120 <matrix_add_const+0x186>
ee0040f8:	4415                	li	s0,5
ee0040fa:	008e0c63          	beq	t3,s0,ee004112 <matrix_add_const+0x178>
ee0040fe:	4f19                	li	t5,6
ee004100:	07ee1c63          	bne	t3,t5,ee004178 <matrix_add_const+0x1de>
                        A[i*N+j] += val;
ee004104:	0007d303          	lhu	t1,0(a5)
                for (j=0; j<N; j++) {
ee004108:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee00410a:	006688b3          	add	a7,a3,t1
ee00410e:	ff179f23          	sh	a7,-2(a5)
ee004112:	0007d803          	lhu	a6,0(a5)
                for (j=0; j<N; j++) {
ee004116:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee004118:	01068733          	add	a4,a3,a6
ee00411c:	fee79f23          	sh	a4,-2(a5)
ee004120:	0007d403          	lhu	s0,0(a5)
                for (j=0; j<N; j++) {
ee004124:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee004126:	00868f33          	add	t5,a3,s0
ee00412a:	ffe79f23          	sh	t5,-2(a5)
ee00412e:	0007de83          	lhu	t4,0(a5)
                for (j=0; j<N; j++) {
ee004132:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee004134:	01d68e33          	add	t3,a3,t4
ee004138:	ffc79f23          	sh	t3,-2(a5)
ee00413c:	0007d303          	lhu	t1,0(a5)
                for (j=0; j<N; j++) {
ee004140:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee004142:	006688b3          	add	a7,a3,t1
ee004146:	ff179f23          	sh	a7,-2(a5)
ee00414a:	0007d803          	lhu	a6,0(a5)
                for (j=0; j<N; j++) {
ee00414e:	0789                	addi	a5,a5,2
                        A[i*N+j] += val;
ee004150:	01068733          	add	a4,a3,a6
ee004154:	fee79f23          	sh	a4,-2(a5)
                for (j=0; j<N; j++) {
ee004158:	f0f615e3          	bne	a2,a5,ee004062 <matrix_add_const+0xc8>
        for (i=0; i<N; i++) {
ee00415c:	0f85                	addi	t6,t6,1
ee00415e:	40558633          	sub	a2,a1,t0
ee004162:	f7f510e3          	bne	a0,t6,ee0040c2 <matrix_add_const+0x128>
}
ee004166:	4432                	lw	s0,12(sp)
ee004168:	0141                	addi	sp,sp,16
ee00416a:	8082                	ret
        for (i=0; i<N; i++) {
ee00416c:	0f85                	addi	t6,t6,1
ee00416e:	40558633          	sub	a2,a1,t0
ee004172:	e5f511e3          	bne	a0,t6,ee003fb4 <matrix_add_const+0x1a>
ee004176:	8082                	ret
                        A[i*N+j] += val;
ee004178:	0005de83          	lhu	t4,0(a1)
                for (j=0; j<N; j++) {
ee00417c:	00258793          	addi	a5,a1,2
                        A[i*N+j] += val;
ee004180:	01d68e33          	add	t3,a3,t4
ee004184:	01c59023          	sh	t3,0(a1)
                for (j=0; j<N; j++) {
ee004188:	bfb5                	j	ee004104 <matrix_add_const+0x16a>

ee00418a <matrix_mul_vect>:
        for (i=0; i<N; i++) {
ee00418a:	18050d63          	beqz	a0,ee004324 <matrix_mul_vect+0x19a>
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
ee00418e:	7179                	addi	sp,sp,-48
ee004190:	00251e93          	slli	t4,a0,0x2
ee004194:	00151313          	slli	t1,a0,0x1
ee004198:	d622                	sw	s0,44(sp)
ee00419a:	d426                	sw	s1,40(sp)
ee00419c:	d24a                	sw	s2,36(sp)
ee00419e:	d04e                	sw	s3,32(sp)
ee0041a0:	ce52                	sw	s4,28(sp)
ee0041a2:	cc56                	sw	s5,24(sp)
ee0041a4:	ca5a                	sw	s6,20(sp)
ee0041a6:	c85e                	sw	s7,16(sp)
ee0041a8:	c662                	sw	s8,12(sp)
ee0041aa:	c466                	sw	s9,8(sp)
ee0041ac:	88ae                	mv	a7,a1
ee0041ae:	9eae                	add	t4,t4,a1
ee0041b0:	9336                	add	t1,t1,a3
        for (i=0; i<N; i++) {
ee0041b2:	4e01                	li	t3,0
                for (j=0; j<N; j++) {
ee0041b4:	40d305b3          	sub	a1,t1,a3
ee0041b8:	ffe58293          	addi	t0,a1,-2
ee0041bc:	0012d393          	srli	t2,t0,0x1
ee0041c0:	00138413          	addi	s0,t2,1
ee0041c4:	001e1793          	slli	a5,t3,0x1
ee0041c8:	00747493          	andi	s1,s0,7
ee0041cc:	97b2                	add	a5,a5,a2
        for (i=0; i<N; i++) {
ee0041ce:	8736                	mv	a4,a3
ee0041d0:	4801                	li	a6,0
ee0041d2:	c4c5                	beqz	s1,ee00427a <matrix_mul_vect+0xf0>
ee0041d4:	4f05                	li	t5,1
ee0041d6:	09e48763          	beq	s1,t5,ee004264 <matrix_mul_vect+0xda>
ee0041da:	4909                	li	s2,2
ee0041dc:	07248b63          	beq	s1,s2,ee004252 <matrix_mul_vect+0xc8>
ee0041e0:	498d                	li	s3,3
ee0041e2:	05348f63          	beq	s1,s3,ee004240 <matrix_mul_vect+0xb6>
ee0041e6:	4a11                	li	s4,4
ee0041e8:	05448363          	beq	s1,s4,ee00422e <matrix_mul_vect+0xa4>
ee0041ec:	4a95                	li	s5,5
ee0041ee:	03548763          	beq	s1,s5,ee00421c <matrix_mul_vect+0x92>
ee0041f2:	4b19                	li	s6,6
ee0041f4:	01648b63          	beq	s1,s6,ee00420a <matrix_mul_vect+0x80>
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee0041f8:	00079803          	lh	a6,0(a5)
ee0041fc:	00069b83          	lh	s7,0(a3)
                for (j=0; j<N; j++) {
ee004200:	0789                	addi	a5,a5,2
ee004202:	00268713          	addi	a4,a3,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee004206:	03780833          	mul	a6,a6,s7
ee00420a:	00079c03          	lh	s8,0(a5)
ee00420e:	00071c83          	lh	s9,0(a4)
                for (j=0; j<N; j++) {
ee004212:	0789                	addi	a5,a5,2
ee004214:	0709                	addi	a4,a4,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee004216:	039c0fb3          	mul	t6,s8,s9
ee00421a:	987e                	add	a6,a6,t6
ee00421c:	00079583          	lh	a1,0(a5)
ee004220:	00071283          	lh	t0,0(a4)
                for (j=0; j<N; j++) {
ee004224:	0789                	addi	a5,a5,2
ee004226:	0709                	addi	a4,a4,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee004228:	025583b3          	mul	t2,a1,t0
ee00422c:	981e                	add	a6,a6,t2
ee00422e:	00079403          	lh	s0,0(a5)
ee004232:	00071483          	lh	s1,0(a4)
                for (j=0; j<N; j++) {
ee004236:	0789                	addi	a5,a5,2
ee004238:	0709                	addi	a4,a4,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee00423a:	02940f33          	mul	t5,s0,s1
ee00423e:	987a                	add	a6,a6,t5
ee004240:	00079903          	lh	s2,0(a5)
ee004244:	00071983          	lh	s3,0(a4)
                for (j=0; j<N; j++) {
ee004248:	0789                	addi	a5,a5,2
ee00424a:	0709                	addi	a4,a4,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee00424c:	03390a33          	mul	s4,s2,s3
ee004250:	9852                	add	a6,a6,s4
ee004252:	00079a83          	lh	s5,0(a5)
ee004256:	00071b03          	lh	s6,0(a4)
                for (j=0; j<N; j++) {
ee00425a:	0789                	addi	a5,a5,2
ee00425c:	0709                	addi	a4,a4,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee00425e:	036a8bb3          	mul	s7,s5,s6
ee004262:	985e                	add	a6,a6,s7
ee004264:	00079c03          	lh	s8,0(a5)
ee004268:	00071c83          	lh	s9,0(a4)
                for (j=0; j<N; j++) {
ee00426c:	0709                	addi	a4,a4,2
ee00426e:	0789                	addi	a5,a5,2
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee004270:	039c0fb3          	mul	t6,s8,s9
ee004274:	987e                	add	a6,a6,t6
                for (j=0; j<N; j++) {
ee004276:	08e30563          	beq	t1,a4,ee004300 <matrix_mul_vect+0x176>
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee00427a:	00071283          	lh	t0,0(a4)
ee00427e:	00079583          	lh	a1,0(a5)
ee004282:	00271c83          	lh	s9,2(a4)
ee004286:	00279a83          	lh	s5,2(a5)
ee00428a:	00479903          	lh	s2,4(a5)
ee00428e:	00471c03          	lh	s8,4(a4)
ee004292:	025585b3          	mul	a1,a1,t0
ee004296:	00679403          	lh	s0,6(a5)
ee00429a:	00671b83          	lh	s7,6(a4)
ee00429e:	00879383          	lh	t2,8(a5)
ee0042a2:	00871b03          	lh	s6,8(a4)
ee0042a6:	00a79283          	lh	t0,10(a5)
ee0042aa:	00a71a03          	lh	s4,10(a4)
ee0042ae:	00c79f83          	lh	t6,12(a5)
ee0042b2:	00c71983          	lh	s3,12(a4)
ee0042b6:	00e79f03          	lh	t5,14(a5)
ee0042ba:	039a8ab3          	mul	s5,s5,s9
ee0042be:	00e71483          	lh	s1,14(a4)
ee0042c2:	982e                	add	a6,a6,a1
                for (j=0; j<N; j++) {
ee0042c4:	0741                	addi	a4,a4,16
ee0042c6:	07c1                	addi	a5,a5,16
                        C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
ee0042c8:	03890cb3          	mul	s9,s2,s8
ee0042cc:	01580933          	add	s2,a6,s5
ee0042d0:	03740c33          	mul	s8,s0,s7
ee0042d4:	01990433          	add	s0,s2,s9
ee0042d8:	03638bb3          	mul	s7,t2,s6
ee0042dc:	018405b3          	add	a1,s0,s8
ee0042e0:	034283b3          	mul	t2,t0,s4
ee0042e4:	01758b33          	add	s6,a1,s7
ee0042e8:	033f82b3          	mul	t0,t6,s3
ee0042ec:	007b0a33          	add	s4,s6,t2
ee0042f0:	029f0fb3          	mul	t6,t5,s1
ee0042f4:	005a09b3          	add	s3,s4,t0
ee0042f8:	01f98833          	add	a6,s3,t6
                for (j=0; j<N; j++) {
ee0042fc:	f6e31fe3          	bne	t1,a4,ee00427a <matrix_mul_vect+0xf0>
ee004300:	0108a023          	sw	a6,0(a7)
        for (i=0; i<N; i++) {
ee004304:	0891                	addi	a7,a7,4
ee004306:	9e2a                	add	t3,t3,a0
ee004308:	eb1e96e3          	bne	t4,a7,ee0041b4 <matrix_mul_vect+0x2a>
}
ee00430c:	5432                	lw	s0,44(sp)
ee00430e:	54a2                	lw	s1,40(sp)
ee004310:	5912                	lw	s2,36(sp)
ee004312:	5982                	lw	s3,32(sp)
ee004314:	4a72                	lw	s4,28(sp)
ee004316:	4ae2                	lw	s5,24(sp)
ee004318:	4b52                	lw	s6,20(sp)
ee00431a:	4bc2                	lw	s7,16(sp)
ee00431c:	4c32                	lw	s8,12(sp)
ee00431e:	4ca2                	lw	s9,8(sp)
ee004320:	6145                	addi	sp,sp,48
ee004322:	8082                	ret
ee004324:	8082                	ret

ee004326 <matrix_mul_matrix>:
        for (i=0; i<N; i++) {
ee004326:	1e050263          	beqz	a0,ee00450a <matrix_mul_matrix+0x1e4>
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
ee00432a:	7139                	addi	sp,sp,-64
ee00432c:	83b2                	mv	t2,a2
ee00432e:	00151613          	slli	a2,a0,0x1
ee004332:	dc26                	sw	s1,56(sp)
ee004334:	da4a                	sw	s2,52(sp)
ee004336:	d84e                	sw	s3,48(sp)
ee004338:	de22                	sw	s0,60(sp)
ee00433a:	89b6                	mv	s3,a3
ee00433c:	d652                	sw	s4,44(sp)
ee00433e:	d456                	sw	s5,40(sp)
ee004340:	d25a                	sw	s6,36(sp)
ee004342:	d05e                	sw	s7,32(sp)
ee004344:	ce62                	sw	s8,28(sp)
ee004346:	cc66                	sw	s9,24(sp)
ee004348:	ca6a                	sw	s10,20(sp)
ee00434a:	c86e                	sw	s11,16(sp)
ee00434c:	892a                	mv	s2,a0
ee00434e:	00c38fb3          	add	t6,t2,a2
        for (i=0; i<N; i++) {
ee004352:	4681                	li	a3,0
ee004354:	4481                	li	s1,0
                for (j=0; j<N; j++) {
ee004356:	00269413          	slli	s0,a3,0x2
ee00435a:	942e                	add	s0,s0,a1
ee00435c:	82ce                	mv	t0,s3
ee00435e:	4a01                	li	s4,0
ee004360:	c62e                	sw	a1,12(sp)
                        for(k=0;k<N;k++)
ee004362:	407f8833          	sub	a6,t6,t2
ee004366:	ffe80313          	addi	t1,a6,-2
ee00436a:	00135513          	srli	a0,t1,0x1
ee00436e:	00150593          	addi	a1,a0,1
ee004372:	0075f713          	andi	a4,a1,7
                for (j=0; j<N; j++) {
ee004376:	851e                	mv	a0,t2
ee004378:	8596                	mv	a1,t0
ee00437a:	4781                	li	a5,0
ee00437c:	c74d                	beqz	a4,ee004426 <matrix_mul_matrix+0x100>
ee00437e:	4885                	li	a7,1
ee004380:	09170863          	beq	a4,a7,ee004410 <matrix_mul_matrix+0xea>
ee004384:	4a89                	li	s5,2
ee004386:	07570c63          	beq	a4,s5,ee0043fe <matrix_mul_matrix+0xd8>
ee00438a:	4b0d                	li	s6,3
ee00438c:	07670063          	beq	a4,s6,ee0043ec <matrix_mul_matrix+0xc6>
ee004390:	4b91                	li	s7,4
ee004392:	05770463          	beq	a4,s7,ee0043da <matrix_mul_matrix+0xb4>
ee004396:	4c15                	li	s8,5
ee004398:	03870863          	beq	a4,s8,ee0043c8 <matrix_mul_matrix+0xa2>
ee00439c:	4c99                	li	s9,6
ee00439e:	01970c63          	beq	a4,s9,ee0043b6 <matrix_mul_matrix+0x90>
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0043a2:	00039783          	lh	a5,0(t2)
ee0043a6:	00029d03          	lh	s10,0(t0)
                        for(k=0;k<N;k++)
ee0043aa:	00238513          	addi	a0,t2,2
ee0043ae:	00c285b3          	add	a1,t0,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0043b2:	03a787b3          	mul	a5,a5,s10
ee0043b6:	00051d83          	lh	s11,0(a0)
ee0043ba:	00059e03          	lh	t3,0(a1)
                        for(k=0;k<N;k++)
ee0043be:	0509                	addi	a0,a0,2
ee0043c0:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0043c2:	03cd8eb3          	mul	t4,s11,t3
ee0043c6:	97f6                	add	a5,a5,t4
ee0043c8:	00051f03          	lh	t5,0(a0)
ee0043cc:	00059803          	lh	a6,0(a1)
                        for(k=0;k<N;k++)
ee0043d0:	0509                	addi	a0,a0,2
ee0043d2:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0043d4:	030f0333          	mul	t1,t5,a6
ee0043d8:	979a                	add	a5,a5,t1
ee0043da:	00051703          	lh	a4,0(a0)
ee0043de:	00059883          	lh	a7,0(a1)
                        for(k=0;k<N;k++)
ee0043e2:	0509                	addi	a0,a0,2
ee0043e4:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0043e6:	03170ab3          	mul	s5,a4,a7
ee0043ea:	97d6                	add	a5,a5,s5
ee0043ec:	00051b03          	lh	s6,0(a0)
ee0043f0:	00059b83          	lh	s7,0(a1)
                        for(k=0;k<N;k++)
ee0043f4:	0509                	addi	a0,a0,2
ee0043f6:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0043f8:	037b0c33          	mul	s8,s6,s7
ee0043fc:	97e2                	add	a5,a5,s8
ee0043fe:	00051c83          	lh	s9,0(a0)
ee004402:	00059d03          	lh	s10,0(a1)
                        for(k=0;k<N;k++)
ee004406:	0509                	addi	a0,a0,2
ee004408:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00440a:	03ac8db3          	mul	s11,s9,s10
ee00440e:	97ee                	add	a5,a5,s11
ee004410:	00051e03          	lh	t3,0(a0)
ee004414:	00059e83          	lh	t4,0(a1)
                        for(k=0;k<N;k++)
ee004418:	0509                	addi	a0,a0,2
ee00441a:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00441c:	03de0f33          	mul	t5,t3,t4
ee004420:	97fa                	add	a5,a5,t5
                        for(k=0;k<N;k++)
ee004422:	0aaf8363          	beq	t6,a0,ee0044c8 <matrix_mul_matrix+0x1a2>
ee004426:	00c58333          	add	t1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00442a:	00059703          	lh	a4,0(a1)
ee00442e:	00051803          	lh	a6,0(a0)
ee004432:	00031b83          	lh	s7,0(t1)
ee004436:	00251b03          	lh	s6,2(a0)
ee00443a:	02e80833          	mul	a6,a6,a4
                        for(k=0;k<N;k++)
ee00443e:	00c308b3          	add	a7,t1,a2
ee004442:	00c88c33          	add	s8,a7,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004446:	00089a83          	lh	s5,0(a7)
ee00444a:	00451d83          	lh	s11,4(a0)
ee00444e:	000c1d03          	lh	s10,0(s8)
                        for(k=0;k<N;k++)
ee004452:	00cc0cb3          	add	s9,s8,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004456:	00651f03          	lh	t5,6(a0)
                        for(k=0;k<N;k++)
ee00445a:	00cc85b3          	add	a1,s9,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00445e:	00851e83          	lh	t4,8(a0)
ee004462:	037b0b33          	mul	s6,s6,s7
ee004466:	000c9c83          	lh	s9,0(s9)
ee00446a:	00a51e03          	lh	t3,10(a0)
ee00446e:	00059c03          	lh	s8,0(a1)
                        for(k=0;k<N;k++)
ee004472:	00c58733          	add	a4,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004476:	00c51303          	lh	t1,12(a0)
ee00447a:	00071b83          	lh	s7,0(a4)
                        for(k=0;k<N;k++)
ee00447e:	00c705b3          	add	a1,a4,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004482:	00e51883          	lh	a7,14(a0)
ee004486:	00059703          	lh	a4,0(a1)
ee00448a:	035d8db3          	mul	s11,s11,s5
ee00448e:	97c2                	add	a5,a5,a6
ee004490:	01678ab3          	add	s5,a5,s6
                        for(k=0;k<N;k++)
ee004494:	0541                	addi	a0,a0,16
ee004496:	95b2                	add	a1,a1,a2
                                C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004498:	03af0f33          	mul	t5,t5,s10
ee00449c:	01ba8833          	add	a6,s5,s11
ee0044a0:	039e8d33          	mul	s10,t4,s9
ee0044a4:	01e80eb3          	add	t4,a6,t5
ee0044a8:	038e0cb3          	mul	s9,t3,s8
ee0044ac:	01ae8e33          	add	t3,t4,s10
ee0044b0:	03730c33          	mul	s8,t1,s7
ee0044b4:	019e0333          	add	t1,t3,s9
ee0044b8:	02e88b33          	mul	s6,a7,a4
ee0044bc:	01830bb3          	add	s7,t1,s8
ee0044c0:	016b87b3          	add	a5,s7,s6
                        for(k=0;k<N;k++)
ee0044c4:	f6af91e3          	bne	t6,a0,ee004426 <matrix_mul_matrix+0x100>
ee0044c8:	c01c                	sw	a5,0(s0)
                for (j=0; j<N; j++) {
ee0044ca:	001a0513          	addi	a0,s4,1
ee0044ce:	0411                	addi	s0,s0,4
ee0044d0:	0289                	addi	t0,t0,2
ee0044d2:	00a90463          	beq	s2,a0,ee0044da <matrix_mul_matrix+0x1b4>
ee0044d6:	8a2a                	mv	s4,a0
ee0044d8:	b569                	j	ee004362 <matrix_mul_matrix+0x3c>
        for (i=0; i<N; i++) {
ee0044da:	45b2                	lw	a1,12(sp)
ee0044dc:	00148413          	addi	s0,s1,1
ee0044e0:	93b2                	add	t2,t2,a2
ee0044e2:	96ca                	add	a3,a3,s2
ee0044e4:	9fb2                	add	t6,t6,a2
ee0044e6:	01448463          	beq	s1,s4,ee0044ee <matrix_mul_matrix+0x1c8>
ee0044ea:	84a2                	mv	s1,s0
ee0044ec:	b5ad                	j	ee004356 <matrix_mul_matrix+0x30>
}
ee0044ee:	5472                	lw	s0,60(sp)
ee0044f0:	54e2                	lw	s1,56(sp)
ee0044f2:	5952                	lw	s2,52(sp)
ee0044f4:	59c2                	lw	s3,48(sp)
ee0044f6:	5a32                	lw	s4,44(sp)
ee0044f8:	5aa2                	lw	s5,40(sp)
ee0044fa:	5b12                	lw	s6,36(sp)
ee0044fc:	5b82                	lw	s7,32(sp)
ee0044fe:	4c72                	lw	s8,28(sp)
ee004500:	4ce2                	lw	s9,24(sp)
ee004502:	4d52                	lw	s10,20(sp)
ee004504:	4dc2                	lw	s11,16(sp)
ee004506:	6121                	addi	sp,sp,64
ee004508:	8082                	ret
ee00450a:	8082                	ret

ee00450c <matrix_mul_matrix_bitextract>:
        for (i=0; i<N; i++) {
ee00450c:	1a050363          	beqz	a0,ee0046b2 <matrix_mul_matrix_bitextract+0x1a6>
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
ee004510:	1101                	addi	sp,sp,-32
ee004512:	00151813          	slli	a6,a0,0x1
ee004516:	ce22                	sw	s0,28(sp)
ee004518:	cc26                	sw	s1,24(sp)
ee00451a:	ca4a                	sw	s2,20(sp)
ee00451c:	c84e                	sw	s3,16(sp)
ee00451e:	c652                	sw	s4,12(sp)
ee004520:	c456                	sw	s5,8(sp)
ee004522:	c25a                	sw	s6,4(sp)
ee004524:	8faa                	mv	t6,a0
ee004526:	842e                	mv	s0,a1
ee004528:	84b6                	mv	s1,a3
ee00452a:	8eb2                	mv	t4,a2
ee00452c:	010608b3          	add	a7,a2,a6
        for (i=0; i<N; i++) {
ee004530:	4281                	li	t0,0
ee004532:	4381                	li	t2,0
                for (j=0; j<N; j++) {
ee004534:	00229e13          	slli	t3,t0,0x2
ee004538:	9e22                	add	t3,t3,s0
ee00453a:	8326                	mv	t1,s1
ee00453c:	4f01                	li	t5,0
                        for(k=0;k<N;k++)
ee00453e:	41d887b3          	sub	a5,a7,t4
ee004542:	ffe78513          	addi	a0,a5,-2
ee004546:	00155593          	srli	a1,a0,0x1
ee00454a:	00158613          	addi	a2,a1,1
ee00454e:	00367993          	andi	s3,a2,3
                for (j=0; j<N; j++) {
ee004552:	851a                	mv	a0,t1
ee004554:	8776                	mv	a4,t4
ee004556:	4901                	li	s2,0
ee004558:	08098463          	beqz	s3,ee0045e0 <matrix_mul_matrix_bitextract+0xd4>
ee00455c:	4685                	li	a3,1
ee00455e:	04d98c63          	beq	s3,a3,ee0045b6 <matrix_mul_matrix_bitextract+0xaa>
ee004562:	4a09                	li	s4,2
ee004564:	03498663          	beq	s3,s4,ee004590 <matrix_mul_matrix_bitextract+0x84>
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004568:	000e9903          	lh	s2,0(t4)
ee00456c:	00031a83          	lh	s5,0(t1)
                        for(k=0;k<N;k++)
ee004570:	002e8713          	addi	a4,t4,2
ee004574:	01030533          	add	a0,t1,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004578:	03590b33          	mul	s6,s2,s5
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee00457c:	402b5593          	srai	a1,s6,0x2
ee004580:	405b5793          	srai	a5,s6,0x5
ee004584:	00f5f613          	andi	a2,a1,15
ee004588:	07f7f993          	andi	s3,a5,127
ee00458c:	03360933          	mul	s2,a2,s3
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004590:	00071a03          	lh	s4,0(a4)
ee004594:	00051683          	lh	a3,0(a0)
                        for(k=0;k<N;k++)
ee004598:	0709                	addi	a4,a4,2
ee00459a:	9542                	add	a0,a0,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee00459c:	02da0ab3          	mul	s5,s4,a3
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee0045a0:	402adb13          	srai	s6,s5,0x2
ee0045a4:	405ad593          	srai	a1,s5,0x5
ee0045a8:	00fb7613          	andi	a2,s6,15
ee0045ac:	07f5f793          	andi	a5,a1,127
ee0045b0:	02f609b3          	mul	s3,a2,a5
ee0045b4:	994e                	add	s2,s2,s3
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0045b6:	00071a03          	lh	s4,0(a4)
ee0045ba:	00051683          	lh	a3,0(a0)
                        for(k=0;k<N;k++)
ee0045be:	0709                	addi	a4,a4,2
ee0045c0:	9542                	add	a0,a0,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0045c2:	02da0ab3          	mul	s5,s4,a3
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee0045c6:	402adb13          	srai	s6,s5,0x2
ee0045ca:	405ad593          	srai	a1,s5,0x5
ee0045ce:	00fb7613          	andi	a2,s6,15
ee0045d2:	07f5f793          	andi	a5,a1,127
ee0045d6:	02f609b3          	mul	s3,a2,a5
ee0045da:	994e                	add	s2,s2,s3
                        for(k=0;k<N;k++)
ee0045dc:	08e88f63          	beq	a7,a4,ee00467a <matrix_mul_matrix_bitextract+0x16e>
ee0045e0:	01050a33          	add	s4,a0,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0045e4:	00071683          	lh	a3,0(a4)
ee0045e8:	00051a83          	lh	s5,0(a0)
ee0045ec:	000a1b03          	lh	s6,0(s4)
                        for(k=0;k<N;k++)
ee0045f0:	010a07b3          	add	a5,s4,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee0045f4:	00271583          	lh	a1,2(a4)
ee0045f8:	00079a03          	lh	s4,0(a5)
                        for(k=0;k<N;k++)
ee0045fc:	01078533          	add	a0,a5,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004600:	00471603          	lh	a2,4(a4)
ee004604:	035689b3          	mul	s3,a3,s5
ee004608:	00051a83          	lh	s5,0(a0)
ee00460c:	00671683          	lh	a3,6(a4)
                        for(k=0;k<N;k++)
ee004610:	0721                	addi	a4,a4,8
ee004612:	9542                	add	a0,a0,a6
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004614:	036585b3          	mul	a1,a1,s6
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee004618:	4029d793          	srai	a5,s3,0x2
ee00461c:	4059db13          	srai	s6,s3,0x5
ee004620:	07fb7993          	andi	s3,s6,127
ee004624:	8bbd                	andi	a5,a5,15
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004626:	03460633          	mul	a2,a2,s4
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee00462a:	4025da13          	srai	s4,a1,0x2
ee00462e:	8595                	srai	a1,a1,0x5
ee004630:	00fa7b13          	andi	s6,s4,15
ee004634:	07f5fa13          	andi	s4,a1,127
                                MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
ee004638:	035686b3          	mul	a3,a3,s5
                                C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
ee00463c:	40265a93          	srai	s5,a2,0x2
ee004640:	8615                	srai	a2,a2,0x5
ee004642:	00faf593          	andi	a1,s5,15
ee004646:	07f67a93          	andi	s5,a2,127
ee00464a:	033787b3          	mul	a5,a5,s3
ee00464e:	4026d993          	srai	s3,a3,0x2
ee004652:	8695                	srai	a3,a3,0x5
ee004654:	00f9f613          	andi	a2,s3,15
ee004658:	07f6f993          	andi	s3,a3,127
ee00465c:	034b0b33          	mul	s6,s6,s4
ee004660:	993e                	add	s2,s2,a5
ee004662:	03558a33          	mul	s4,a1,s5
ee004666:	016905b3          	add	a1,s2,s6
ee00466a:	03360ab3          	mul	s5,a2,s3
ee00466e:	014587b3          	add	a5,a1,s4
ee004672:	01578933          	add	s2,a5,s5
                        for(k=0;k<N;k++)
ee004676:	f6e895e3          	bne	a7,a4,ee0045e0 <matrix_mul_matrix_bitextract+0xd4>
ee00467a:	012e2023          	sw	s2,0(t3)
                for (j=0; j<N; j++) {
ee00467e:	001f0713          	addi	a4,t5,1
ee004682:	0e11                	addi	t3,t3,4
ee004684:	0309                	addi	t1,t1,2
ee004686:	00ef8463          	beq	t6,a4,ee00468e <matrix_mul_matrix_bitextract+0x182>
ee00468a:	8f3a                	mv	t5,a4
ee00468c:	bd4d                	j	ee00453e <matrix_mul_matrix_bitextract+0x32>
        for (i=0; i<N; i++) {
ee00468e:	00138e13          	addi	t3,t2,1
ee004692:	9ec2                	add	t4,t4,a6
ee004694:	92fe                	add	t0,t0,t6
ee004696:	98c2                	add	a7,a7,a6
ee004698:	01e38463          	beq	t2,t5,ee0046a0 <matrix_mul_matrix_bitextract+0x194>
ee00469c:	83f2                	mv	t2,t3
ee00469e:	bd59                	j	ee004534 <matrix_mul_matrix_bitextract+0x28>
}
ee0046a0:	4472                	lw	s0,28(sp)
ee0046a2:	44e2                	lw	s1,24(sp)
ee0046a4:	4952                	lw	s2,20(sp)
ee0046a6:	49c2                	lw	s3,16(sp)
ee0046a8:	4a32                	lw	s4,12(sp)
ee0046aa:	4aa2                	lw	s5,8(sp)
ee0046ac:	4b12                	lw	s6,4(sp)
ee0046ae:	6105                	addi	sp,sp,32
ee0046b0:	8082                	ret
ee0046b2:	8082                	ret

ee0046b4 <core_init_state>:
        size--;
ee0046b4:	fff50313          	addi	t1,a0,-1
        while ((total+next+1)<size) {
ee0046b8:	4785                	li	a5,1
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
ee0046ba:	88b2                	mv	a7,a2
        while ((total+next+1)<size) {
ee0046bc:	1667f763          	bgeu	a5,t1,ee00482a <core_init_state+0x176>
ee0046c0:	0585                	addi	a1,a1,1
ee0046c2:	01059693          	slli	a3,a1,0x10
ee0046c6:	82c1                	srli	a3,a3,0x10
                if (next>0) {
ee0046c8:	f0040637          	lui	a2,0xf0040
                                buf=intpat[(seed>>3) & 0x3];
ee0046cc:	0036d293          	srli	t0,a3,0x3
                switch (seed & 0x7) {
ee0046d0:	4e9d                	li	t4,7
ee0046d2:	0076f713          	andi	a4,a3,7
        ee_u32 total=0,next=0,i;
ee0046d6:	4801                	li	a6,0
                switch (seed & 0x7) {
ee0046d8:	0a860613          	addi	a2,a2,168 # f00400a8 <STACK+0xffffe318>
ee0046dc:	4591                	li	a1,4
ee0046de:	4e05                	li	t3,1
                        *(p+total+i)=',';
ee0046e0:	02c00f13          	li	t5,44
                                buf=intpat[(seed>>3) & 0x3];
ee0046e4:	0032f393          	andi	t2,t0,3
                switch (seed & 0x7) {
ee0046e8:	07d70e63          	beq	a4,t4,ee004764 <core_init_state+0xb0>
ee0046ec:	12e5e063          	bltu	a1,a4,ee00480c <core_init_state+0x158>
ee0046f0:	ffd70f93          	addi	t6,a4,-3
ee0046f4:	010f9793          	slli	a5,t6,0x10
                                buf=floatpat[(seed>>3) & 0x3];
ee0046f8:	00239293          	slli	t0,t2,0x2
                switch (seed & 0x7) {
ee0046fc:	0107d713          	srli	a4,a5,0x10
                                buf=floatpat[(seed>>3) & 0x3];
ee004700:	005603b3          	add	t2,a2,t0
                switch (seed & 0x7) {
ee004704:	0eee6363          	bltu	t3,a4,ee0047ea <core_init_state+0x136>
                                buf=floatpat[(seed>>3) & 0x3];
ee004708:	0103a703          	lw	a4,16(t2)
        while ((total+next+1)<size) {
ee00470c:	00168793          	addi	a5,a3,1
ee004710:	01079393          	slli	t2,a5,0x10
ee004714:	00980293          	addi	t0,a6,9
ee004718:	0103d693          	srli	a3,t2,0x10
ee00471c:	0662f363          	bgeu	t0,t1,ee004782 <core_init_state+0xce>
                if (next>0) {
ee004720:	00170793          	addi	a5,a4,1
ee004724:	01088fb3          	add	t6,a7,a6
ee004728:	40ff83b3          	sub	t2,t6,a5
ee00472c:	0033b793          	sltiu	a5,t2,3
ee004730:	e7ad                	bnez	a5,ee00479a <core_init_state+0xe6>
ee004732:	01f763b3          	or	t2,a4,t6
ee004736:	0033f793          	andi	a5,t2,3
ee00473a:	e3a5                	bnez	a5,ee00479a <core_init_state+0xe6>
                                *(p+total+i)=buf[i];
ee00473c:	00072803          	lw	a6,0(a4)
ee004740:	47a1                	li	a5,8
ee004742:	010fa023          	sw	a6,0(t6)
ee004746:	4358                	lw	a4,4(a4)
ee004748:	00efa223          	sw	a4,4(t6)
                        *(p+total+i)=',';
ee00474c:	9fbe                	add	t6,t6,a5
ee00474e:	8816                	mv	a6,t0
ee004750:	01ef8023          	sb	t5,0(t6)
                                buf=intpat[(seed>>3) & 0x3];
ee004754:	0036d293          	srli	t0,a3,0x3
ee004758:	0076f713          	andi	a4,a3,7
ee00475c:	0032f393          	andi	t2,t0,3
                switch (seed & 0x7) {
ee004760:	f9d716e3          	bne	a4,t4,ee0046ec <core_init_state+0x38>
                                buf=errpat[(seed>>3) & 0x3];
ee004764:	00239f93          	slli	t6,t2,0x2
ee004768:	01f607b3          	add	a5,a2,t6
ee00476c:	5b98                	lw	a4,48(a5)
        while ((total+next+1)<size) {
ee00476e:	00168793          	addi	a5,a3,1
ee004772:	01079393          	slli	t2,a5,0x10
ee004776:	00980293          	addi	t0,a6,9
ee00477a:	0103d693          	srli	a3,t2,0x10
ee00477e:	fa62e1e3          	bltu	t0,t1,ee004720 <core_init_state+0x6c>
        while (total<size) { /* fill the rest with 0 */
ee004782:	0aa87363          	bgeu	a6,a0,ee004828 <core_init_state+0x174>
                *(p+total)=0;
ee004786:	00180313          	addi	t1,a6,1
ee00478a:	4605                	li	a2,1
ee00478c:	08657763          	bgeu	a0,t1,ee00481a <core_init_state+0x166>
ee004790:	4581                	li	a1,0
ee004792:	01088533          	add	a0,a7,a6
ee004796:	0df0306f          	j	ee008074 <memset>
ee00479a:	00180393          	addi	t2,a6,1
        while ((total+next+1)<size) {
ee00479e:	47a1                	li	a5,8
                                *(p+total+i)=buf[i];
ee0047a0:	00074803          	lbu	a6,0(a4)
ee0047a4:	93c6                	add	t2,t2,a7
ee0047a6:	010f8023          	sb	a6,0(t6)
ee0047aa:	00174803          	lbu	a6,1(a4)
ee0047ae:	01038023          	sb	a6,0(t2)
ee0047b2:	00274383          	lbu	t2,2(a4)
ee0047b6:	007f8123          	sb	t2,2(t6)
ee0047ba:	00374803          	lbu	a6,3(a4)
ee0047be:	010f81a3          	sb	a6,3(t6)
                        for(i=0;i<next;i++)
ee0047c2:	f8b785e3          	beq	a5,a1,ee00474c <core_init_state+0x98>
                                *(p+total+i)=buf[i];
ee0047c6:	00474383          	lbu	t2,4(a4)
ee0047ca:	47a1                	li	a5,8
ee0047cc:	007f8223          	sb	t2,4(t6)
ee0047d0:	00574803          	lbu	a6,5(a4)
ee0047d4:	010f82a3          	sb	a6,5(t6)
ee0047d8:	00674383          	lbu	t2,6(a4)
ee0047dc:	007f8323          	sb	t2,6(t6)
ee0047e0:	00774703          	lbu	a4,7(a4)
ee0047e4:	00ef83a3          	sb	a4,7(t6)
                        for(i=0;i<next;i++)
ee0047e8:	b795                	j	ee00474c <core_init_state+0x98>
        while ((total+next+1)<size) {
ee0047ea:	0685                	addi	a3,a3,1
ee0047ec:	01069f93          	slli	t6,a3,0x10
ee0047f0:	00580293          	addi	t0,a6,5
                                buf=intpat[(seed>>3) & 0x3];
ee0047f4:	0003a703          	lw	a4,0(t2)
        while ((total+next+1)<size) {
ee0047f8:	010fd693          	srli	a3,t6,0x10
ee0047fc:	00180393          	addi	t2,a6,1
ee004800:	f862f1e3          	bgeu	t0,t1,ee004782 <core_init_state+0xce>
                                next=4;
ee004804:	4791                	li	a5,4
ee004806:	01088fb3          	add	t6,a7,a6
ee00480a:	bf59                	j	ee0047a0 <core_init_state+0xec>
                                buf=scipat[(seed>>3) & 0x3];
ee00480c:	00239293          	slli	t0,t2,0x2
ee004810:	005603b3          	add	t2,a2,t0
ee004814:	0203a703          	lw	a4,32(t2)
                        break;
ee004818:	bdd5                	j	ee00470c <core_init_state+0x58>
                *(p+total)=0;
ee00481a:	41050633          	sub	a2,a0,a6
ee00481e:	4581                	li	a1,0
ee004820:	01088533          	add	a0,a7,a6
ee004824:	0510306f          	j	ee008074 <memset>
ee004828:	8082                	ret
        ee_u32 total=0,next=0,i;
ee00482a:	4801                	li	a6,0
ee00482c:	bfa9                	j	ee004786 <core_init_state+0xd2>

ee00482e <core_state_transition>:
        ee_u8 *str=*instr;
ee00482e:	4118                	lw	a4,0(a0)
enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
ee004830:	862a                	mv	a2,a0
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004832:	00074683          	lbu	a3,0(a4)
ee004836:	20068d63          	beqz	a3,ee004a50 <core_state_transition+0x222>
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee00483a:	02c00793          	li	a5,44
ee00483e:	4501                	li	a0,0
ee004840:	18f68e63          	beq	a3,a5,ee0049dc <core_state_transition+0x1ae>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee004844:	fd068513          	addi	a0,a3,-48
ee004848:	0ff57293          	zext.b	t0,a0
ee00484c:	4825                	li	a6,9
ee00484e:	02587d63          	bgeu	a6,t0,ee004888 <core_state_transition+0x5a>
                        else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
ee004852:	02d00313          	li	t1,45
ee004856:	18668f63          	beq	a3,t1,ee0049f4 <core_state_transition+0x1c6>
ee00485a:	02e00393          	li	t2,46
ee00485e:	08768163          	beq	a3,t2,ee0048e0 <core_state_transition+0xb2>
ee004862:	02b00e93          	li	t4,43
ee004866:	19d68763          	beq	a3,t4,ee0049f4 <core_state_transition+0x1c6>
                                transition_count[CORE_INVALID]++;
ee00486a:	41d4                	lw	a3,4(a1)
                        transition_count[CORE_START]++;
ee00486c:	0005a883          	lw	a7,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004870:	0705                	addi	a4,a4,1
                                transition_count[CORE_INVALID]++;
ee004872:	00168e13          	addi	t3,a3,1
                        transition_count[CORE_START]++;
ee004876:	00188e93          	addi	t4,a7,1
                                transition_count[CORE_INVALID]++;
ee00487a:	01c5a223          	sw	t3,4(a1)
                        transition_count[CORE_START]++;
ee00487e:	01d5a023          	sw	t4,0(a1)
                                state = CORE_INVALID;
ee004882:	4505                	li	a0,1
        *instr=str;
ee004884:	c218                	sw	a4,0(a2)
}
ee004886:	8082                	ret
                        transition_count[CORE_START]++;
ee004888:	0005af03          	lw	t5,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee00488c:	00170693          	addi	a3,a4,1
                        transition_count[CORE_START]++;
ee004890:	001f0f93          	addi	t6,t5,1
ee004894:	01f5a023          	sw	t6,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004898:	00174503          	lbu	a0,1(a4)
ee00489c:	1a050463          	beqz	a0,ee004a44 <core_state_transition+0x216>
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee0048a0:	12f50c63          	beq	a0,a5,ee0049d8 <core_state_transition+0x1aa>
                        if( NEXT_SYMBOL == '.' ) {
ee0048a4:	02e00293          	li	t0,46
ee0048a8:	12550163          	beq	a0,t0,ee0049ca <core_state_transition+0x19c>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee0048ac:	fd050713          	addi	a4,a0,-48
ee0048b0:	0ff77813          	zext.b	a6,a4
ee0048b4:	47a5                	li	a5,9
ee0048b6:	0107ea63          	bltu	a5,a6,ee0048ca <core_state_transition+0x9c>
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0048ba:	0016c503          	lbu	a0,1(a3)
ee0048be:	0685                	addi	a3,a3,1
ee0048c0:	18050263          	beqz	a0,ee004a44 <core_state_transition+0x216>
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee0048c4:	02c00793          	li	a5,44
ee0048c8:	bfe1                	j	ee0048a0 <core_state_transition+0x72>
                                transition_count[CORE_INT]++;
ee0048ca:	0105a303          	lw	t1,16(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0048ce:	00168713          	addi	a4,a3,1
                                state = CORE_INVALID;
ee0048d2:	4505                	li	a0,1
                                transition_count[CORE_INT]++;
ee0048d4:	00130393          	addi	t2,t1,1
ee0048d8:	0075a823          	sw	t2,16(a1)
        *instr=str;
ee0048dc:	c218                	sw	a4,0(a2)
}
ee0048de:	8082                	ret
                        transition_count[CORE_START]++;
ee0048e0:	0005a883          	lw	a7,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0048e4:	00170693          	addi	a3,a4,1
                        transition_count[CORE_START]++;
ee0048e8:	00188e13          	addi	t3,a7,1
ee0048ec:	01c5a023          	sw	t3,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0048f0:	00174e83          	lbu	t4,1(a4)
ee0048f4:	140e8b63          	beqz	t4,ee004a4a <core_state_transition+0x21c>
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee0048f8:	16fe8d63          	beq	t4,a5,ee004a72 <core_state_transition+0x244>
                        if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
ee0048fc:	0dfeff13          	andi	t5,t4,223
ee004900:	04500f93          	li	t6,69
ee004904:	03ff0163          	beq	t5,t6,ee004926 <core_state_transition+0xf8>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee004908:	fd0e8293          	addi	t0,t4,-48
ee00490c:	0ff2f813          	zext.b	a6,t0
ee004910:	4325                	li	t1,9
ee004912:	0d036763          	bltu	t1,a6,ee0049e0 <core_state_transition+0x1b2>
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004916:	0016ce83          	lbu	t4,1(a3)
ee00491a:	0685                	addi	a3,a3,1
ee00491c:	120e8763          	beqz	t4,ee004a4a <core_state_transition+0x21c>
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee004920:	02c00793          	li	a5,44
ee004924:	bfd1                	j	ee0048f8 <core_state_transition+0xca>
                                transition_count[CORE_FLOAT]++;
ee004926:	49c8                	lw	a0,20(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004928:	00168713          	addi	a4,a3,1
                                transition_count[CORE_FLOAT]++;
ee00492c:	00150e13          	addi	t3,a0,1
ee004930:	01c5aa23          	sw	t3,20(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004934:	0016ce83          	lbu	t4,1(a3)
ee004938:	120e8063          	beqz	t4,ee004a58 <core_state_transition+0x22a>
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee00493c:	02c00f13          	li	t5,44
ee004940:	11ee8e63          	beq	t4,t5,ee004a5c <core_state_transition+0x22e>
                                transition_count[CORE_S2]++;
ee004944:	45d8                	lw	a4,12(a1)
                        if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
ee004946:	fd5e8793          	addi	a5,t4,-43
ee00494a:	0fd7ff93          	andi	t6,a5,253
                                transition_count[CORE_S2]++;
ee00494e:	00170293          	addi	t0,a4,1
ee004952:	0055a623          	sw	t0,12(a1)
                        if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
ee004956:	000f8763          	beqz	t6,ee004964 <core_state_transition+0x136>
        for( ; *str && state != CORE_INVALID; str++ ) {
ee00495a:	00268713          	addi	a4,a3,2
                                state = CORE_INVALID;
ee00495e:	4505                	li	a0,1
        *instr=str;
ee004960:	c218                	sw	a4,0(a2)
}
ee004962:	8082                	ret
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004964:	0026c803          	lbu	a6,2(a3)
ee004968:	00268713          	addi	a4,a3,2
ee00496c:	0e080463          	beqz	a6,ee004a54 <core_state_transition+0x226>
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee004970:	0fe80963          	beq	a6,t5,ee004a62 <core_state_transition+0x234>
                                transition_count[CORE_EXPONENT]++;
ee004974:	0185a303          	lw	t1,24(a1)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee004978:	fd080393          	addi	t2,a6,-48
ee00497c:	0ff3f893          	zext.b	a7,t2
                                transition_count[CORE_EXPONENT]++;
ee004980:	00130513          	addi	a0,t1,1
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee004984:	4e25                	li	t3,9
                                transition_count[CORE_EXPONENT]++;
ee004986:	cd88                	sw	a0,24(a1)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee004988:	011e7763          	bgeu	t3,a7,ee004996 <core_state_transition+0x168>
        for( ; *str && state != CORE_INVALID; str++ ) {
ee00498c:	00368713          	addi	a4,a3,3
                                state = CORE_INVALID;
ee004990:	4505                	li	a0,1
        *instr=str;
ee004992:	c218                	sw	a4,0(a2)
}
ee004994:	8082                	ret
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee004996:	42a5                	li	t0,9
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004998:	00174683          	lbu	a3,1(a4)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee00499c:	8eba                	mv	t4,a4
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee00499e:	02c00f13          	li	t5,44
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee0049a2:	fd068793          	addi	a5,a3,-48
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0049a6:	0705                	addi	a4,a4,1
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee0049a8:	0ff7ff93          	zext.b	t6,a5
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0049ac:	c2e9                	beqz	a3,ee004a6e <core_state_transition+0x240>
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee0049ae:	0be68d63          	beq	a3,t5,ee004a68 <core_state_transition+0x23a>
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee0049b2:	fff2f3e3          	bgeu	t0,t6,ee004998 <core_state_transition+0x16a>
                                transition_count[CORE_INVALID]++;
ee0049b6:	0045a803          	lw	a6,4(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0049ba:	002e8713          	addi	a4,t4,2
                                state = CORE_INVALID;
ee0049be:	4505                	li	a0,1
                                transition_count[CORE_INVALID]++;
ee0049c0:	00180313          	addi	t1,a6,1
ee0049c4:	0065a223          	sw	t1,4(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0049c8:	bf11                	j	ee0048dc <core_state_transition+0xae>
                                transition_count[CORE_INT]++;
ee0049ca:	0105a883          	lw	a7,16(a1)
ee0049ce:	00188e13          	addi	t3,a7,1
ee0049d2:	01c5a823          	sw	t3,16(a1)
ee0049d6:	b781                	j	ee004916 <core_state_transition+0xe8>
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0049d8:	8736                	mv	a4,a3
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee0049da:	4511                	li	a0,4
                        str++;
ee0049dc:	0705                	addi	a4,a4,1
                        break;
ee0049de:	bdfd                	j	ee0048dc <core_state_transition+0xae>
                                transition_count[CORE_FLOAT]++;
ee0049e0:	0145a383          	lw	t2,20(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0049e4:	00168713          	addi	a4,a3,1
                                state = CORE_INVALID;
ee0049e8:	4505                	li	a0,1
                                transition_count[CORE_FLOAT]++;
ee0049ea:	00138893          	addi	a7,t2,1
ee0049ee:	0115aa23          	sw	a7,20(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0049f2:	b5ed                	j	ee0048dc <core_state_transition+0xae>
                        transition_count[CORE_START]++;
ee0049f4:	0005af03          	lw	t5,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee0049f8:	00170693          	addi	a3,a4,1
                        transition_count[CORE_START]++;
ee0049fc:	001f0f93          	addi	t6,t5,1
ee004a00:	01f5a023          	sw	t6,0(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004a04:	00174283          	lbu	t0,1(a4)
ee004a08:	06028d63          	beqz	t0,ee004a82 <core_state_transition+0x254>
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee004a0c:	06f28763          	beq	t0,a5,ee004a7a <core_state_transition+0x24c>
                                transition_count[CORE_S1]++;
ee004a10:	4598                	lw	a4,8(a1)
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee004a12:	fd028793          	addi	a5,t0,-48
ee004a16:	0ff7f813          	zext.b	a6,a5
ee004a1a:	4525                	li	a0,9
                                transition_count[CORE_S1]++;
ee004a1c:	00170313          	addi	t1,a4,1
        retval = ((c>='0') & (c<='9')) ? 1 : 0;
ee004a20:	01057c63          	bgeu	a0,a6,ee004a38 <core_state_transition+0x20a>
                        else if( NEXT_SYMBOL == '.' ) {
ee004a24:	02e00393          	li	t2,46
ee004a28:	00728b63          	beq	t0,t2,ee004a3e <core_state_transition+0x210>
                                transition_count[CORE_S1]++;
ee004a2c:	0065a423          	sw	t1,8(a1)
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004a30:	00168713          	addi	a4,a3,1
                                state = CORE_INVALID;
ee004a34:	4505                	li	a0,1
ee004a36:	b55d                	j	ee0048dc <core_state_transition+0xae>
                                transition_count[CORE_S1]++;
ee004a38:	0065a423          	sw	t1,8(a1)
ee004a3c:	bdbd                	j	ee0048ba <core_state_transition+0x8c>
                                transition_count[CORE_S1]++;
ee004a3e:	0065a423          	sw	t1,8(a1)
ee004a42:	bdd1                	j	ee004916 <core_state_transition+0xe8>
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004a44:	8736                	mv	a4,a3
ee004a46:	4511                	li	a0,4
ee004a48:	bd51                	j	ee0048dc <core_state_transition+0xae>
ee004a4a:	8736                	mv	a4,a3
                                state = CORE_FLOAT;
ee004a4c:	4515                	li	a0,5
ee004a4e:	b579                	j	ee0048dc <core_state_transition+0xae>
        enum CORE_STATE state=CORE_START;
ee004a50:	4501                	li	a0,0
ee004a52:	b569                	j	ee0048dc <core_state_transition+0xae>
                                state = CORE_EXPONENT;
ee004a54:	4519                	li	a0,6
ee004a56:	b559                	j	ee0048dc <core_state_transition+0xae>
                                state = CORE_S2;
ee004a58:	450d                	li	a0,3
ee004a5a:	b549                	j	ee0048dc <core_state_transition+0xae>
ee004a5c:	450d                	li	a0,3
                        str++;
ee004a5e:	0705                	addi	a4,a4,1
                        break;
ee004a60:	bdb5                	j	ee0048dc <core_state_transition+0xae>
                                state = CORE_EXPONENT;
ee004a62:	4519                	li	a0,6
                        str++;
ee004a64:	0705                	addi	a4,a4,1
                        break;
ee004a66:	bd9d                	j	ee0048dc <core_state_transition+0xae>
                                state = CORE_SCIENTIFIC;
ee004a68:	451d                	li	a0,7
                        str++;
ee004a6a:	0705                	addi	a4,a4,1
                        break;
ee004a6c:	bd85                	j	ee0048dc <core_state_transition+0xae>
                                state = CORE_SCIENTIFIC;
ee004a6e:	451d                	li	a0,7
ee004a70:	b5b5                	j	ee0048dc <core_state_transition+0xae>
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004a72:	8736                	mv	a4,a3
                                state = CORE_FLOAT;
ee004a74:	4515                	li	a0,5
                        str++;
ee004a76:	0705                	addi	a4,a4,1
                        break;
ee004a78:	b595                	j	ee0048dc <core_state_transition+0xae>
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004a7a:	8736                	mv	a4,a3
                if (NEXT_SYMBOL==',') /* end of this input */ {
ee004a7c:	4509                	li	a0,2
                        str++;
ee004a7e:	0705                	addi	a4,a4,1
                        break;
ee004a80:	bdb1                	j	ee0048dc <core_state_transition+0xae>
        for( ; *str && state != CORE_INVALID; str++ ) {
ee004a82:	8736                	mv	a4,a3
ee004a84:	4509                	li	a0,2
ee004a86:	bd99                	j	ee0048dc <core_state_transition+0xae>

ee004a88 <core_bench_state>:
{
ee004a88:	7119                	addi	sp,sp,-128
ee004a8a:	dca2                	sw	s0,120(sp)
ee004a8c:	daa6                	sw	s1,116(sp)
ee004a8e:	d8ca                	sw	s2,112(sp)
ee004a90:	d6ce                	sw	s3,108(sp)
ee004a92:	d4d2                	sw	s4,104(sp)
ee004a94:	d2d6                	sw	s5,100(sp)
ee004a96:	d0da                	sw	s6,96(sp)
ee004a98:	cede                	sw	s7,92(sp)
ee004a9a:	de86                	sw	ra,124(sp)
ee004a9c:	892e                	mv	s2,a1
        while (*p!=0) {
ee004a9e:	0005c583          	lbu	a1,0(a1)
        ee_u8 *p=memblock;
ee004aa2:	c64a                	sw	s2,12(sp)
                final_counts[i]=track_counts[i]=0;
ee004aa4:	d802                	sw	zero,48(sp)
ee004aa6:	c802                	sw	zero,16(sp)
ee004aa8:	da02                	sw	zero,52(sp)
ee004aaa:	dc02                	sw	zero,56(sp)
ee004aac:	de02                	sw	zero,60(sp)
ee004aae:	c082                	sw	zero,64(sp)
ee004ab0:	c282                	sw	zero,68(sp)
ee004ab2:	c482                	sw	zero,72(sp)
ee004ab4:	c682                	sw	zero,76(sp)
ee004ab6:	ca02                	sw	zero,20(sp)
ee004ab8:	cc02                	sw	zero,24(sp)
ee004aba:	ce02                	sw	zero,28(sp)
ee004abc:	d002                	sw	zero,32(sp)
ee004abe:	d202                	sw	zero,36(sp)
ee004ac0:	d402                	sw	zero,40(sp)
ee004ac2:	d602                	sw	zero,44(sp)
ee004ac4:	1804                	addi	s1,sp,48
{
ee004ac6:	8b2a                	mv	s6,a0
ee004ac8:	8bb2                	mv	s7,a2
ee004aca:	8a36                	mv	s4,a3
ee004acc:	8aba                	mv	s5,a4
ee004ace:	843e                	mv	s0,a5
ee004ad0:	00c10993          	addi	s3,sp,12
        while (*p!=0) {
ee004ad4:	4a0582e3          	beqz	a1,ee005778 <core_bench_state+0xcf0>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004ad8:	85a6                	mv	a1,s1
ee004ada:	854e                	mv	a0,s3
ee004adc:	3b89                	jal	ee00482e <core_state_transition>
ee004ade:	87aa                	mv	a5,a0
                final_counts[fstate]++;
ee004ae0:	00279293          	slli	t0,a5,0x2
ee004ae4:	05028313          	addi	t1,t0,80
ee004ae8:	002303b3          	add	t2,t1,sp
        while (*p!=0) {
ee004aec:	46b2                	lw	a3,12(sp)
                final_counts[fstate]++;
ee004aee:	fc03a703          	lw	a4,-64(t2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004af2:	85a6                	mv	a1,s1
        while (*p!=0) {
ee004af4:	0006c603          	lbu	a2,0(a3)
                final_counts[fstate]++;
ee004af8:	00170813          	addi	a6,a4,1
ee004afc:	fd03a023          	sw	a6,-64(t2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004b00:	854e                	mv	a0,s3
        while (*p!=0) {
ee004b02:	ce25                	beqz	a2,ee004b7a <core_bench_state+0xf2>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004b04:	332d                	jal	ee00482e <core_state_transition>
ee004b06:	88aa                	mv	a7,a0
                final_counts[fstate]++;
ee004b08:	00289e13          	slli	t3,a7,0x2
ee004b0c:	050e0e93          	addi	t4,t3,80
ee004b10:	002e8f33          	add	t5,t4,sp
        while (*p!=0) {
ee004b14:	47b2                	lw	a5,12(sp)
                final_counts[fstate]++;
ee004b16:	fc0f2f83          	lw	t6,-64(t5)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004b1a:	85a6                	mv	a1,s1
        while (*p!=0) {
ee004b1c:	0007c283          	lbu	t0,0(a5)
                final_counts[fstate]++;
ee004b20:	001f8313          	addi	t1,t6,1
ee004b24:	fc6f2023          	sw	t1,-64(t5)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004b28:	854e                	mv	a0,s3
        while (*p!=0) {
ee004b2a:	04028863          	beqz	t0,ee004b7a <core_bench_state+0xf2>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004b2e:	3301                	jal	ee00482e <core_state_transition>
ee004b30:	83aa                	mv	t2,a0
                final_counts[fstate]++;
ee004b32:	00239713          	slli	a4,t2,0x2
ee004b36:	05070693          	addi	a3,a4,80
ee004b3a:	00268633          	add	a2,a3,sp
        while (*p!=0) {
ee004b3e:	48b2                	lw	a7,12(sp)
                final_counts[fstate]++;
ee004b40:	fc062803          	lw	a6,-64(a2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004b44:	85a6                	mv	a1,s1
        while (*p!=0) {
ee004b46:	0008ce03          	lbu	t3,0(a7)
                final_counts[fstate]++;
ee004b4a:	00180e93          	addi	t4,a6,1
ee004b4e:	fdd62023          	sw	t4,-64(a2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004b52:	854e                	mv	a0,s3
        while (*p!=0) {
ee004b54:	020e0363          	beqz	t3,ee004b7a <core_bench_state+0xf2>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004b58:	39d9                	jal	ee00482e <core_state_transition>
                final_counts[fstate]++;
ee004b5a:	050a                	slli	a0,a0,0x2
ee004b5c:	05050593          	addi	a1,a0,80
ee004b60:	00258f33          	add	t5,a1,sp
        while (*p!=0) {
ee004b64:	47b2                	lw	a5,12(sp)
                final_counts[fstate]++;
ee004b66:	fc0f2f83          	lw	t6,-64(t5)
        while (*p!=0) {
ee004b6a:	0007c283          	lbu	t0,0(a5)
                final_counts[fstate]++;
ee004b6e:	001f8313          	addi	t1,t6,1
ee004b72:	fc6f2023          	sw	t1,-64(t5)
        while (*p!=0) {
ee004b76:	f60291e3          	bnez	t0,ee004ad8 <core_bench_state+0x50>
        p=memblock;
ee004b7a:	c64a                	sw	s2,12(sp)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004b7c:	9b4a                	add	s6,s6,s2
ee004b7e:	17697963          	bgeu	s2,s6,ee004cf0 <core_bench_state+0x268>
ee004b82:	4085                	li	ra,1
ee004b84:	3a1a94e3          	bne	s5,ra,ee00572c <core_bench_state+0xca4>
                if (*p!=',')
ee004b88:	00094803          	lbu	a6,0(s2)
ee004b8c:	fff94893          	not	a7,s2
ee004b90:	011b0e33          	add	t3,s6,a7
ee004b94:	02c00e93          	li	t4,44
ee004b98:	007e7513          	andi	a0,t3,7
ee004b9c:	01d80663          	beq	a6,t4,ee004ba8 <core_bench_state+0x120>
                        *p^=(ee_u8)seed1;
ee004ba0:	017845b3          	xor	a1,a6,s7
ee004ba4:	00b90023          	sb	a1,0(s2)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004ba8:	00190793          	addi	a5,s2,1
ee004bac:	1367fc63          	bgeu	a5,s6,ee004ce4 <core_bench_state+0x25c>
ee004bb0:	c545                	beqz	a0,ee004c58 <core_bench_state+0x1d0>
ee004bb2:	4f05                	li	t5,1
ee004bb4:	09e50763          	beq	a0,t5,ee004c42 <core_bench_state+0x1ba>
ee004bb8:	4f89                	li	t6,2
ee004bba:	07f50b63          	beq	a0,t6,ee004c30 <core_bench_state+0x1a8>
ee004bbe:	428d                	li	t0,3
ee004bc0:	04550f63          	beq	a0,t0,ee004c1e <core_bench_state+0x196>
ee004bc4:	4311                	li	t1,4
ee004bc6:	04650363          	beq	a0,t1,ee004c0c <core_bench_state+0x184>
ee004bca:	4095                	li	ra,5
ee004bcc:	02150763          	beq	a0,ra,ee004bfa <core_bench_state+0x172>
ee004bd0:	4399                	li	t2,6
ee004bd2:	00750b63          	beq	a0,t2,ee004be8 <core_bench_state+0x160>
                if (*p!=',')
ee004bd6:	0007c703          	lbu	a4,0(a5)
ee004bda:	01d70663          	beq	a4,t4,ee004be6 <core_bench_state+0x15e>
                        *p^=(ee_u8)seed1;
ee004bde:	017746b3          	xor	a3,a4,s7
ee004be2:	00d78023          	sb	a3,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004be6:	0785                	addi	a5,a5,1
                if (*p!=',')
ee004be8:	0007c603          	lbu	a2,0(a5)
ee004bec:	01d60663          	beq	a2,t4,ee004bf8 <core_bench_state+0x170>
                        *p^=(ee_u8)seed1;
ee004bf0:	017649b3          	xor	s3,a2,s7
ee004bf4:	01378023          	sb	s3,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004bf8:	0785                	addi	a5,a5,1
                if (*p!=',')
ee004bfa:	0007c803          	lbu	a6,0(a5)
ee004bfe:	01d80663          	beq	a6,t4,ee004c0a <core_bench_state+0x182>
                        *p^=(ee_u8)seed1;
ee004c02:	017848b3          	xor	a7,a6,s7
ee004c06:	01178023          	sb	a7,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004c0a:	0785                	addi	a5,a5,1
                if (*p!=',')
ee004c0c:	0007ce03          	lbu	t3,0(a5)
ee004c10:	01de0663          	beq	t3,t4,ee004c1c <core_bench_state+0x194>
                        *p^=(ee_u8)seed1;
ee004c14:	017e4533          	xor	a0,t3,s7
ee004c18:	00a78023          	sb	a0,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004c1c:	0785                	addi	a5,a5,1
                if (*p!=',')
ee004c1e:	0007c583          	lbu	a1,0(a5)
ee004c22:	01d58663          	beq	a1,t4,ee004c2e <core_bench_state+0x1a6>
                        *p^=(ee_u8)seed1;
ee004c26:	0175cf33          	xor	t5,a1,s7
ee004c2a:	01e78023          	sb	t5,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004c2e:	0785                	addi	a5,a5,1
                if (*p!=',')
ee004c30:	0007cf83          	lbu	t6,0(a5)
ee004c34:	01df8663          	beq	t6,t4,ee004c40 <core_bench_state+0x1b8>
                        *p^=(ee_u8)seed1;
ee004c38:	017fc2b3          	xor	t0,t6,s7
ee004c3c:	00578023          	sb	t0,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004c40:	0785                	addi	a5,a5,1
                if (*p!=',')
ee004c42:	0007c303          	lbu	t1,0(a5)
ee004c46:	01d30663          	beq	t1,t4,ee004c52 <core_bench_state+0x1ca>
                        *p^=(ee_u8)seed1;
ee004c4a:	017340b3          	xor	ra,t1,s7
ee004c4e:	00178023          	sb	ra,0(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004c52:	0785                	addi	a5,a5,1
ee004c54:	0967f863          	bgeu	a5,s6,ee004ce4 <core_bench_state+0x25c>
                if (*p!=',')
ee004c58:	0007c383          	lbu	t2,0(a5)
ee004c5c:	01d38663          	beq	t2,t4,ee004c68 <core_bench_state+0x1e0>
                        *p^=(ee_u8)seed1;
ee004c60:	0173c733          	xor	a4,t2,s7
ee004c64:	00e78023          	sb	a4,0(a5)
                if (*p!=',')
ee004c68:	0017c603          	lbu	a2,1(a5)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004c6c:	00178693          	addi	a3,a5,1
                if (*p!=',')
ee004c70:	01d60663          	beq	a2,t4,ee004c7c <core_bench_state+0x1f4>
                        *p^=(ee_u8)seed1;
ee004c74:	017649b3          	xor	s3,a2,s7
ee004c78:	013780a3          	sb	s3,1(a5)
                if (*p!=',')
ee004c7c:	0016c783          	lbu	a5,1(a3)
ee004c80:	01d78663          	beq	a5,t4,ee004c8c <core_bench_state+0x204>
                        *p^=(ee_u8)seed1;
ee004c84:	0177c833          	xor	a6,a5,s7
ee004c88:	010680a3          	sb	a6,1(a3)
                if (*p!=',')
ee004c8c:	0026c883          	lbu	a7,2(a3)
ee004c90:	01d88663          	beq	a7,t4,ee004c9c <core_bench_state+0x214>
                        *p^=(ee_u8)seed1;
ee004c94:	0178ce33          	xor	t3,a7,s7
ee004c98:	01c68123          	sb	t3,2(a3)
                if (*p!=',')
ee004c9c:	0036c503          	lbu	a0,3(a3)
ee004ca0:	01d50663          	beq	a0,t4,ee004cac <core_bench_state+0x224>
                        *p^=(ee_u8)seed1;
ee004ca4:	017545b3          	xor	a1,a0,s7
ee004ca8:	00b681a3          	sb	a1,3(a3)
                if (*p!=',')
ee004cac:	0046cf03          	lbu	t5,4(a3)
ee004cb0:	01df0663          	beq	t5,t4,ee004cbc <core_bench_state+0x234>
                        *p^=(ee_u8)seed1;
ee004cb4:	017f4fb3          	xor	t6,t5,s7
ee004cb8:	01f68223          	sb	t6,4(a3)
                if (*p!=',')
ee004cbc:	0056c283          	lbu	t0,5(a3)
ee004cc0:	01d28663          	beq	t0,t4,ee004ccc <core_bench_state+0x244>
                        *p^=(ee_u8)seed1;
ee004cc4:	0172c333          	xor	t1,t0,s7
ee004cc8:	006682a3          	sb	t1,5(a3)
                if (*p!=',')
ee004ccc:	0066c083          	lbu	ra,6(a3)
ee004cd0:	01d08663          	beq	ra,t4,ee004cdc <core_bench_state+0x254>
                        *p^=(ee_u8)seed1;
ee004cd4:	0170c3b3          	xor	t2,ra,s7
ee004cd8:	00768323          	sb	t2,6(a3)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee004cdc:	00768793          	addi	a5,a3,7
ee004ce0:	f767ece3          	bltu	a5,s6,ee004c58 <core_bench_state+0x1d0>
        while (*p!=0) {
ee004ce4:	00094b83          	lbu	s7,0(s2)
ee004ce8:	00c10993          	addi	s3,sp,12
ee004cec:	220b8be3          	beqz	s7,ee005722 <core_bench_state+0xc9a>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004cf0:	85a6                	mv	a1,s1
ee004cf2:	854e                	mv	a0,s3
ee004cf4:	3e2d                	jal	ee00482e <core_state_transition>
ee004cf6:	8eaa                	mv	t4,a0
                final_counts[fstate]++;
ee004cf8:	002e9713          	slli	a4,t4,0x2
ee004cfc:	05070613          	addi	a2,a4,80
ee004d00:	00260833          	add	a6,a2,sp
        while (*p!=0) {
ee004d04:	46b2                	lw	a3,12(sp)
                final_counts[fstate]++;
ee004d06:	fc082883          	lw	a7,-64(a6)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004d0a:	85a6                	mv	a1,s1
        while (*p!=0) {
ee004d0c:	0006ce03          	lbu	t3,0(a3)
                final_counts[fstate]++;
ee004d10:	00188f13          	addi	t5,a7,1
ee004d14:	fde82023          	sw	t5,-64(a6)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004d18:	854e                	mv	a0,s3
        while (*p!=0) {
ee004d1a:	060e0d63          	beqz	t3,ee004d94 <core_bench_state+0x30c>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004d1e:	3e01                	jal	ee00482e <core_state_transition>
ee004d20:	8faa                	mv	t6,a0
                final_counts[fstate]++;
ee004d22:	002f9293          	slli	t0,t6,0x2
ee004d26:	05028313          	addi	t1,t0,80
ee004d2a:	002303b3          	add	t2,t1,sp
        while (*p!=0) {
ee004d2e:	4bb2                	lw	s7,12(sp)
                final_counts[fstate]++;
ee004d30:	fc03a783          	lw	a5,-64(t2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004d34:	85a6                	mv	a1,s1
        while (*p!=0) {
ee004d36:	000bce83          	lbu	t4,0(s7)
                final_counts[fstate]++;
ee004d3a:	00178713          	addi	a4,a5,1
ee004d3e:	fce3a023          	sw	a4,-64(t2)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004d42:	854e                	mv	a0,s3
        while (*p!=0) {
ee004d44:	040e8863          	beqz	t4,ee004d94 <core_bench_state+0x30c>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004d48:	34dd                	jal	ee00482e <core_state_transition>
ee004d4a:	862a                	mv	a2,a0
                final_counts[fstate]++;
ee004d4c:	00261813          	slli	a6,a2,0x2
ee004d50:	05080893          	addi	a7,a6,80
ee004d54:	00288e33          	add	t3,a7,sp
        while (*p!=0) {
ee004d58:	46b2                	lw	a3,12(sp)
                final_counts[fstate]++;
ee004d5a:	fc0e2f03          	lw	t5,-64(t3)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004d5e:	85a6                	mv	a1,s1
        while (*p!=0) {
ee004d60:	0006cf83          	lbu	t6,0(a3)
                final_counts[fstate]++;
ee004d64:	001f0293          	addi	t0,t5,1
ee004d68:	fc5e2023          	sw	t0,-64(t3)
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004d6c:	854e                	mv	a0,s3
        while (*p!=0) {
ee004d6e:	020f8363          	beqz	t6,ee004d94 <core_bench_state+0x30c>
                enum CORE_STATE fstate=core_state_transition(&p,track_counts);
ee004d72:	3c75                	jal	ee00482e <core_state_transition>
                final_counts[fstate]++;
ee004d74:	050a                	slli	a0,a0,0x2
ee004d76:	05050593          	addi	a1,a0,80
ee004d7a:	00258333          	add	t1,a1,sp
        while (*p!=0) {
ee004d7e:	47b2                	lw	a5,12(sp)
                final_counts[fstate]++;
ee004d80:	fc032383          	lw	t2,-64(t1)
        while (*p!=0) {
ee004d84:	0007cb83          	lbu	s7,0(a5)
                final_counts[fstate]++;
ee004d88:	00138e93          	addi	t4,t2,1
ee004d8c:	fdd32023          	sw	t4,-64(t1)
        while (*p!=0) {
ee004d90:	f60b90e3          	bnez	s7,ee004cf0 <core_bench_state+0x268>
        p=memblock;
ee004d94:	c64a                	sw	s2,12(sp)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004d96:	17697363          	bgeu	s2,s6,ee004efc <core_bench_state+0x474>
ee004d9a:	4985                	li	s3,1
ee004d9c:	1b3a9fe3          	bne	s5,s3,ee00575a <core_bench_state+0xcd2>
                if (*p!=',')
ee004da0:	00094a83          	lbu	s5,0(s2)
ee004da4:	fff94813          	not	a6,s2
ee004da8:	010b08b3          	add	a7,s6,a6
ee004dac:	02c00e13          	li	t3,44
ee004db0:	0078ff13          	andi	t5,a7,7
ee004db4:	01ca8663          	beq	s5,t3,ee004dc0 <core_bench_state+0x338>
                        *p^=(ee_u8)seed2;
ee004db8:	014ac6b3          	xor	a3,s5,s4
ee004dbc:	00d90023          	sb	a3,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004dc0:	0905                	addi	s2,s2,1
ee004dc2:	13697d63          	bgeu	s2,s6,ee004efc <core_bench_state+0x474>
ee004dc6:	0a0f0563          	beqz	t5,ee004e70 <core_bench_state+0x3e8>
ee004dca:	4f85                	li	t6,1
ee004dcc:	09ff0763          	beq	t5,t6,ee004e5a <core_bench_state+0x3d2>
ee004dd0:	4289                	li	t0,2
ee004dd2:	065f0b63          	beq	t5,t0,ee004e48 <core_bench_state+0x3c0>
ee004dd6:	450d                	li	a0,3
ee004dd8:	04af0f63          	beq	t5,a0,ee004e36 <core_bench_state+0x3ae>
ee004ddc:	4591                	li	a1,4
ee004dde:	04bf0363          	beq	t5,a1,ee004e24 <core_bench_state+0x39c>
ee004de2:	4315                	li	t1,5
ee004de4:	026f0763          	beq	t5,t1,ee004e12 <core_bench_state+0x38a>
ee004de8:	4399                	li	t2,6
ee004dea:	007f0b63          	beq	t5,t2,ee004e00 <core_bench_state+0x378>
                if (*p!=',')
ee004dee:	00094783          	lbu	a5,0(s2)
ee004df2:	01c78663          	beq	a5,t3,ee004dfe <core_bench_state+0x376>
                        *p^=(ee_u8)seed2;
ee004df6:	0147cbb3          	xor	s7,a5,s4
ee004dfa:	01790023          	sb	s7,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004dfe:	0905                	addi	s2,s2,1
                if (*p!=',')
ee004e00:	00094e83          	lbu	t4,0(s2)
ee004e04:	01ce8663          	beq	t4,t3,ee004e10 <core_bench_state+0x388>
                        *p^=(ee_u8)seed2;
ee004e08:	014ec9b3          	xor	s3,t4,s4
ee004e0c:	01390023          	sb	s3,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004e10:	0905                	addi	s2,s2,1
                if (*p!=',')
ee004e12:	00094083          	lbu	ra,0(s2)
ee004e16:	01c08663          	beq	ra,t3,ee004e22 <core_bench_state+0x39a>
                        *p^=(ee_u8)seed2;
ee004e1a:	0140c633          	xor	a2,ra,s4
ee004e1e:	00c90023          	sb	a2,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004e22:	0905                	addi	s2,s2,1
                if (*p!=',')
ee004e24:	00094703          	lbu	a4,0(s2)
ee004e28:	01c70663          	beq	a4,t3,ee004e34 <core_bench_state+0x3ac>
                        *p^=(ee_u8)seed2;
ee004e2c:	01474ab3          	xor	s5,a4,s4
ee004e30:	01590023          	sb	s5,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004e34:	0905                	addi	s2,s2,1
                if (*p!=',')
ee004e36:	00094803          	lbu	a6,0(s2)
ee004e3a:	01c80663          	beq	a6,t3,ee004e46 <core_bench_state+0x3be>
                        *p^=(ee_u8)seed2;
ee004e3e:	014848b3          	xor	a7,a6,s4
ee004e42:	01190023          	sb	a7,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004e46:	0905                	addi	s2,s2,1
                if (*p!=',')
ee004e48:	00094f03          	lbu	t5,0(s2)
ee004e4c:	01cf0663          	beq	t5,t3,ee004e58 <core_bench_state+0x3d0>
                        *p^=(ee_u8)seed2;
ee004e50:	014f46b3          	xor	a3,t5,s4
ee004e54:	00d90023          	sb	a3,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004e58:	0905                	addi	s2,s2,1
                if (*p!=',')
ee004e5a:	00094f83          	lbu	t6,0(s2)
ee004e5e:	01cf8663          	beq	t6,t3,ee004e6a <core_bench_state+0x3e2>
                        *p^=(ee_u8)seed2;
ee004e62:	014fc2b3          	xor	t0,t6,s4
ee004e66:	00590023          	sb	t0,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004e6a:	0905                	addi	s2,s2,1
ee004e6c:	09697863          	bgeu	s2,s6,ee004efc <core_bench_state+0x474>
                if (*p!=',')
ee004e70:	00094503          	lbu	a0,0(s2)
ee004e74:	01c50663          	beq	a0,t3,ee004e80 <core_bench_state+0x3f8>
                        *p^=(ee_u8)seed2;
ee004e78:	014545b3          	xor	a1,a0,s4
ee004e7c:	00b90023          	sb	a1,0(s2)
                if (*p!=',')
ee004e80:	00194303          	lbu	t1,1(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004e84:	00190393          	addi	t2,s2,1
                if (*p!=',')
ee004e88:	01c30663          	beq	t1,t3,ee004e94 <core_bench_state+0x40c>
                        *p^=(ee_u8)seed2;
ee004e8c:	014347b3          	xor	a5,t1,s4
ee004e90:	00f900a3          	sb	a5,1(s2)
                if (*p!=',')
ee004e94:	0013c903          	lbu	s2,1(t2)
ee004e98:	01c90663          	beq	s2,t3,ee004ea4 <core_bench_state+0x41c>
                        *p^=(ee_u8)seed2;
ee004e9c:	01494bb3          	xor	s7,s2,s4
ee004ea0:	017380a3          	sb	s7,1(t2)
                if (*p!=',')
ee004ea4:	0023ce83          	lbu	t4,2(t2)
ee004ea8:	01ce8663          	beq	t4,t3,ee004eb4 <core_bench_state+0x42c>
                        *p^=(ee_u8)seed2;
ee004eac:	014ec9b3          	xor	s3,t4,s4
ee004eb0:	01338123          	sb	s3,2(t2)
                if (*p!=',')
ee004eb4:	0033c083          	lbu	ra,3(t2)
ee004eb8:	01c08663          	beq	ra,t3,ee004ec4 <core_bench_state+0x43c>
                        *p^=(ee_u8)seed2;
ee004ebc:	0140c633          	xor	a2,ra,s4
ee004ec0:	00c381a3          	sb	a2,3(t2)
                if (*p!=',')
ee004ec4:	0043c703          	lbu	a4,4(t2)
ee004ec8:	01c70663          	beq	a4,t3,ee004ed4 <core_bench_state+0x44c>
                        *p^=(ee_u8)seed2;
ee004ecc:	01474ab3          	xor	s5,a4,s4
ee004ed0:	01538223          	sb	s5,4(t2)
                if (*p!=',')
ee004ed4:	0053c803          	lbu	a6,5(t2)
ee004ed8:	01c80663          	beq	a6,t3,ee004ee4 <core_bench_state+0x45c>
                        *p^=(ee_u8)seed2;
ee004edc:	014848b3          	xor	a7,a6,s4
ee004ee0:	011382a3          	sb	a7,5(t2)
                if (*p!=',')
ee004ee4:	0063cf03          	lbu	t5,6(t2)
ee004ee8:	01cf0663          	beq	t5,t3,ee004ef4 <core_bench_state+0x46c>
                        *p^=(ee_u8)seed2;
ee004eec:	014f46b3          	xor	a3,t5,s4
ee004ef0:	00d38323          	sb	a3,6(t2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee004ef4:	00738913          	addi	s2,t2,7
ee004ef8:	f7696ce3          	bltu	s2,s6,ee004e70 <core_bench_state+0x3e8>
                   crc |= 0x8000;
ee004efc:	7a69                	lui	s4,0xffffa
ee004efe:	0814                	addi	a3,sp,16
ee004f00:	8626                	mv	a2,s1
ee004f02:	001a0b13          	addi	s6,s4,1 # ffffa001 <STACK+0xffb8271>
                crc=crcu32(final_counts[i],crc);
ee004f06:	0006ae03          	lw	t3,0(a3)
                crc >>= 1;
ee004f0a:	00145b93          	srli	s7,s0,0x1
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee004f0e:	0ffe7f93          	zext.b	t6,t3
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee004f12:	008fc433          	xor	s0,t6,s0
        return crcu16((ee_u16)newval, crc);
ee004f16:	010e1513          	slli	a0,t3,0x10
                if (x16 == 1)
ee004f1a:	00147293          	andi	t0,s0,1
        return crcu16((ee_u16)newval, crc);
ee004f1e:	01055593          	srli	a1,a0,0x10
                data >>= 1;
ee004f22:	001fd313          	srli	t1,t6,0x1
                if (x16 == 1)
ee004f26:	00028863          	beqz	t0,ee004f36 <core_bench_state+0x4ae>
                   crc |= 0x8000;
ee004f2a:	016bc3b3          	xor	t2,s7,s6
ee004f2e:	01039793          	slli	a5,t2,0x10
ee004f32:	0107db93          	srli	s7,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee004f36:	01734eb3          	xor	t4,t1,s7
                if (x16 == 1)
ee004f3a:	001ef993          	andi	s3,t4,1
                data >>= 1;
ee004f3e:	002fd093          	srli	ra,t6,0x2
                if (x16 == 1)
ee004f42:	001bd813          	srli	a6,s7,0x1
ee004f46:	00098863          	beqz	s3,ee004f56 <core_bench_state+0x4ce>
                   crc |= 0x8000;
ee004f4a:	01684733          	xor	a4,a6,s6
ee004f4e:	01071a93          	slli	s5,a4,0x10
ee004f52:	010ad813          	srli	a6,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee004f56:	0100c8b3          	xor	a7,ra,a6
                if (x16 == 1)
ee004f5a:	0018ff13          	andi	t5,a7,1
                data >>= 1;
ee004f5e:	003fd913          	srli	s2,t6,0x3
                if (x16 == 1)
ee004f62:	00185293          	srli	t0,a6,0x1
ee004f66:	000f0863          	beqz	t5,ee004f76 <core_bench_state+0x4ee>
                   crc |= 0x8000;
ee004f6a:	0162ca33          	xor	s4,t0,s6
ee004f6e:	010a1413          	slli	s0,s4,0x10
ee004f72:	01045293          	srli	t0,s0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee004f76:	00594533          	xor	a0,s2,t0
                if (x16 == 1)
ee004f7a:	00157313          	andi	t1,a0,1
                data >>= 1;
ee004f7e:	004fd393          	srli	t2,t6,0x4
                if (x16 == 1)
ee004f82:	0012de93          	srli	t4,t0,0x1
ee004f86:	00030863          	beqz	t1,ee004f96 <core_bench_state+0x50e>
                   crc |= 0x8000;
ee004f8a:	016ec7b3          	xor	a5,t4,s6
ee004f8e:	01079b93          	slli	s7,a5,0x10
ee004f92:	010bde93          	srli	t4,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee004f96:	01d3c9b3          	xor	s3,t2,t4
                if (x16 == 1)
ee004f9a:	0019f093          	andi	ra,s3,1
                data >>= 1;
ee004f9e:	005fd713          	srli	a4,t6,0x5
                if (x16 == 1)
ee004fa2:	001edf13          	srli	t5,t4,0x1
ee004fa6:	00008863          	beqz	ra,ee004fb6 <core_bench_state+0x52e>
                   crc |= 0x8000;
ee004faa:	016f4ab3          	xor	s5,t5,s6
ee004fae:	010a9813          	slli	a6,s5,0x10
ee004fb2:	01085f13          	srli	t5,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee004fb6:	01e748b3          	xor	a7,a4,t5
                if (x16 == 1)
ee004fba:	0018f913          	andi	s2,a7,1
                data >>= 1;
ee004fbe:	006fda13          	srli	s4,t6,0x6
                if (x16 == 1)
ee004fc2:	001f5313          	srli	t1,t5,0x1
ee004fc6:	00090863          	beqz	s2,ee004fd6 <core_bench_state+0x54e>
                   crc |= 0x8000;
ee004fca:	01634433          	xor	s0,t1,s6
ee004fce:	01041293          	slli	t0,s0,0x10
ee004fd2:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee004fd6:	006a4533          	xor	a0,s4,t1
                if (x16 == 1)
ee004fda:	00157393          	andi	t2,a0,1
                data >>= 1;
ee004fde:	007fdf93          	srli	t6,t6,0x7
                if (x16 == 1)
ee004fe2:	00135e93          	srli	t4,t1,0x1
ee004fe6:	00038863          	beqz	t2,ee004ff6 <core_bench_state+0x56e>
                   crc |= 0x8000;
ee004fea:	016ec7b3          	xor	a5,t4,s6
ee004fee:	01079b93          	slli	s7,a5,0x10
ee004ff2:	010bde93          	srli	t4,s7,0x10
                if (x16 == 1)
ee004ff6:	001ef993          	andi	s3,t4,1
ee004ffa:	001eda93          	srli	s5,t4,0x1
ee004ffe:	01f98863          	beq	s3,t6,ee00500e <core_bench_state+0x586>
                   crc |= 0x8000;
ee005002:	016ac0b3          	xor	ra,s5,s6
ee005006:	01009713          	slli	a4,ra,0x10
ee00500a:	01075a93          	srli	s5,a4,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee00500e:	0085df13          	srli	t5,a1,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005012:	015f4833          	xor	a6,t5,s5
                if (x16 == 1)
ee005016:	00187893          	andi	a7,a6,1
                data >>= 1;
ee00501a:	81a5                	srli	a1,a1,0x9
                if (x16 == 1)
ee00501c:	001ad413          	srli	s0,s5,0x1
ee005020:	00088863          	beqz	a7,ee005030 <core_bench_state+0x5a8>
                   crc |= 0x8000;
ee005024:	01644933          	xor	s2,s0,s6
ee005028:	01091a13          	slli	s4,s2,0x10
ee00502c:	010a5413          	srli	s0,s4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005030:	0085c2b3          	xor	t0,a1,s0
                if (x16 == 1)
ee005034:	0012f313          	andi	t1,t0,1
                data >>= 1;
ee005038:	002f5513          	srli	a0,t5,0x2
                if (x16 == 1)
ee00503c:	00145793          	srli	a5,s0,0x1
ee005040:	00030863          	beqz	t1,ee005050 <core_bench_state+0x5c8>
                   crc |= 0x8000;
ee005044:	0167c3b3          	xor	t2,a5,s6
ee005048:	01039f93          	slli	t6,t2,0x10
ee00504c:	010fd793          	srli	a5,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005050:	00f54bb3          	xor	s7,a0,a5
                if (x16 == 1)
ee005054:	001bfe93          	andi	t4,s7,1
                data >>= 1;
ee005058:	003f5993          	srli	s3,t5,0x3
                if (x16 == 1)
ee00505c:	0017da93          	srli	s5,a5,0x1
ee005060:	000e8863          	beqz	t4,ee005070 <core_bench_state+0x5e8>
                   crc |= 0x8000;
ee005064:	016ac0b3          	xor	ra,s5,s6
ee005068:	01009713          	slli	a4,ra,0x10
ee00506c:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005070:	0159c833          	xor	a6,s3,s5
                if (x16 == 1)
ee005074:	00187893          	andi	a7,a6,1
                data >>= 1;
ee005078:	004f5593          	srli	a1,t5,0x4
                if (x16 == 1)
ee00507c:	001ad413          	srli	s0,s5,0x1
ee005080:	00088863          	beqz	a7,ee005090 <core_bench_state+0x608>
                   crc |= 0x8000;
ee005084:	01644933          	xor	s2,s0,s6
ee005088:	01091a13          	slli	s4,s2,0x10
ee00508c:	010a5413          	srli	s0,s4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005090:	0085c2b3          	xor	t0,a1,s0
                if (x16 == 1)
ee005094:	0012f313          	andi	t1,t0,1
                data >>= 1;
ee005098:	005f5513          	srli	a0,t5,0x5
                if (x16 == 1)
ee00509c:	00145793          	srli	a5,s0,0x1
ee0050a0:	00030863          	beqz	t1,ee0050b0 <core_bench_state+0x628>
                   crc |= 0x8000;
ee0050a4:	0167c3b3          	xor	t2,a5,s6
ee0050a8:	01039f93          	slli	t6,t2,0x10
ee0050ac:	010fd793          	srli	a5,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0050b0:	00f54bb3          	xor	s7,a0,a5
                if (x16 == 1)
ee0050b4:	001bfe93          	andi	t4,s7,1
                data >>= 1;
ee0050b8:	006f5993          	srli	s3,t5,0x6
                if (x16 == 1)
ee0050bc:	0017da93          	srli	s5,a5,0x1
ee0050c0:	000e8863          	beqz	t4,ee0050d0 <core_bench_state+0x648>
                   crc |= 0x8000;
ee0050c4:	016ac0b3          	xor	ra,s5,s6
ee0050c8:	01009713          	slli	a4,ra,0x10
ee0050cc:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0050d0:	0159c833          	xor	a6,s3,s5
                if (x16 == 1)
ee0050d4:	00187893          	andi	a7,a6,1
                data >>= 1;
ee0050d8:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
ee0050dc:	001ada13          	srli	s4,s5,0x1
ee0050e0:	00088863          	beqz	a7,ee0050f0 <core_bench_state+0x668>
                   crc |= 0x8000;
ee0050e4:	016a45b3          	xor	a1,s4,s6
ee0050e8:	01059913          	slli	s2,a1,0x10
ee0050ec:	01095a13          	srli	s4,s2,0x10
                if (x16 == 1)
ee0050f0:	001a7413          	andi	s0,s4,1
ee0050f4:	001a5393          	srli	t2,s4,0x1
ee0050f8:	01e40863          	beq	s0,t5,ee005108 <core_bench_state+0x680>
                   crc |= 0x8000;
ee0050fc:	0163c2b3          	xor	t0,t2,s6
ee005100:	01029313          	slli	t1,t0,0x10
ee005104:	01035393          	srli	t2,t1,0x10
        crc=crc16((ee_s16) (newval>>16) ,crc);
ee005108:	010e5513          	srli	a0,t3,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee00510c:	0ff57f93          	zext.b	t6,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005110:	007fc7b3          	xor	a5,t6,t2
                if (x16 == 1)
ee005114:	0017fb93          	andi	s7,a5,1
        return crcu16((ee_u16)newval, crc);
ee005118:	010e5e13          	srli	t3,t3,0x10
                data >>= 1;
ee00511c:	001fde93          	srli	t4,t6,0x1
                if (x16 == 1)
ee005120:	0013d713          	srli	a4,t2,0x1
ee005124:	000b8863          	beqz	s7,ee005134 <core_bench_state+0x6ac>
                   crc |= 0x8000;
ee005128:	016749b3          	xor	s3,a4,s6
ee00512c:	01099093          	slli	ra,s3,0x10
ee005130:	0100d713          	srli	a4,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005134:	00eecab3          	xor	s5,t4,a4
                if (x16 == 1)
ee005138:	001af893          	andi	a7,s5,1
                data >>= 1;
ee00513c:	002fd813          	srli	a6,t6,0x2
                if (x16 == 1)
ee005140:	00175913          	srli	s2,a4,0x1
ee005144:	00088863          	beqz	a7,ee005154 <core_bench_state+0x6cc>
                   crc |= 0x8000;
ee005148:	01694f33          	xor	t5,s2,s6
ee00514c:	010f1593          	slli	a1,t5,0x10
ee005150:	0105d913          	srli	s2,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005154:	01284a33          	xor	s4,a6,s2
                if (x16 == 1)
ee005158:	001a7413          	andi	s0,s4,1
                data >>= 1;
ee00515c:	003fd293          	srli	t0,t6,0x3
                if (x16 == 1)
ee005160:	00195513          	srli	a0,s2,0x1
ee005164:	c419                	beqz	s0,ee005172 <core_bench_state+0x6ea>
                   crc |= 0x8000;
ee005166:	01654333          	xor	t1,a0,s6
ee00516a:	01031393          	slli	t2,t1,0x10
ee00516e:	0103d513          	srli	a0,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005172:	00a2c7b3          	xor	a5,t0,a0
                if (x16 == 1)
ee005176:	0017fb93          	andi	s7,a5,1
                data >>= 1;
ee00517a:	004fde93          	srli	t4,t6,0x4
                if (x16 == 1)
ee00517e:	00155713          	srli	a4,a0,0x1
ee005182:	000b8863          	beqz	s7,ee005192 <core_bench_state+0x70a>
                   crc |= 0x8000;
ee005186:	016749b3          	xor	s3,a4,s6
ee00518a:	01099093          	slli	ra,s3,0x10
ee00518e:	0100d713          	srli	a4,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005192:	00eecab3          	xor	s5,t4,a4
                if (x16 == 1)
ee005196:	001af813          	andi	a6,s5,1
                data >>= 1;
ee00519a:	005fd893          	srli	a7,t6,0x5
                if (x16 == 1)
ee00519e:	00175913          	srli	s2,a4,0x1
ee0051a2:	00080863          	beqz	a6,ee0051b2 <core_bench_state+0x72a>
                   crc |= 0x8000;
ee0051a6:	01694f33          	xor	t5,s2,s6
ee0051aa:	010f1593          	slli	a1,t5,0x10
ee0051ae:	0105d913          	srli	s2,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0051b2:	0128ca33          	xor	s4,a7,s2
                if (x16 == 1)
ee0051b6:	001a7413          	andi	s0,s4,1
                data >>= 1;
ee0051ba:	006fd293          	srli	t0,t6,0x6
                if (x16 == 1)
ee0051be:	00195793          	srli	a5,s2,0x1
ee0051c2:	c419                	beqz	s0,ee0051d0 <core_bench_state+0x748>
                   crc |= 0x8000;
ee0051c4:	0167c333          	xor	t1,a5,s6
ee0051c8:	01031393          	slli	t2,t1,0x10
ee0051cc:	0103d793          	srli	a5,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0051d0:	00f2c533          	xor	a0,t0,a5
                if (x16 == 1)
ee0051d4:	00157b93          	andi	s7,a0,1
                data >>= 1;
ee0051d8:	007fdf93          	srli	t6,t6,0x7
                if (x16 == 1)
ee0051dc:	0017d093          	srli	ra,a5,0x1
ee0051e0:	000b8863          	beqz	s7,ee0051f0 <core_bench_state+0x768>
                   crc |= 0x8000;
ee0051e4:	0160ceb3          	xor	t4,ra,s6
ee0051e8:	010e9993          	slli	s3,t4,0x10
ee0051ec:	0109d093          	srli	ra,s3,0x10
                if (x16 == 1)
ee0051f0:	0010f713          	andi	a4,ra,1
ee0051f4:	0010d893          	srli	a7,ra,0x1
ee0051f8:	01f70863          	beq	a4,t6,ee005208 <core_bench_state+0x780>
                   crc |= 0x8000;
ee0051fc:	0168cab3          	xor	s5,a7,s6
ee005200:	010a9813          	slli	a6,s5,0x10
ee005204:	01085893          	srli	a7,a6,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee005208:	008e5f13          	srli	t5,t3,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00520c:	011f45b3          	xor	a1,t5,a7
                if (x16 == 1)
ee005210:	0015f913          	andi	s2,a1,1
                data >>= 1;
ee005214:	009e5e13          	srli	t3,t3,0x9
                if (x16 == 1)
ee005218:	0018d293          	srli	t0,a7,0x1
ee00521c:	00090863          	beqz	s2,ee00522c <core_bench_state+0x7a4>
                   crc |= 0x8000;
ee005220:	0162ca33          	xor	s4,t0,s6
ee005224:	010a1413          	slli	s0,s4,0x10
ee005228:	01045293          	srli	t0,s0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00522c:	005e4333          	xor	t1,t3,t0
                if (x16 == 1)
ee005230:	00137393          	andi	t2,t1,1
                data >>= 1;
ee005234:	002f5513          	srli	a0,t5,0x2
                if (x16 == 1)
ee005238:	0012df93          	srli	t6,t0,0x1
ee00523c:	00038863          	beqz	t2,ee00524c <core_bench_state+0x7c4>
                   crc |= 0x8000;
ee005240:	016fc7b3          	xor	a5,t6,s6
ee005244:	01079b93          	slli	s7,a5,0x10
ee005248:	010bdf93          	srli	t6,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00524c:	01f54eb3          	xor	t4,a0,t6
                if (x16 == 1)
ee005250:	001ef993          	andi	s3,t4,1
                data >>= 1;
ee005254:	003f5093          	srli	ra,t5,0x3
                if (x16 == 1)
ee005258:	001fd893          	srli	a7,t6,0x1
ee00525c:	00098863          	beqz	s3,ee00526c <core_bench_state+0x7e4>
                   crc |= 0x8000;
ee005260:	0168c733          	xor	a4,a7,s6
ee005264:	01071a93          	slli	s5,a4,0x10
ee005268:	010ad893          	srli	a7,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00526c:	0110c833          	xor	a6,ra,a7
                if (x16 == 1)
ee005270:	00187913          	andi	s2,a6,1
                data >>= 1;
ee005274:	004f5593          	srli	a1,t5,0x4
                if (x16 == 1)
ee005278:	0018d413          	srli	s0,a7,0x1
ee00527c:	00090863          	beqz	s2,ee00528c <core_bench_state+0x804>
                   crc |= 0x8000;
ee005280:	01644e33          	xor	t3,s0,s6
ee005284:	010e1a13          	slli	s4,t3,0x10
ee005288:	010a5413          	srli	s0,s4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00528c:	0085c2b3          	xor	t0,a1,s0
                if (x16 == 1)
ee005290:	0012f313          	andi	t1,t0,1
                data >>= 1;
ee005294:	005f5393          	srli	t2,t5,0x5
                if (x16 == 1)
ee005298:	00145b93          	srli	s7,s0,0x1
ee00529c:	00030863          	beqz	t1,ee0052ac <core_bench_state+0x824>
                   crc |= 0x8000;
ee0052a0:	016bc533          	xor	a0,s7,s6
ee0052a4:	01051793          	slli	a5,a0,0x10
ee0052a8:	0107db93          	srli	s7,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0052ac:	0173cfb3          	xor	t6,t2,s7
                if (x16 == 1)
ee0052b0:	001ffe93          	andi	t4,t6,1
                data >>= 1;
ee0052b4:	006f5993          	srli	s3,t5,0x6
                if (x16 == 1)
ee0052b8:	001bda93          	srli	s5,s7,0x1
ee0052bc:	000e8863          	beqz	t4,ee0052cc <core_bench_state+0x844>
                   crc |= 0x8000;
ee0052c0:	016ac0b3          	xor	ra,s5,s6
ee0052c4:	01009713          	slli	a4,ra,0x10
ee0052c8:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0052cc:	0159c8b3          	xor	a7,s3,s5
                if (x16 == 1)
ee0052d0:	0018f813          	andi	a6,a7,1
                data >>= 1;
ee0052d4:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
ee0052d8:	001ade13          	srli	t3,s5,0x1
ee0052dc:	00080863          	beqz	a6,ee0052ec <core_bench_state+0x864>
                   crc |= 0x8000;
ee0052e0:	016e4933          	xor	s2,t3,s6
ee0052e4:	01091593          	slli	a1,s2,0x10
ee0052e8:	0105de13          	srli	t3,a1,0x10
                if (x16 == 1)
ee0052ec:	001e7a13          	andi	s4,t3,1
ee0052f0:	001e5313          	srli	t1,t3,0x1
ee0052f4:	01ea0863          	beq	s4,t5,ee005304 <core_bench_state+0x87c>
                   crc |= 0x8000;
ee0052f8:	01634433          	xor	s0,t1,s6
ee0052fc:	01041293          	slli	t0,s0,0x10
ee005300:	0102d313          	srli	t1,t0,0x10
                crc=crcu32(track_counts[i],crc);
ee005304:	00062383          	lw	t2,0(a2)
        return crcu16((ee_u16)newval, crc);
ee005308:	00135a93          	srli	s5,t1,0x1
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee00530c:	0ff3f513          	zext.b	a0,t2
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005310:	006547b3          	xor	a5,a0,t1
        return crcu16((ee_u16)newval, crc);
ee005314:	01039f93          	slli	t6,t2,0x10
                if (x16 == 1)
ee005318:	0017fb93          	andi	s7,a5,1
        return crcu16((ee_u16)newval, crc);
ee00531c:	010fde93          	srli	t4,t6,0x10
                data >>= 1;
ee005320:	00155993          	srli	s3,a0,0x1
                if (x16 == 1)
ee005324:	000b8863          	beqz	s7,ee005334 <core_bench_state+0x8ac>
                   crc |= 0x8000;
ee005328:	016ac0b3          	xor	ra,s5,s6
ee00532c:	01009713          	slli	a4,ra,0x10
ee005330:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005334:	0159c8b3          	xor	a7,s3,s5
                if (x16 == 1)
ee005338:	0018f813          	andi	a6,a7,1
                data >>= 1;
ee00533c:	00255f13          	srli	t5,a0,0x2
                if (x16 == 1)
ee005340:	001ade13          	srli	t3,s5,0x1
ee005344:	00080863          	beqz	a6,ee005354 <core_bench_state+0x8cc>
                   crc |= 0x8000;
ee005348:	016e4933          	xor	s2,t3,s6
ee00534c:	01091593          	slli	a1,s2,0x10
ee005350:	0105de13          	srli	t3,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005354:	01cf4a33          	xor	s4,t5,t3
                if (x16 == 1)
ee005358:	001a7293          	andi	t0,s4,1
                data >>= 1;
ee00535c:	00355313          	srli	t1,a0,0x3
                if (x16 == 1)
ee005360:	001e5b93          	srli	s7,t3,0x1
ee005364:	00028863          	beqz	t0,ee005374 <core_bench_state+0x8ec>
                   crc |= 0x8000;
ee005368:	016bc433          	xor	s0,s7,s6
ee00536c:	01041793          	slli	a5,s0,0x10
ee005370:	0107db93          	srli	s7,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005374:	01734fb3          	xor	t6,t1,s7
                if (x16 == 1)
ee005378:	001ff993          	andi	s3,t6,1
                data >>= 1;
ee00537c:	00455093          	srli	ra,a0,0x4
                if (x16 == 1)
ee005380:	001bd813          	srli	a6,s7,0x1
ee005384:	00098863          	beqz	s3,ee005394 <core_bench_state+0x90c>
                   crc |= 0x8000;
ee005388:	01684733          	xor	a4,a6,s6
ee00538c:	01071a93          	slli	s5,a4,0x10
ee005390:	010ad813          	srli	a6,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005394:	0100c8b3          	xor	a7,ra,a6
                if (x16 == 1)
ee005398:	0018ff13          	andi	t5,a7,1
                data >>= 1;
ee00539c:	00555913          	srli	s2,a0,0x5
                if (x16 == 1)
ee0053a0:	00185a13          	srli	s4,a6,0x1
ee0053a4:	000f0863          	beqz	t5,ee0053b4 <core_bench_state+0x92c>
                   crc |= 0x8000;
ee0053a8:	016a45b3          	xor	a1,s4,s6
ee0053ac:	01059e13          	slli	t3,a1,0x10
ee0053b0:	010e5a13          	srli	s4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0053b4:	014942b3          	xor	t0,s2,s4
                if (x16 == 1)
ee0053b8:	0012f313          	andi	t1,t0,1
                data >>= 1;
ee0053bc:	00655793          	srli	a5,a0,0x6
                if (x16 == 1)
ee0053c0:	001a5f93          	srli	t6,s4,0x1
ee0053c4:	00030863          	beqz	t1,ee0053d4 <core_bench_state+0x94c>
                   crc |= 0x8000;
ee0053c8:	016fc433          	xor	s0,t6,s6
ee0053cc:	01041b93          	slli	s7,s0,0x10
ee0053d0:	010bdf93          	srli	t6,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0053d4:	01f7c9b3          	xor	s3,a5,t6
                if (x16 == 1)
ee0053d8:	0019f093          	andi	ra,s3,1
                data >>= 1;
ee0053dc:	00755713          	srli	a4,a0,0x7
                if (x16 == 1)
ee0053e0:	001fd813          	srli	a6,t6,0x1
ee0053e4:	00008863          	beqz	ra,ee0053f4 <core_bench_state+0x96c>
                   crc |= 0x8000;
ee0053e8:	01684533          	xor	a0,a6,s6
ee0053ec:	01051a93          	slli	s5,a0,0x10
ee0053f0:	010ad813          	srli	a6,s5,0x10
                if (x16 == 1)
ee0053f4:	00187893          	andi	a7,a6,1
ee0053f8:	00185593          	srli	a1,a6,0x1
ee0053fc:	00e88863          	beq	a7,a4,ee00540c <core_bench_state+0x984>
                   crc |= 0x8000;
ee005400:	0165cf33          	xor	t5,a1,s6
ee005404:	010f1913          	slli	s2,t5,0x10
ee005408:	01095593          	srli	a1,s2,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee00540c:	008ede13          	srli	t3,t4,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005410:	00be4a33          	xor	s4,t3,a1
                if (x16 == 1)
ee005414:	001a7293          	andi	t0,s4,1
                data >>= 1;
ee005418:	009ede93          	srli	t4,t4,0x9
                if (x16 == 1)
ee00541c:	0015d413          	srli	s0,a1,0x1
ee005420:	00028863          	beqz	t0,ee005430 <core_bench_state+0x9a8>
                   crc |= 0x8000;
ee005424:	01644333          	xor	t1,s0,s6
ee005428:	01031793          	slli	a5,t1,0x10
ee00542c:	0107d413          	srli	s0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005430:	008ecbb3          	xor	s7,t4,s0
                if (x16 == 1)
ee005434:	001bff93          	andi	t6,s7,1
                data >>= 1;
ee005438:	002e5993          	srli	s3,t3,0x2
                if (x16 == 1)
ee00543c:	00145a93          	srli	s5,s0,0x1
ee005440:	000f8863          	beqz	t6,ee005450 <core_bench_state+0x9c8>
                   crc |= 0x8000;
ee005444:	016ac0b3          	xor	ra,s5,s6
ee005448:	01009713          	slli	a4,ra,0x10
ee00544c:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005450:	0159c533          	xor	a0,s3,s5
                if (x16 == 1)
ee005454:	00157893          	andi	a7,a0,1
                data >>= 1;
ee005458:	003e5813          	srli	a6,t3,0x3
                if (x16 == 1)
ee00545c:	001ad593          	srli	a1,s5,0x1
ee005460:	00088863          	beqz	a7,ee005470 <core_bench_state+0x9e8>
                   crc |= 0x8000;
ee005464:	0165cf33          	xor	t5,a1,s6
ee005468:	010f1913          	slli	s2,t5,0x10
ee00546c:	01095593          	srli	a1,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005470:	00b84a33          	xor	s4,a6,a1
                if (x16 == 1)
ee005474:	001a7293          	andi	t0,s4,1
                data >>= 1;
ee005478:	004e5e93          	srli	t4,t3,0x4
                if (x16 == 1)
ee00547c:	0015d413          	srli	s0,a1,0x1
ee005480:	00028863          	beqz	t0,ee005490 <core_bench_state+0xa08>
                   crc |= 0x8000;
ee005484:	01644333          	xor	t1,s0,s6
ee005488:	01031793          	slli	a5,t1,0x10
ee00548c:	0107d413          	srli	s0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005490:	008ecbb3          	xor	s7,t4,s0
                if (x16 == 1)
ee005494:	001bff93          	andi	t6,s7,1
                data >>= 1;
ee005498:	005e5993          	srli	s3,t3,0x5
                if (x16 == 1)
ee00549c:	00145a93          	srli	s5,s0,0x1
ee0054a0:	000f8863          	beqz	t6,ee0054b0 <core_bench_state+0xa28>
                   crc |= 0x8000;
ee0054a4:	016ac0b3          	xor	ra,s5,s6
ee0054a8:	01009713          	slli	a4,ra,0x10
ee0054ac:	01075a93          	srli	s5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0054b0:	0159c533          	xor	a0,s3,s5
                if (x16 == 1)
ee0054b4:	00157893          	andi	a7,a0,1
                data >>= 1;
ee0054b8:	006e5813          	srli	a6,t3,0x6
                if (x16 == 1)
ee0054bc:	001ad593          	srli	a1,s5,0x1
ee0054c0:	00088863          	beqz	a7,ee0054d0 <core_bench_state+0xa48>
                   crc |= 0x8000;
ee0054c4:	0165cf33          	xor	t5,a1,s6
ee0054c8:	010f1913          	slli	s2,t5,0x10
ee0054cc:	01095593          	srli	a1,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0054d0:	00b84a33          	xor	s4,a6,a1
                if (x16 == 1)
ee0054d4:	001a7293          	andi	t0,s4,1
                data >>= 1;
ee0054d8:	007e5e13          	srli	t3,t3,0x7
                if (x16 == 1)
ee0054dc:	0015d793          	srli	a5,a1,0x1
ee0054e0:	00028863          	beqz	t0,ee0054f0 <core_bench_state+0xa68>
                   crc |= 0x8000;
ee0054e4:	0167ceb3          	xor	t4,a5,s6
ee0054e8:	010e9313          	slli	t1,t4,0x10
ee0054ec:	01035793          	srli	a5,t1,0x10
                if (x16 == 1)
ee0054f0:	0017fb93          	andi	s7,a5,1
ee0054f4:	0017d993          	srli	s3,a5,0x1
ee0054f8:	01cb8863          	beq	s7,t3,ee005508 <core_bench_state+0xa80>
                   crc |= 0x8000;
ee0054fc:	0169c433          	xor	s0,s3,s6
ee005500:	01041f93          	slli	t6,s0,0x10
ee005504:	010fd993          	srli	s3,t6,0x10
        crc=crc16((ee_s16) (newval>>16) ,crc);
ee005508:	0103d093          	srli	ra,t2,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee00550c:	0ff0f713          	zext.b	a4,ra
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005510:	01374ab3          	xor	s5,a4,s3
                if (x16 == 1)
ee005514:	001af513          	andi	a0,s5,1
        return crcu16((ee_u16)newval, crc);
ee005518:	0103d393          	srli	t2,t2,0x10
                data >>= 1;
ee00551c:	00175893          	srli	a7,a4,0x1
                if (x16 == 1)
ee005520:	0019d913          	srli	s2,s3,0x1
ee005524:	c519                	beqz	a0,ee005532 <core_bench_state+0xaaa>
                   crc |= 0x8000;
ee005526:	01694833          	xor	a6,s2,s6
ee00552a:	01081f13          	slli	t5,a6,0x10
ee00552e:	010f5913          	srli	s2,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005532:	0128c5b3          	xor	a1,a7,s2
                if (x16 == 1)
ee005536:	0015fa13          	andi	s4,a1,1
                data >>= 1;
ee00553a:	00275293          	srli	t0,a4,0x2
                if (x16 == 1)
ee00553e:	00195313          	srli	t1,s2,0x1
ee005542:	000a0863          	beqz	s4,ee005552 <core_bench_state+0xaca>
                   crc |= 0x8000;
ee005546:	01634e33          	xor	t3,t1,s6
ee00554a:	010e1e93          	slli	t4,t3,0x10
ee00554e:	010ed313          	srli	t1,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005552:	0062c7b3          	xor	a5,t0,t1
                if (x16 == 1)
ee005556:	0017fb93          	andi	s7,a5,1
                data >>= 1;
ee00555a:	00375f93          	srli	t6,a4,0x3
                if (x16 == 1)
ee00555e:	00135093          	srli	ra,t1,0x1
ee005562:	000b8863          	beqz	s7,ee005572 <core_bench_state+0xaea>
                   crc |= 0x8000;
ee005566:	0160c433          	xor	s0,ra,s6
ee00556a:	01041993          	slli	s3,s0,0x10
ee00556e:	0109d093          	srli	ra,s3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005572:	001fcab3          	xor	s5,t6,ra
                if (x16 == 1)
ee005576:	001af893          	andi	a7,s5,1
                data >>= 1;
ee00557a:	00475513          	srli	a0,a4,0x4
                if (x16 == 1)
ee00557e:	0010d913          	srli	s2,ra,0x1
ee005582:	00088863          	beqz	a7,ee005592 <core_bench_state+0xb0a>
                   crc |= 0x8000;
ee005586:	01694833          	xor	a6,s2,s6
ee00558a:	01081f13          	slli	t5,a6,0x10
ee00558e:	010f5913          	srli	s2,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005592:	012545b3          	xor	a1,a0,s2
                if (x16 == 1)
ee005596:	0015fa13          	andi	s4,a1,1
                data >>= 1;
ee00559a:	00575293          	srli	t0,a4,0x5
                if (x16 == 1)
ee00559e:	00195313          	srli	t1,s2,0x1
ee0055a2:	000a0863          	beqz	s4,ee0055b2 <core_bench_state+0xb2a>
                   crc |= 0x8000;
ee0055a6:	01634e33          	xor	t3,t1,s6
ee0055aa:	010e1e93          	slli	t4,t3,0x10
ee0055ae:	010ed313          	srli	t1,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0055b2:	0062c7b3          	xor	a5,t0,t1
                if (x16 == 1)
ee0055b6:	0017fb93          	andi	s7,a5,1
                data >>= 1;
ee0055ba:	00675f93          	srli	t6,a4,0x6
                if (x16 == 1)
ee0055be:	00135093          	srli	ra,t1,0x1
ee0055c2:	000b8863          	beqz	s7,ee0055d2 <core_bench_state+0xb4a>
                   crc |= 0x8000;
ee0055c6:	0160c433          	xor	s0,ra,s6
ee0055ca:	01041993          	slli	s3,s0,0x10
ee0055ce:	0109d093          	srli	ra,s3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0055d2:	001fcab3          	xor	s5,t6,ra
                if (x16 == 1)
ee0055d6:	001af893          	andi	a7,s5,1
                data >>= 1;
ee0055da:	831d                	srli	a4,a4,0x7
                if (x16 == 1)
ee0055dc:	0010df13          	srli	t5,ra,0x1
ee0055e0:	00088863          	beqz	a7,ee0055f0 <core_bench_state+0xb68>
                   crc |= 0x8000;
ee0055e4:	016f4533          	xor	a0,t5,s6
ee0055e8:	01051813          	slli	a6,a0,0x10
ee0055ec:	01085f13          	srli	t5,a6,0x10
                if (x16 == 1)
ee0055f0:	001f7913          	andi	s2,t5,1
ee0055f4:	001f5293          	srli	t0,t5,0x1
ee0055f8:	00e90863          	beq	s2,a4,ee005608 <core_bench_state+0xb80>
                   crc |= 0x8000;
ee0055fc:	0162c5b3          	xor	a1,t0,s6
ee005600:	01059a13          	slli	s4,a1,0x10
ee005604:	010a5293          	srli	t0,s4,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee005608:	0083de13          	srli	t3,t2,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00560c:	005e4eb3          	xor	t4,t3,t0
                if (x16 == 1)
ee005610:	001ef313          	andi	t1,t4,1
                data >>= 1;
ee005614:	0093d393          	srli	t2,t2,0x9
                if (x16 == 1)
ee005618:	0012df93          	srli	t6,t0,0x1
ee00561c:	00030863          	beqz	t1,ee00562c <core_bench_state+0xba4>
                   crc |= 0x8000;
ee005620:	016fc7b3          	xor	a5,t6,s6
ee005624:	01079b93          	slli	s7,a5,0x10
ee005628:	010bdf93          	srli	t6,s7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00562c:	01f3c433          	xor	s0,t2,t6
                if (x16 == 1)
ee005630:	00147993          	andi	s3,s0,1
                data >>= 1;
ee005634:	002e5093          	srli	ra,t3,0x2
                if (x16 == 1)
ee005638:	001fd713          	srli	a4,t6,0x1
ee00563c:	00098863          	beqz	s3,ee00564c <core_bench_state+0xbc4>
                   crc |= 0x8000;
ee005640:	01674ab3          	xor	s5,a4,s6
ee005644:	010a9893          	slli	a7,s5,0x10
ee005648:	0108d713          	srli	a4,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00564c:	00e0c533          	xor	a0,ra,a4
                if (x16 == 1)
ee005650:	00157813          	andi	a6,a0,1
                data >>= 1;
ee005654:	003e5f13          	srli	t5,t3,0x3
                if (x16 == 1)
ee005658:	00175a13          	srli	s4,a4,0x1
ee00565c:	00080863          	beqz	a6,ee00566c <core_bench_state+0xbe4>
                   crc |= 0x8000;
ee005660:	016a4933          	xor	s2,s4,s6
ee005664:	01091593          	slli	a1,s2,0x10
ee005668:	0105da13          	srli	s4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00566c:	014f42b3          	xor	t0,t5,s4
                if (x16 == 1)
ee005670:	0012fe93          	andi	t4,t0,1
                data >>= 1;
ee005674:	004e5313          	srli	t1,t3,0x4
                if (x16 == 1)
ee005678:	001a5b93          	srli	s7,s4,0x1
ee00567c:	000e8863          	beqz	t4,ee00568c <core_bench_state+0xc04>
                   crc |= 0x8000;
ee005680:	016bc3b3          	xor	t2,s7,s6
ee005684:	01039793          	slli	a5,t2,0x10
ee005688:	0107db93          	srli	s7,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00568c:	01734fb3          	xor	t6,t1,s7
                if (x16 == 1)
ee005690:	001ff993          	andi	s3,t6,1
                data >>= 1;
ee005694:	005e5093          	srli	ra,t3,0x5
                if (x16 == 1)
ee005698:	001bd893          	srli	a7,s7,0x1
ee00569c:	00098863          	beqz	s3,ee0056ac <core_bench_state+0xc24>
                   crc |= 0x8000;
ee0056a0:	0168c433          	xor	s0,a7,s6
ee0056a4:	01041a93          	slli	s5,s0,0x10
ee0056a8:	010ad893          	srli	a7,s5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0056ac:	0110c733          	xor	a4,ra,a7
                if (x16 == 1)
ee0056b0:	00177513          	andi	a0,a4,1
                data >>= 1;
ee0056b4:	006e5813          	srli	a6,t3,0x6
                if (x16 == 1)
ee0056b8:	0018da13          	srli	s4,a7,0x1
ee0056bc:	c519                	beqz	a0,ee0056ca <core_bench_state+0xc42>
                   crc |= 0x8000;
ee0056be:	016a4f33          	xor	t5,s4,s6
ee0056c2:	010f1913          	slli	s2,t5,0x10
ee0056c6:	01095a13          	srli	s4,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0056ca:	014845b3          	xor	a1,a6,s4
                if (x16 == 1)
ee0056ce:	0015f293          	andi	t0,a1,1
                data >>= 1;
ee0056d2:	007e5e13          	srli	t3,t3,0x7
                if (x16 == 1)
ee0056d6:	001a5393          	srli	t2,s4,0x1
ee0056da:	00028863          	beqz	t0,ee0056ea <core_bench_state+0xc62>
                   crc |= 0x8000;
ee0056de:	0163ceb3          	xor	t4,t2,s6
ee0056e2:	010e9313          	slli	t1,t4,0x10
ee0056e6:	01035393          	srli	t2,t1,0x10
                if (x16 == 1)
ee0056ea:	0013f793          	andi	a5,t2,1
ee0056ee:	0013d413          	srli	s0,t2,0x1
ee0056f2:	01c78863          	beq	a5,t3,ee005702 <core_bench_state+0xc7a>
                   crc |= 0x8000;
ee0056f6:	01644bb3          	xor	s7,s0,s6
ee0056fa:	010b9f93          	slli	t6,s7,0x10
ee0056fe:	010fd413          	srli	s0,t6,0x10
        for (i=0; i<NUM_CORE_STATES; i++) {
ee005702:	0691                	addi	a3,a3,4
ee005704:	0611                	addi	a2,a2,4
ee005706:	80d490e3          	bne	s1,a3,ee004f06 <core_bench_state+0x47e>
}
ee00570a:	50f6                	lw	ra,124(sp)
ee00570c:	8522                	mv	a0,s0
ee00570e:	5466                	lw	s0,120(sp)
ee005710:	54d6                	lw	s1,116(sp)
ee005712:	5946                	lw	s2,112(sp)
ee005714:	59b6                	lw	s3,108(sp)
ee005716:	5a26                	lw	s4,104(sp)
ee005718:	5a96                	lw	s5,100(sp)
ee00571a:	5b06                	lw	s6,96(sp)
ee00571c:	4bf6                	lw	s7,92(sp)
ee00571e:	6109                	addi	sp,sp,128
ee005720:	8082                	ret
        p=memblock;
ee005722:	c64a                	sw	s2,12(sp)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee005724:	e7696e63          	bltu	s2,s6,ee004da0 <core_bench_state+0x318>
ee005728:	fd4ff06f          	j	ee004efc <core_bench_state+0x474>
ee00572c:	86ca                	mv	a3,s2
                if (*p!=',')
ee00572e:	02c00993          	li	s3,44
ee005732:	0006c383          	lbu	t2,0(a3)
                        *p^=(ee_u8)seed1;
ee005736:	0173c733          	xor	a4,t2,s7
                if (*p!=',')
ee00573a:	01338463          	beq	t2,s3,ee005742 <core_bench_state+0xcba>
                        *p^=(ee_u8)seed1;
ee00573e:	00e68023          	sb	a4,0(a3)
        while (p < (memblock+blksize)) { /* insert some corruption */
ee005742:	96d6                	add	a3,a3,s5
ee005744:	ff66e7e3          	bltu	a3,s6,ee005732 <core_bench_state+0xcaa>
        while (*p!=0) {
ee005748:	00094603          	lbu	a2,0(s2)
ee00574c:	00c10993          	addi	s3,sp,12
ee005750:	da061063          	bnez	a2,ee004cf0 <core_bench_state+0x268>
        p=memblock;
ee005754:	c64a                	sw	s2,12(sp)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee005756:	fb697363          	bgeu	s2,s6,ee004efc <core_bench_state+0x474>
                if (*p!=',')
ee00575a:	02c00093          	li	ra,44
ee00575e:	00094603          	lbu	a2,0(s2)
                        *p^=(ee_u8)seed2;
ee005762:	01464733          	xor	a4,a2,s4
                if (*p!=',')
ee005766:	00160463          	beq	a2,ra,ee00576e <core_bench_state+0xce6>
                        *p^=(ee_u8)seed2;
ee00576a:	00e90023          	sb	a4,0(s2)
        while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
ee00576e:	9956                	add	s2,s2,s5
ee005770:	ff6967e3          	bltu	s2,s6,ee00575e <core_bench_state+0xcd6>
ee005774:	f88ff06f          	j	ee004efc <core_bench_state+0x474>
        while (p < (memblock+blksize)) { /* insert some corruption */
ee005778:	00a90b33          	add	s6,s2,a0
ee00577c:	c1696363          	bltu	s2,s6,ee004b82 <core_bench_state+0xfa>
ee005780:	f7cff06f          	j	ee004efc <core_bench_state+0x474>

ee005784 <calc_func>:
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
ee005784:	1101                	addi	sp,sp,-32
ee005786:	ca26                	sw	s1,20(sp)
        ee_s16 data=*pdata;
ee005788:	00051483          	lh	s1,0(a0)
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
ee00578c:	ce06                	sw	ra,28(sp)
ee00578e:	cc22                	sw	s0,24(sp)
        ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
ee005790:	4074d793          	srai	a5,s1,0x7
ee_s16 calc_func(ee_s16 *pdata, core_results *res) {
ee005794:	c84a                	sw	s2,16(sp)
ee005796:	c64e                	sw	s3,12(sp)
        if (optype) /* if cached, use cache */
ee005798:	0017f093          	andi	ra,a5,1
ee00579c:	00008b63          	beqz	ra,ee0057b2 <calc_func+0x2e>
}
ee0057a0:	40f2                	lw	ra,28(sp)
ee0057a2:	4462                	lw	s0,24(sp)
ee0057a4:	4942                	lw	s2,16(sp)
ee0057a6:	49b2                	lw	s3,12(sp)
                return (data & 0x007f);
ee0057a8:	07f4f513          	andi	a0,s1,127
}
ee0057ac:	44d2                	lw	s1,20(sp)
ee0057ae:	6105                	addi	sp,sp,32
ee0057b0:	8082                	ret
                ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
ee0057b2:	4034d293          	srai	t0,s1,0x3
ee0057b6:	00f2f313          	andi	t1,t0,15
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
ee0057ba:	00431713          	slli	a4,t1,0x4
                ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
ee0057be:	0074f693          	andi	a3,s1,7
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
ee0057c2:	0385d403          	lhu	s0,56(a1)
ee0057c6:	89aa                	mv	s3,a0
ee0057c8:	892e                	mv	s2,a1
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
ee0057ca:	00676733          	or	a4,a4,t1
                switch (flag) {
ee0057ce:	50068563          	beqz	a3,ee005cd8 <calc_func+0x554>
ee0057d2:	4505                	li	a0,1
ee0057d4:	4ea69d63          	bne	a3,a0,ee005cce <calc_func+0x54a>
        crc=crc16(matrix_test(N,C,A,B,val),crc);
ee0057d8:	55d0                	lw	a2,44(a1)
ee0057da:	5994                	lw	a3,48(a1)
ee0057dc:	02892503          	lw	a0,40(s2)
ee0057e0:	59cc                	lw	a1,52(a1)
ee0057e2:	a51fb0ef          	jal	ra,ee001232 <matrix_test>
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee0057e6:	0ff57593          	zext.b	a1,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0057ea:	0085c633          	xor	a2,a1,s0
        return crcu16((ee_u16)newval, crc);
ee0057ee:	01051e13          	slli	t3,a0,0x10
                if (x16 == 1)
ee0057f2:	00167893          	andi	a7,a2,1
        return crcu16((ee_u16)newval, crc);
ee0057f6:	010e5e93          	srli	t4,t3,0x10
                data >>= 1;
ee0057fa:	0015df13          	srli	t5,a1,0x1
                crc >>= 1;
ee0057fe:	00145313          	srli	t1,s0,0x1
                if (x16 == 1)
ee005802:	00088b63          	beqz	a7,ee005818 <calc_func+0x94>
                   crc |= 0x8000;
ee005806:	7fe9                	lui	t6,0xffffa
ee005808:	001f8793          	addi	a5,t6,1 # ffffa001 <STACK+0xffb8271>
ee00580c:	00f340b3          	xor	ra,t1,a5
ee005810:	01009293          	slli	t0,ra,0x10
ee005814:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005818:	006f4733          	xor	a4,t5,t1
                if (x16 == 1)
ee00581c:	00177393          	andi	t2,a4,1
                data >>= 1;
ee005820:	0025d693          	srli	a3,a1,0x2
                crc >>= 1;
ee005824:	00135893          	srli	a7,t1,0x1
                if (x16 == 1)
ee005828:	00038b63          	beqz	t2,ee00583e <calc_func+0xba>
                   crc |= 0x8000;
ee00582c:	7869                	lui	a6,0xffffa
ee00582e:	00180413          	addi	s0,a6,1 # ffffa001 <STACK+0xffb8271>
ee005832:	0088c533          	xor	a0,a7,s0
ee005836:	01051613          	slli	a2,a0,0x10
ee00583a:	01065893          	srli	a7,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00583e:	0116ce33          	xor	t3,a3,a7
                if (x16 == 1)
ee005842:	001e7f13          	andi	t5,t3,1
                data >>= 1;
ee005846:	0035df93          	srli	t6,a1,0x3
                crc >>= 1;
ee00584a:	0018d713          	srli	a4,a7,0x1
                if (x16 == 1)
ee00584e:	000f0b63          	beqz	t5,ee005864 <calc_func+0xe0>
                   crc |= 0x8000;
ee005852:	77e9                	lui	a5,0xffffa
ee005854:	00178093          	addi	ra,a5,1 # ffffa001 <STACK+0xffb8271>
ee005858:	001742b3          	xor	t0,a4,ra
ee00585c:	01029313          	slli	t1,t0,0x10
ee005860:	01035713          	srli	a4,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005864:	00efc3b3          	xor	t2,t6,a4
                if (x16 == 1)
ee005868:	0013f813          	andi	a6,t2,1
                data >>= 1;
ee00586c:	0045d693          	srli	a3,a1,0x4
                crc >>= 1;
ee005870:	00175e13          	srli	t3,a4,0x1
                if (x16 == 1)
ee005874:	00080b63          	beqz	a6,ee00588a <calc_func+0x106>
                   crc |= 0x8000;
ee005878:	7469                	lui	s0,0xffffa
ee00587a:	00140613          	addi	a2,s0,1 # ffffa001 <STACK+0xffb8271>
ee00587e:	00ce4533          	xor	a0,t3,a2
ee005882:	01051893          	slli	a7,a0,0x10
ee005886:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00588a:	01c6cf33          	xor	t5,a3,t3
                if (x16 == 1)
ee00588e:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee005892:	0055d793          	srli	a5,a1,0x5
                crc >>= 1;
ee005896:	001e5393          	srli	t2,t3,0x1
                if (x16 == 1)
ee00589a:	000f8b63          	beqz	t6,ee0058b0 <calc_func+0x12c>
                   crc |= 0x8000;
ee00589e:	70e9                	lui	ra,0xffffa
ee0058a0:	00108293          	addi	t0,ra,1 # ffffa001 <STACK+0xffb8271>
ee0058a4:	0053c333          	xor	t1,t2,t0
ee0058a8:	01031713          	slli	a4,t1,0x10
ee0058ac:	01075393          	srli	t2,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0058b0:	0077c833          	xor	a6,a5,t2
                if (x16 == 1)
ee0058b4:	00187413          	andi	s0,a6,1
                data >>= 1;
ee0058b8:	0065d693          	srli	a3,a1,0x6
                crc >>= 1;
ee0058bc:	0013df13          	srli	t5,t2,0x1
                if (x16 == 1)
ee0058c0:	c811                	beqz	s0,ee0058d4 <calc_func+0x150>
                   crc |= 0x8000;
ee0058c2:	7669                	lui	a2,0xffffa
ee0058c4:	00160893          	addi	a7,a2,1 # ffffa001 <STACK+0xffb8271>
ee0058c8:	011f4533          	xor	a0,t5,a7
ee0058cc:	01051e13          	slli	t3,a0,0x10
ee0058d0:	010e5f13          	srli	t5,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0058d4:	01e6cfb3          	xor	t6,a3,t5
                if (x16 == 1)
ee0058d8:	001ff793          	andi	a5,t6,1
                data >>= 1;
ee0058dc:	819d                	srli	a1,a1,0x7
                crc >>= 1;
ee0058de:	001f5393          	srli	t2,t5,0x1
                if (x16 == 1)
ee0058e2:	cb91                	beqz	a5,ee0058f6 <calc_func+0x172>
                   crc |= 0x8000;
ee0058e4:	70e9                	lui	ra,0xffffa
ee0058e6:	00108293          	addi	t0,ra,1 # ffffa001 <STACK+0xffb8271>
ee0058ea:	0053c333          	xor	t1,t2,t0
ee0058ee:	01031713          	slli	a4,t1,0x10
ee0058f2:	01075393          	srli	t2,a4,0x10
                if (x16 == 1)
ee0058f6:	0013f813          	andi	a6,t2,1
                crc >>= 1;
ee0058fa:	0013d513          	srli	a0,t2,0x1
                if (x16 == 1)
ee0058fe:	00b80b63          	beq	a6,a1,ee005914 <calc_func+0x190>
                   crc |= 0x8000;
ee005902:	7469                	lui	s0,0xffffa
ee005904:	00140693          	addi	a3,s0,1 # ffffa001 <STACK+0xffb8271>
ee005908:	00d54633          	xor	a2,a0,a3
ee00590c:	01061893          	slli	a7,a2,0x10
ee005910:	0108d513          	srli	a0,a7,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee005914:	008ede13          	srli	t3,t4,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005918:	00ae4f33          	xor	t5,t3,a0
                if (x16 == 1)
ee00591c:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee005920:	009ede93          	srli	t4,t4,0x9
                if (x16 == 1)
ee005924:	00155313          	srli	t1,a0,0x1
ee005928:	000f8b63          	beqz	t6,ee00593e <calc_func+0x1ba>
                   crc |= 0x8000;
ee00592c:	77e9                	lui	a5,0xffffa
ee00592e:	00178593          	addi	a1,a5,1 # ffffa001 <STACK+0xffb8271>
ee005932:	00b340b3          	xor	ra,t1,a1
ee005936:	01009293          	slli	t0,ra,0x10
ee00593a:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00593e:	006ec733          	xor	a4,t4,t1
                if (x16 == 1)
ee005942:	00177393          	andi	t2,a4,1
                data >>= 1;
ee005946:	002e5813          	srli	a6,t3,0x2
                if (x16 == 1)
ee00594a:	00135513          	srli	a0,t1,0x1
ee00594e:	00038b63          	beqz	t2,ee005964 <calc_func+0x1e0>
                   crc |= 0x8000;
ee005952:	7469                	lui	s0,0xffffa
ee005954:	00140693          	addi	a3,s0,1 # ffffa001 <STACK+0xffb8271>
ee005958:	00d54633          	xor	a2,a0,a3
ee00595c:	01061893          	slli	a7,a2,0x10
ee005960:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005964:	00a84f33          	xor	t5,a6,a0
                if (x16 == 1)
ee005968:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee00596c:	003e5e93          	srli	t4,t3,0x3
                if (x16 == 1)
ee005970:	00155313          	srli	t1,a0,0x1
ee005974:	000f8b63          	beqz	t6,ee00598a <calc_func+0x206>
                   crc |= 0x8000;
ee005978:	77e9                	lui	a5,0xffffa
ee00597a:	00178593          	addi	a1,a5,1 # ffffa001 <STACK+0xffb8271>
ee00597e:	00b340b3          	xor	ra,t1,a1
ee005982:	01009293          	slli	t0,ra,0x10
ee005986:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00598a:	006ec733          	xor	a4,t4,t1
                if (x16 == 1)
ee00598e:	00177393          	andi	t2,a4,1
                data >>= 1;
ee005992:	004e5813          	srli	a6,t3,0x4
                if (x16 == 1)
ee005996:	00135513          	srli	a0,t1,0x1
ee00599a:	00038b63          	beqz	t2,ee0059b0 <calc_func+0x22c>
                   crc |= 0x8000;
ee00599e:	7469                	lui	s0,0xffffa
ee0059a0:	00140693          	addi	a3,s0,1 # ffffa001 <STACK+0xffb8271>
ee0059a4:	00d54633          	xor	a2,a0,a3
ee0059a8:	01061893          	slli	a7,a2,0x10
ee0059ac:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0059b0:	00a84f33          	xor	t5,a6,a0
                if (x16 == 1)
ee0059b4:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee0059b8:	005e5e93          	srli	t4,t3,0x5
                if (x16 == 1)
ee0059bc:	00155313          	srli	t1,a0,0x1
ee0059c0:	000f8b63          	beqz	t6,ee0059d6 <calc_func+0x252>
                   crc |= 0x8000;
ee0059c4:	77e9                	lui	a5,0xffffa
ee0059c6:	00178593          	addi	a1,a5,1 # ffffa001 <STACK+0xffb8271>
ee0059ca:	00b340b3          	xor	ra,t1,a1
ee0059ce:	01009293          	slli	t0,ra,0x10
ee0059d2:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0059d6:	006ec733          	xor	a4,t4,t1
                if (x16 == 1)
ee0059da:	00177393          	andi	t2,a4,1
                data >>= 1;
ee0059de:	006e5813          	srli	a6,t3,0x6
                if (x16 == 1)
ee0059e2:	00135513          	srli	a0,t1,0x1
ee0059e6:	00038b63          	beqz	t2,ee0059fc <calc_func+0x278>
                   crc |= 0x8000;
ee0059ea:	7469                	lui	s0,0xffffa
ee0059ec:	00140693          	addi	a3,s0,1 # ffffa001 <STACK+0xffb8271>
ee0059f0:	00d54633          	xor	a2,a0,a3
ee0059f4:	01061893          	slli	a7,a2,0x10
ee0059f8:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0059fc:	00a84f33          	xor	t5,a6,a0
                if (x16 == 1)
ee005a00:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee005a04:	007e5e13          	srli	t3,t3,0x7
                if (x16 == 1)
ee005a08:	00155293          	srli	t0,a0,0x1
ee005a0c:	000f8b63          	beqz	t6,ee005a22 <calc_func+0x29e>
                   crc |= 0x8000;
ee005a10:	7ee9                	lui	t4,0xffffa
ee005a12:	001e8793          	addi	a5,t4,1 # ffffa001 <STACK+0xffb8271>
ee005a16:	00f2c5b3          	xor	a1,t0,a5
ee005a1a:	01059093          	slli	ra,a1,0x10
ee005a1e:	0100d293          	srli	t0,ra,0x10
                if (x16 == 1)
ee005a22:	0012f313          	andi	t1,t0,1
ee005a26:	0012d513          	srli	a0,t0,0x1
ee005a2a:	01c30b63          	beq	t1,t3,ee005a40 <calc_func+0x2bc>
                   crc |= 0x8000;
ee005a2e:	7769                	lui	a4,0xffffa
ee005a30:	00170393          	addi	t2,a4,1 # ffffa001 <STACK+0xffb8271>
ee005a34:	00754833          	xor	a6,a0,t2
ee005a38:	01081413          	slli	s0,a6,0x10
ee005a3c:	01045513          	srli	a0,s0,0x10
                                if (res->crcmatrix==0)
ee005a40:	03c95683          	lhu	a3,60(s2)
ee005a44:	e299                	bnez	a3,ee005a4a <calc_func+0x2c6>
                                        res->crcmatrix=retval;
ee005a46:	02a91e23          	sh	a0,60(s2)
ee005a4a:	03895403          	lhu	s0,56(s2)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
ee005a4e:	01051613          	slli	a2,a0,0x10
ee005a52:	41065893          	srai	a7,a2,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee005a56:	0ff8ff13          	zext.b	t5,a7
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005a5a:	008f4fb3          	xor	t6,t5,s0
                if (x16 == 1)
ee005a5e:	001ffe13          	andi	t3,t6,1
                data >>= 1;
ee005a62:	001f5e93          	srli	t4,t5,0x1
                if (x16 == 1)
ee005a66:	00145313          	srli	t1,s0,0x1
ee005a6a:	000e0b63          	beqz	t3,ee005a80 <calc_func+0x2fc>
                   crc |= 0x8000;
ee005a6e:	75e9                	lui	a1,0xffffa
ee005a70:	00158093          	addi	ra,a1,1 # ffffa001 <STACK+0xffb8271>
ee005a74:	001347b3          	xor	a5,t1,ra
ee005a78:	01079293          	slli	t0,a5,0x10
ee005a7c:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005a80:	006ec733          	xor	a4,t4,t1
                if (x16 == 1)
ee005a84:	00177393          	andi	t2,a4,1
                data >>= 1;
ee005a88:	002f5813          	srli	a6,t5,0x2
                if (x16 == 1)
ee005a8c:	00135e13          	srli	t3,t1,0x1
ee005a90:	00038b63          	beqz	t2,ee005aa6 <calc_func+0x322>
                   crc |= 0x8000;
ee005a94:	76e9                	lui	a3,0xffffa
ee005a96:	00168413          	addi	s0,a3,1 # ffffa001 <STACK+0xffb8271>
ee005a9a:	008e4633          	xor	a2,t3,s0
ee005a9e:	01061f93          	slli	t6,a2,0x10
ee005aa2:	010fde13          	srli	t3,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005aa6:	01c84eb3          	xor	t4,a6,t3
                if (x16 == 1)
ee005aaa:	001ef093          	andi	ra,t4,1
                data >>= 1;
ee005aae:	003f5593          	srli	a1,t5,0x3
                if (x16 == 1)
ee005ab2:	001e5393          	srli	t2,t3,0x1
ee005ab6:	00008b63          	beqz	ra,ee005acc <calc_func+0x348>
                   crc |= 0x8000;
ee005aba:	72e9                	lui	t0,0xffffa
ee005abc:	00128313          	addi	t1,t0,1 # ffffa001 <STACK+0xffb8271>
ee005ac0:	0063c7b3          	xor	a5,t2,t1
ee005ac4:	01079713          	slli	a4,a5,0x10
ee005ac8:	01075393          	srli	t2,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005acc:	0075c833          	xor	a6,a1,t2
                if (x16 == 1)
ee005ad0:	00187693          	andi	a3,a6,1
                data >>= 1;
ee005ad4:	004f5413          	srli	s0,t5,0x4
                if (x16 == 1)
ee005ad8:	0013d093          	srli	ra,t2,0x1
ee005adc:	ca91                	beqz	a3,ee005af0 <calc_func+0x36c>
                   crc |= 0x8000;
ee005ade:	7669                	lui	a2,0xffffa
ee005ae0:	00160f93          	addi	t6,a2,1 # ffffa001 <STACK+0xffb8271>
ee005ae4:	01f0ce33          	xor	t3,ra,t6
ee005ae8:	010e1e93          	slli	t4,t3,0x10
ee005aec:	010ed093          	srli	ra,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005af0:	001445b3          	xor	a1,s0,ra
                if (x16 == 1)
ee005af4:	0015f293          	andi	t0,a1,1
                data >>= 1;
ee005af8:	005f5313          	srli	t1,t5,0x5
                if (x16 == 1)
ee005afc:	0010d693          	srli	a3,ra,0x1
ee005b00:	00028b63          	beqz	t0,ee005b16 <calc_func+0x392>
                   crc |= 0x8000;
ee005b04:	7769                	lui	a4,0xffffa
ee005b06:	00170393          	addi	t2,a4,1 # ffffa001 <STACK+0xffb8271>
ee005b0a:	0076c7b3          	xor	a5,a3,t2
ee005b0e:	01079813          	slli	a6,a5,0x10
ee005b12:	01085693          	srli	a3,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005b16:	00d34433          	xor	s0,t1,a3
                if (x16 == 1)
ee005b1a:	00147f93          	andi	t6,s0,1
                data >>= 1;
ee005b1e:	006f5613          	srli	a2,t5,0x6
                if (x16 == 1)
ee005b22:	0016d293          	srli	t0,a3,0x1
ee005b26:	000f8b63          	beqz	t6,ee005b3c <calc_func+0x3b8>
                   crc |= 0x8000;
ee005b2a:	7e69                	lui	t3,0xffffa
ee005b2c:	001e0e93          	addi	t4,t3,1 # ffffa001 <STACK+0xffb8271>
ee005b30:	01d2c0b3          	xor	ra,t0,t4
ee005b34:	01009593          	slli	a1,ra,0x10
ee005b38:	0105d293          	srli	t0,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005b3c:	00564333          	xor	t1,a2,t0
                if (x16 == 1)
ee005b40:	00137713          	andi	a4,t1,1
                data >>= 1;
ee005b44:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
ee005b48:	0012d413          	srli	s0,t0,0x1
ee005b4c:	cb11                	beqz	a4,ee005b60 <calc_func+0x3dc>
                   crc |= 0x8000;
ee005b4e:	73e9                	lui	t2,0xffffa
ee005b50:	00138813          	addi	a6,t2,1 # ffffa001 <STACK+0xffb8271>
ee005b54:	010447b3          	xor	a5,s0,a6
ee005b58:	01079693          	slli	a3,a5,0x10
ee005b5c:	0106d413          	srli	s0,a3,0x10
                if (x16 == 1)
ee005b60:	00147f93          	andi	t6,s0,1
ee005b64:	00145593          	srli	a1,s0,0x1
ee005b68:	01ef8b63          	beq	t6,t5,ee005b7e <calc_func+0x3fa>
                   crc |= 0x8000;
ee005b6c:	7669                	lui	a2,0xffffa
ee005b6e:	00160e13          	addi	t3,a2,1 # ffffa001 <STACK+0xffb8271>
ee005b72:	01c5ceb3          	xor	t4,a1,t3
ee005b76:	010e9093          	slli	ra,t4,0x10
ee005b7a:	0100d593          	srli	a1,ra,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee005b7e:	8121                	srli	a0,a0,0x8
ee005b80:	0ff57293          	zext.b	t0,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005b84:	00b2c333          	xor	t1,t0,a1
                if (x16 == 1)
ee005b88:	00137713          	andi	a4,t1,1
                data >>= 1;
ee005b8c:	0012df13          	srli	t5,t0,0x1
                if (x16 == 1)
ee005b90:	0015d413          	srli	s0,a1,0x1
ee005b94:	cb11                	beqz	a4,ee005ba8 <calc_func+0x424>
                   crc |= 0x8000;
ee005b96:	73e9                	lui	t2,0xffffa
ee005b98:	00138813          	addi	a6,t2,1 # ffffa001 <STACK+0xffb8271>
ee005b9c:	010447b3          	xor	a5,s0,a6
ee005ba0:	01079693          	slli	a3,a5,0x10
ee005ba4:	0106d413          	srli	s0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005ba8:	008f4fb3          	xor	t6,t5,s0
                if (x16 == 1)
ee005bac:	001ff613          	andi	a2,t6,1
                data >>= 1;
ee005bb0:	0022de13          	srli	t3,t0,0x2
                if (x16 == 1)
ee005bb4:	00145313          	srli	t1,s0,0x1
ee005bb8:	ca11                	beqz	a2,ee005bcc <calc_func+0x448>
                   crc |= 0x8000;
ee005bba:	7ee9                	lui	t4,0xffffa
ee005bbc:	001e8093          	addi	ra,t4,1 # ffffa001 <STACK+0xffb8271>
ee005bc0:	001345b3          	xor	a1,t1,ra
ee005bc4:	01059513          	slli	a0,a1,0x10
ee005bc8:	01055313          	srli	t1,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005bcc:	006e4733          	xor	a4,t3,t1
                if (x16 == 1)
ee005bd0:	00177f13          	andi	t5,a4,1
                data >>= 1;
ee005bd4:	0032d393          	srli	t2,t0,0x3
                if (x16 == 1)
ee005bd8:	00135f93          	srli	t6,t1,0x1
ee005bdc:	000f0b63          	beqz	t5,ee005bf2 <calc_func+0x46e>
                   crc |= 0x8000;
ee005be0:	7869                	lui	a6,0xffffa
ee005be2:	00180693          	addi	a3,a6,1 # ffffa001 <STACK+0xffb8271>
ee005be6:	00dfc7b3          	xor	a5,t6,a3
ee005bea:	01079413          	slli	s0,a5,0x10
ee005bee:	01045f93          	srli	t6,s0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005bf2:	01f3c633          	xor	a2,t2,t6
                if (x16 == 1)
ee005bf6:	00167e13          	andi	t3,a2,1
                data >>= 1;
ee005bfa:	0042de93          	srli	t4,t0,0x4
                if (x16 == 1)
ee005bfe:	001fd713          	srli	a4,t6,0x1
ee005c02:	000e0b63          	beqz	t3,ee005c18 <calc_func+0x494>
                   crc |= 0x8000;
ee005c06:	70e9                	lui	ra,0xffffa
ee005c08:	00108593          	addi	a1,ra,1 # ffffa001 <STACK+0xffb8271>
ee005c0c:	00b74533          	xor	a0,a4,a1
ee005c10:	01051313          	slli	t1,a0,0x10
ee005c14:	01035713          	srli	a4,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005c18:	00eecf33          	xor	t5,t4,a4
                if (x16 == 1)
ee005c1c:	001f7393          	andi	t2,t5,1
                data >>= 1;
ee005c20:	0052d813          	srli	a6,t0,0x5
                if (x16 == 1)
ee005c24:	00175e13          	srli	t3,a4,0x1
ee005c28:	00038b63          	beqz	t2,ee005c3e <calc_func+0x4ba>
                   crc |= 0x8000;
ee005c2c:	76e9                	lui	a3,0xffffa
ee005c2e:	00168413          	addi	s0,a3,1 # ffffa001 <STACK+0xffb8271>
ee005c32:	008e47b3          	xor	a5,t3,s0
ee005c36:	01079f93          	slli	t6,a5,0x10
ee005c3a:	010fde13          	srli	t3,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005c3e:	01c84633          	xor	a2,a6,t3
                if (x16 == 1)
ee005c42:	00167e93          	andi	t4,a2,1
                data >>= 1;
ee005c46:	0062d093          	srli	ra,t0,0x6
                if (x16 == 1)
ee005c4a:	001e5f13          	srli	t5,t3,0x1
ee005c4e:	000e8b63          	beqz	t4,ee005c64 <calc_func+0x4e0>
                   crc |= 0x8000;
ee005c52:	75e9                	lui	a1,0xffffa
ee005c54:	00158513          	addi	a0,a1,1 # ffffa001 <STACK+0xffb8271>
ee005c58:	00af4333          	xor	t1,t5,a0
ee005c5c:	01031713          	slli	a4,t1,0x10
ee005c60:	01075f13          	srli	t5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005c64:	01e0c3b3          	xor	t2,ra,t5
                if (x16 == 1)
ee005c68:	0013f813          	andi	a6,t2,1
                data >>= 1;
ee005c6c:	0072d293          	srli	t0,t0,0x7
                if (x16 == 1)
ee005c70:	001f5e13          	srli	t3,t5,0x1
ee005c74:	00080b63          	beqz	a6,ee005c8a <calc_func+0x506>
                   crc |= 0x8000;
ee005c78:	76e9                	lui	a3,0xffffa
ee005c7a:	00168413          	addi	s0,a3,1 # ffffa001 <STACK+0xffb8271>
ee005c7e:	008e47b3          	xor	a5,t3,s0
ee005c82:	01079f93          	slli	t6,a5,0x10
ee005c86:	010fde13          	srli	t3,t6,0x10
                if (x16 == 1)
ee005c8a:	001e7613          	andi	a2,t3,1
ee005c8e:	001e5313          	srli	t1,t3,0x1
ee005c92:	00560b63          	beq	a2,t0,ee005ca8 <calc_func+0x524>
                   crc |= 0x8000;
ee005c96:	7ee9                	lui	t4,0xffffa
ee005c98:	001e8093          	addi	ra,t4,1 # ffffa001 <STACK+0xffb8271>
ee005c9c:	001345b3          	xor	a1,t1,ra
ee005ca0:	01059513          	slli	a0,a1,0x10
ee005ca4:	01055313          	srli	t1,a0,0x10
                retval &= 0x007f;
ee005ca8:	07f8f513          	andi	a0,a7,127
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
ee005cac:	f004f493          	andi	s1,s1,-256
}
ee005cb0:	40f2                	lw	ra,28(sp)
ee005cb2:	4462                	lw	s0,24(sp)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
ee005cb4:	009568b3          	or	a7,a0,s1
                res->crc=crcu16(retval,res->crc);
ee005cb8:	02691c23          	sh	t1,56(s2)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
ee005cbc:	0808e913          	ori	s2,a7,128
ee005cc0:	01299023          	sh	s2,0(s3)
}
ee005cc4:	44d2                	lw	s1,20(sp)
ee005cc6:	4942                	lw	s2,16(sp)
ee005cc8:	49b2                	lw	s3,12(sp)
ee005cca:	6105                	addi	sp,sp,32
ee005ccc:	8082                	ret
                res->crc=crcu16(retval,res->crc);
ee005cce:	01049513          	slli	a0,s1,0x10
ee005cd2:	8141                	srli	a0,a0,0x10
        ee_s16 data=*pdata;
ee005cd4:	88a6                	mv	a7,s1
ee005cd6:	b341                	j	ee005a56 <calc_func+0x2d2>
                                if (dtype<0x22) /* set min period for bit corruption */
ee005cd8:	02200393          	li	t2,34
ee005cdc:	883a                	mv	a6,a4
ee005cde:	00775463          	bge	a4,t2,ee005ce6 <calc_func+0x562>
ee005ce2:	02200813          	li	a6,34
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
ee005ce6:	00291683          	lh	a3,2(s2)
ee005cea:	00091603          	lh	a2,0(s2)
ee005cee:	01492583          	lw	a1,20(s2)
ee005cf2:	01892503          	lw	a0,24(s2)
ee005cf6:	87a2                	mv	a5,s0
ee005cf8:	0ff87713          	zext.b	a4,a6
ee005cfc:	d8dfe0ef          	jal	ra,ee004a88 <core_bench_state>
                                if (res->crcstate==0)
ee005d00:	03e95403          	lhu	s0,62(s2)
ee005d04:	d40413e3          	bnez	s0,ee005a4a <calc_func+0x2c6>
                                        res->crcstate=retval;
ee005d08:	02a91f23          	sh	a0,62(s2)
ee005d0c:	bb3d                	j	ee005a4a <calc_func+0x2c6>

ee005d0e <cmp_complex>:
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
ee005d0e:	1101                	addi	sp,sp,-32
ee005d10:	c84a                	sw	s2,16(sp)
        ee_s16 data=*pdata;
ee005d12:	00051903          	lh	s2,0(a0)
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
ee005d16:	ce06                	sw	ra,28(sp)
ee005d18:	ca26                	sw	s1,20(sp)
        ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
ee005d1a:	40795793          	srai	a5,s2,0x7
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
ee005d1e:	c64e                	sw	s3,12(sp)
ee005d20:	c452                	sw	s4,8(sp)
ee005d22:	cc22                	sw	s0,24(sp)
ee005d24:	c256                	sw	s5,4(sp)
        if (optype) /* if cached, use cache */
ee005d26:	0017f093          	andi	ra,a5,1
ee_s32 cmp_complex(list_data *a, list_data *b, core_results *res) {
ee005d2a:	89ae                	mv	s3,a1
ee005d2c:	84b2                	mv	s1,a2
                return (data & 0x007f);
ee005d2e:	07f97a13          	andi	s4,s2,127
        if (optype) /* if cached, use cache */
ee005d32:	2a009263          	bnez	ra,ee005fd6 <cmp_complex+0x2c8>
                ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
ee005d36:	40395713          	srai	a4,s2,0x3
ee005d3a:	00f77293          	andi	t0,a4,15
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
ee005d3e:	00429693          	slli	a3,t0,0x4
                ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
ee005d42:	00797313          	andi	t1,s2,7
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
ee005d46:	03865403          	lhu	s0,56(a2)
ee005d4a:	8aaa                	mv	s5,a0
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
ee005d4c:	00d2e733          	or	a4,t0,a3
                switch (flag) {
ee005d50:	7e030d63          	beqz	t1,ee00654a <cmp_complex+0x83c>
ee005d54:	4505                	li	a0,1
ee005d56:	02a309e3          	beq	t1,a0,ee006588 <cmp_complex+0x87a>
                res->crc=crcu16(retval,res->crc);
ee005d5a:	01091713          	slli	a4,s2,0x10
ee005d5e:	01075513          	srli	a0,a4,0x10
        ee_s16 data=*pdata;
ee005d62:	82ca                	mv	t0,s2
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee005d64:	0ff2f313          	zext.b	t1,t0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005d68:	008346b3          	xor	a3,t1,s0
                if (x16 == 1)
ee005d6c:	0016f393          	andi	t2,a3,1
                data >>= 1;
ee005d70:	00135813          	srli	a6,t1,0x1
                if (x16 == 1)
ee005d74:	00145593          	srli	a1,s0,0x1
ee005d78:	00038b63          	beqz	t2,ee005d8e <cmp_complex+0x80>
                   crc |= 0x8000;
ee005d7c:	78e9                	lui	a7,0xffffa
ee005d7e:	00188e13          	addi	t3,a7,1 # ffffa001 <STACK+0xffb8271>
ee005d82:	01c5c633          	xor	a2,a1,t3
ee005d86:	01061a13          	slli	s4,a2,0x10
ee005d8a:	010a5593          	srli	a1,s4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005d8e:	00b84eb3          	xor	t4,a6,a1
                if (x16 == 1)
ee005d92:	001eff13          	andi	t5,t4,1
                data >>= 1;
ee005d96:	00235f93          	srli	t6,t1,0x2
                if (x16 == 1)
ee005d9a:	0015d393          	srli	t2,a1,0x1
ee005d9e:	000f0b63          	beqz	t5,ee005db4 <cmp_complex+0xa6>
                   crc |= 0x8000;
ee005da2:	70e9                	lui	ra,0xffffa
ee005da4:	00108413          	addi	s0,ra,1 # ffffa001 <STACK+0xffb8271>
ee005da8:	0083c7b3          	xor	a5,t2,s0
ee005dac:	01079713          	slli	a4,a5,0x10
ee005db0:	01075393          	srli	t2,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005db4:	007fc6b3          	xor	a3,t6,t2
                if (x16 == 1)
ee005db8:	0016f813          	andi	a6,a3,1
                data >>= 1;
ee005dbc:	00335893          	srli	a7,t1,0x3
                if (x16 == 1)
ee005dc0:	0013de93          	srli	t4,t2,0x1
ee005dc4:	00080b63          	beqz	a6,ee005dda <cmp_complex+0xcc>
                   crc |= 0x8000;
ee005dc8:	7e69                	lui	t3,0xffffa
ee005dca:	001e0613          	addi	a2,t3,1 # ffffa001 <STACK+0xffb8271>
ee005dce:	00ceca33          	xor	s4,t4,a2
ee005dd2:	010a1593          	slli	a1,s4,0x10
ee005dd6:	0105de93          	srli	t4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005dda:	01d8cf33          	xor	t5,a7,t4
                if (x16 == 1)
ee005dde:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee005de2:	00435093          	srli	ra,t1,0x4
                if (x16 == 1)
ee005de6:	001ed813          	srli	a6,t4,0x1
ee005dea:	000f8b63          	beqz	t6,ee005e00 <cmp_complex+0xf2>
                   crc |= 0x8000;
ee005dee:	7469                	lui	s0,0xffffa
ee005df0:	00140713          	addi	a4,s0,1 # ffffa001 <STACK+0xffb8271>
ee005df4:	00e847b3          	xor	a5,a6,a4
ee005df8:	01079393          	slli	t2,a5,0x10
ee005dfc:	0103d813          	srli	a6,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005e00:	0100c6b3          	xor	a3,ra,a6
                if (x16 == 1)
ee005e04:	0016f893          	andi	a7,a3,1
                data >>= 1;
ee005e08:	00535e13          	srli	t3,t1,0x5
                if (x16 == 1)
ee005e0c:	00185f13          	srli	t5,a6,0x1
ee005e10:	00088b63          	beqz	a7,ee005e26 <cmp_complex+0x118>
                   crc |= 0x8000;
ee005e14:	7669                	lui	a2,0xffffa
ee005e16:	00160a13          	addi	s4,a2,1 # ffffa001 <STACK+0xffb8271>
ee005e1a:	014f45b3          	xor	a1,t5,s4
ee005e1e:	01059e93          	slli	t4,a1,0x10
ee005e22:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005e26:	01ee4fb3          	xor	t6,t3,t5
                if (x16 == 1)
ee005e2a:	001ff093          	andi	ra,t6,1
                data >>= 1;
ee005e2e:	00635413          	srli	s0,t1,0x6
                if (x16 == 1)
ee005e32:	001f5893          	srli	a7,t5,0x1
ee005e36:	00008b63          	beqz	ra,ee005e4c <cmp_complex+0x13e>
                   crc |= 0x8000;
ee005e3a:	7769                	lui	a4,0xffffa
ee005e3c:	00170393          	addi	t2,a4,1 # ffffa001 <STACK+0xffb8271>
ee005e40:	0078c7b3          	xor	a5,a7,t2
ee005e44:	01079813          	slli	a6,a5,0x10
ee005e48:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005e4c:	011446b3          	xor	a3,s0,a7
                if (x16 == 1)
ee005e50:	0016fe13          	andi	t3,a3,1
                data >>= 1;
ee005e54:	00735313          	srli	t1,t1,0x7
                if (x16 == 1)
ee005e58:	0018df13          	srli	t5,a7,0x1
ee005e5c:	000e0b63          	beqz	t3,ee005e72 <cmp_complex+0x164>
                   crc |= 0x8000;
ee005e60:	7669                	lui	a2,0xffffa
ee005e62:	00160a13          	addi	s4,a2,1 # ffffa001 <STACK+0xffb8271>
ee005e66:	014f45b3          	xor	a1,t5,s4
ee005e6a:	01059e93          	slli	t4,a1,0x10
ee005e6e:	010edf13          	srli	t5,t4,0x10
                if (x16 == 1)
ee005e72:	001f7f93          	andi	t6,t5,1
ee005e76:	001f5793          	srli	a5,t5,0x1
ee005e7a:	006f8b63          	beq	t6,t1,ee005e90 <cmp_complex+0x182>
                   crc |= 0x8000;
ee005e7e:	70e9                	lui	ra,0xffffa
ee005e80:	00108413          	addi	s0,ra,1 # ffffa001 <STACK+0xffb8271>
ee005e84:	0087c733          	xor	a4,a5,s0
ee005e88:	01071393          	slli	t2,a4,0x10
ee005e8c:	0103d793          	srli	a5,t2,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee005e90:	8121                	srli	a0,a0,0x8
ee005e92:	0ff57813          	zext.b	a6,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005e96:	00f848b3          	xor	a7,a6,a5
                if (x16 == 1)
ee005e9a:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee005e9e:	00185693          	srli	a3,a6,0x1
                if (x16 == 1)
ee005ea2:	0017de93          	srli	t4,a5,0x1
ee005ea6:	000e0b63          	beqz	t3,ee005ebc <cmp_complex+0x1ae>
                   crc |= 0x8000;
ee005eaa:	7369                	lui	t1,0xffffa
ee005eac:	00130613          	addi	a2,t1,1 # ffffa001 <STACK+0xffb8271>
ee005eb0:	00ceca33          	xor	s4,t4,a2
ee005eb4:	010a1593          	slli	a1,s4,0x10
ee005eb8:	0105de93          	srli	t4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005ebc:	01d6cf33          	xor	t5,a3,t4
                if (x16 == 1)
ee005ec0:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee005ec4:	00285093          	srli	ra,a6,0x2
                if (x16 == 1)
ee005ec8:	001ed513          	srli	a0,t4,0x1
ee005ecc:	000f8b63          	beqz	t6,ee005ee2 <cmp_complex+0x1d4>
                   crc |= 0x8000;
ee005ed0:	7469                	lui	s0,0xffffa
ee005ed2:	00140713          	addi	a4,s0,1 # ffffa001 <STACK+0xffb8271>
ee005ed6:	00e543b3          	xor	t2,a0,a4
ee005eda:	01039793          	slli	a5,t2,0x10
ee005ede:	0107d513          	srli	a0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005ee2:	00a0c8b3          	xor	a7,ra,a0
                if (x16 == 1)
ee005ee6:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee005eea:	00385693          	srli	a3,a6,0x3
                if (x16 == 1)
ee005eee:	00155e93          	srli	t4,a0,0x1
ee005ef2:	000e0b63          	beqz	t3,ee005f08 <cmp_complex+0x1fa>
                   crc |= 0x8000;
ee005ef6:	7369                	lui	t1,0xffffa
ee005ef8:	00130613          	addi	a2,t1,1 # ffffa001 <STACK+0xffb8271>
ee005efc:	00ceca33          	xor	s4,t4,a2
ee005f00:	010a1593          	slli	a1,s4,0x10
ee005f04:	0105de93          	srli	t4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005f08:	01d6cf33          	xor	t5,a3,t4
                if (x16 == 1)
ee005f0c:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee005f10:	00485093          	srli	ra,a6,0x4
                if (x16 == 1)
ee005f14:	001ed513          	srli	a0,t4,0x1
ee005f18:	000f8b63          	beqz	t6,ee005f2e <cmp_complex+0x220>
                   crc |= 0x8000;
ee005f1c:	7469                	lui	s0,0xffffa
ee005f1e:	00140713          	addi	a4,s0,1 # ffffa001 <STACK+0xffb8271>
ee005f22:	00e543b3          	xor	t2,a0,a4
ee005f26:	01039793          	slli	a5,t2,0x10
ee005f2a:	0107d513          	srli	a0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005f2e:	00a0c8b3          	xor	a7,ra,a0
                if (x16 == 1)
ee005f32:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee005f36:	00585693          	srli	a3,a6,0x5
                if (x16 == 1)
ee005f3a:	00155e93          	srli	t4,a0,0x1
ee005f3e:	000e0b63          	beqz	t3,ee005f54 <cmp_complex+0x246>
                   crc |= 0x8000;
ee005f42:	7369                	lui	t1,0xffffa
ee005f44:	00130613          	addi	a2,t1,1 # ffffa001 <STACK+0xffb8271>
ee005f48:	00ceca33          	xor	s4,t4,a2
ee005f4c:	010a1593          	slli	a1,s4,0x10
ee005f50:	0105de93          	srli	t4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005f54:	01d6cf33          	xor	t5,a3,t4
                if (x16 == 1)
ee005f58:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee005f5c:	00685093          	srli	ra,a6,0x6
                if (x16 == 1)
ee005f60:	001ed893          	srli	a7,t4,0x1
ee005f64:	000f8b63          	beqz	t6,ee005f7a <cmp_complex+0x26c>
                   crc |= 0x8000;
ee005f68:	7469                	lui	s0,0xffffa
ee005f6a:	00140713          	addi	a4,s0,1 # ffffa001 <STACK+0xffb8271>
ee005f6e:	00e8c3b3          	xor	t2,a7,a4
ee005f72:	01039793          	slli	a5,t2,0x10
ee005f76:	0107d893          	srli	a7,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee005f7a:	0110c533          	xor	a0,ra,a7
                if (x16 == 1)
ee005f7e:	00157e13          	andi	t3,a0,1
                data >>= 1;
ee005f82:	00785813          	srli	a6,a6,0x7
                if (x16 == 1)
ee005f86:	0018d593          	srli	a1,a7,0x1
ee005f8a:	000e0b63          	beqz	t3,ee005fa0 <cmp_complex+0x292>
                   crc |= 0x8000;
ee005f8e:	76e9                	lui	a3,0xffffa
ee005f90:	00168313          	addi	t1,a3,1 # ffffa001 <STACK+0xffb8271>
ee005f94:	0065c633          	xor	a2,a1,t1
ee005f98:	01061a13          	slli	s4,a2,0x10
ee005f9c:	010a5593          	srli	a1,s4,0x10
                if (x16 == 1)
ee005fa0:	0015fe93          	andi	t4,a1,1
ee005fa4:	0015d713          	srli	a4,a1,0x1
ee005fa8:	010e8b63          	beq	t4,a6,ee005fbe <cmp_complex+0x2b0>
                   crc |= 0x8000;
ee005fac:	7f69                	lui	t5,0xffffa
ee005fae:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee005fb2:	01f740b3          	xor	ra,a4,t6
ee005fb6:	01009413          	slli	s0,ra,0x10
ee005fba:	01045713          	srli	a4,s0,0x10
                retval &= 0x007f;
ee005fbe:	07f2fa13          	andi	s4,t0,127
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
ee005fc2:	f0097913          	andi	s2,s2,-256
ee005fc6:	012a62b3          	or	t0,s4,s2
                res->crc=crcu16(retval,res->crc);
ee005fca:	02e49c23          	sh	a4,56(s1)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
ee005fce:	0802e393          	ori	t2,t0,128
ee005fd2:	007a9023          	sh	t2,0(s5)
        ee_s16 data=*pdata;
ee005fd6:	00099a83          	lh	s5,0(s3)
        ee_u8 optype=(data>>7) & 1; /* bit 7 indicates if the function result has been cached */
ee005fda:	407ad793          	srai	a5,s5,0x7
        if (optype) /* if cached, use cache */
ee005fde:	0017f893          	andi	a7,a5,1
                return (data & 0x007f);
ee005fe2:	07fafe13          	andi	t3,s5,127
        if (optype) /* if cached, use cache */
ee005fe6:	50089863          	bnez	a7,ee0064f6 <cmp_complex+0x7e8>
                ee_s16 dtype=((data>>3) & 0xf); /* bits 3-6 is specific data for the operation */
ee005fea:	403ad513          	srai	a0,s5,0x3
ee005fee:	00f57e13          	andi	t3,a0,15
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
ee005ff2:	004e1813          	slli	a6,t3,0x4
                ee_s16 flag=data & 0x7; /* bits 0-2 is type of function to perform */
ee005ff6:	007af313          	andi	t1,s5,7
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
ee005ffa:	0384d403          	lhu	s0,56(s1)
                dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
ee005ffe:	010e6733          	or	a4,t3,a6
                switch (flag) {
ee006002:	50030b63          	beqz	t1,ee006518 <cmp_complex+0x80a>
ee006006:	4585                	li	a1,1
ee006008:	50b31263          	bne	t1,a1,ee00650c <cmp_complex+0x7fe>
        crc=crc16(matrix_test(N,C,A,B,val),crc);
ee00600c:	5894                	lw	a3,48(s1)
ee00600e:	54d0                	lw	a2,44(s1)
ee006010:	58cc                	lw	a1,52(s1)
ee006012:	5488                	lw	a0,40(s1)
ee006014:	a1efb0ef          	jal	ra,ee001232 <matrix_test>
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee006018:	0ff57f13          	zext.b	t5,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00601c:	008f4fb3          	xor	t6,t5,s0
        return crcu16((ee_u16)newval, crc);
ee006020:	01051913          	slli	s2,a0,0x10
                if (x16 == 1)
ee006024:	001ff713          	andi	a4,t6,1
        return crcu16((ee_u16)newval, crc);
ee006028:	01095293          	srli	t0,s2,0x10
                data >>= 1;
ee00602c:	001f5393          	srli	t2,t5,0x1
                if (x16 == 1)
ee006030:	00145513          	srli	a0,s0,0x1
ee006034:	cb11                	beqz	a4,ee006048 <cmp_complex+0x33a>
                   crc |= 0x8000;
ee006036:	70e9                	lui	ra,0xffffa
ee006038:	00108413          	addi	s0,ra,1 # ffffa001 <STACK+0xffb8271>
ee00603c:	008547b3          	xor	a5,a0,s0
ee006040:	01079893          	slli	a7,a5,0x10
ee006044:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006048:	00a3ce33          	xor	t3,t2,a0
                if (x16 == 1)
ee00604c:	001e7813          	andi	a6,t3,1
                data >>= 1;
ee006050:	002f5313          	srli	t1,t5,0x2
                if (x16 == 1)
ee006054:	00155f93          	srli	t6,a0,0x1
ee006058:	00080b63          	beqz	a6,ee00606e <cmp_complex+0x360>
                   crc |= 0x8000;
ee00605c:	76e9                	lui	a3,0xffffa
ee00605e:	00168e93          	addi	t4,a3,1 # ffffa001 <STACK+0xffb8271>
ee006062:	01dfc633          	xor	a2,t6,t4
ee006066:	01061593          	slli	a1,a2,0x10
ee00606a:	0105df93          	srli	t6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00606e:	01f34733          	xor	a4,t1,t6
                if (x16 == 1)
ee006072:	00177913          	andi	s2,a4,1
                data >>= 1;
ee006076:	003f5393          	srli	t2,t5,0x3
                if (x16 == 1)
ee00607a:	001fd513          	srli	a0,t6,0x1
ee00607e:	00090b63          	beqz	s2,ee006094 <cmp_complex+0x386>
                   crc |= 0x8000;
ee006082:	70e9                	lui	ra,0xffffa
ee006084:	00108413          	addi	s0,ra,1 # ffffa001 <STACK+0xffb8271>
ee006088:	008547b3          	xor	a5,a0,s0
ee00608c:	01079893          	slli	a7,a5,0x10
ee006090:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006094:	00a3ce33          	xor	t3,t2,a0
                if (x16 == 1)
ee006098:	001e7813          	andi	a6,t3,1
                data >>= 1;
ee00609c:	004f5313          	srli	t1,t5,0x4
                if (x16 == 1)
ee0060a0:	00155f93          	srli	t6,a0,0x1
ee0060a4:	00080b63          	beqz	a6,ee0060ba <cmp_complex+0x3ac>
                   crc |= 0x8000;
ee0060a8:	76e9                	lui	a3,0xffffa
ee0060aa:	00168e93          	addi	t4,a3,1 # ffffa001 <STACK+0xffb8271>
ee0060ae:	01dfc633          	xor	a2,t6,t4
ee0060b2:	01061593          	slli	a1,a2,0x10
ee0060b6:	0105df93          	srli	t6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0060ba:	01f34733          	xor	a4,t1,t6
                if (x16 == 1)
ee0060be:	00177913          	andi	s2,a4,1
                data >>= 1;
ee0060c2:	005f5393          	srli	t2,t5,0x5
                if (x16 == 1)
ee0060c6:	001fd513          	srli	a0,t6,0x1
ee0060ca:	00090b63          	beqz	s2,ee0060e0 <cmp_complex+0x3d2>
                   crc |= 0x8000;
ee0060ce:	70e9                	lui	ra,0xffffa
ee0060d0:	00108413          	addi	s0,ra,1 # ffffa001 <STACK+0xffb8271>
ee0060d4:	008547b3          	xor	a5,a0,s0
ee0060d8:	01079893          	slli	a7,a5,0x10
ee0060dc:	0108d513          	srli	a0,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0060e0:	00a3ce33          	xor	t3,t2,a0
                if (x16 == 1)
ee0060e4:	001e7813          	andi	a6,t3,1
                data >>= 1;
ee0060e8:	006f5313          	srli	t1,t5,0x6
                if (x16 == 1)
ee0060ec:	00155f93          	srli	t6,a0,0x1
ee0060f0:	00080b63          	beqz	a6,ee006106 <cmp_complex+0x3f8>
                   crc |= 0x8000;
ee0060f4:	76e9                	lui	a3,0xffffa
ee0060f6:	00168e93          	addi	t4,a3,1 # ffffa001 <STACK+0xffb8271>
ee0060fa:	01dfc633          	xor	a2,t6,t4
ee0060fe:	01061593          	slli	a1,a2,0x10
ee006102:	0105df93          	srli	t6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006106:	01f34733          	xor	a4,t1,t6
                if (x16 == 1)
ee00610a:	00177913          	andi	s2,a4,1
                data >>= 1;
ee00610e:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
ee006112:	001fd893          	srli	a7,t6,0x1
ee006116:	00090b63          	beqz	s2,ee00612c <cmp_complex+0x41e>
                   crc |= 0x8000;
ee00611a:	73e9                	lui	t2,0xffffa
ee00611c:	00138093          	addi	ra,t2,1 # ffffa001 <STACK+0xffb8271>
ee006120:	0018c433          	xor	s0,a7,ra
ee006124:	01041793          	slli	a5,s0,0x10
ee006128:	0107d893          	srli	a7,a5,0x10
                if (x16 == 1)
ee00612c:	0018fe13          	andi	t3,a7,1
ee006130:	0018de93          	srli	t4,a7,0x1
ee006134:	01ee0b63          	beq	t3,t5,ee00614a <cmp_complex+0x43c>
                   crc |= 0x8000;
ee006138:	7869                	lui	a6,0xffffa
ee00613a:	00180313          	addi	t1,a6,1 # ffffa001 <STACK+0xffb8271>
ee00613e:	006ec533          	xor	a0,t4,t1
ee006142:	01051693          	slli	a3,a0,0x10
ee006146:	0106de93          	srli	t4,a3,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee00614a:	0082d593          	srli	a1,t0,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00614e:	01d5c633          	xor	a2,a1,t4
                if (x16 == 1)
ee006152:	00167f93          	andi	t6,a2,1
                data >>= 1;
ee006156:	0092d293          	srli	t0,t0,0x9
                if (x16 == 1)
ee00615a:	001ed093          	srli	ra,t4,0x1
ee00615e:	000f8b63          	beqz	t6,ee006174 <cmp_complex+0x466>
                   crc |= 0x8000;
ee006162:	7769                	lui	a4,0xffffa
ee006164:	00170913          	addi	s2,a4,1 # ffffa001 <STACK+0xffb8271>
ee006168:	0120cf33          	xor	t5,ra,s2
ee00616c:	010f1393          	slli	t2,t5,0x10
ee006170:	0103d093          	srli	ra,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006174:	0012c433          	xor	s0,t0,ra
                if (x16 == 1)
ee006178:	00147893          	andi	a7,s0,1
                data >>= 1;
ee00617c:	0025d793          	srli	a5,a1,0x2
                if (x16 == 1)
ee006180:	0010d693          	srli	a3,ra,0x1
ee006184:	00088b63          	beqz	a7,ee00619a <cmp_complex+0x48c>
                   crc |= 0x8000;
ee006188:	7e69                	lui	t3,0xffffa
ee00618a:	001e0813          	addi	a6,t3,1 # ffffa001 <STACK+0xffb8271>
ee00618e:	0106c333          	xor	t1,a3,a6
ee006192:	01031513          	slli	a0,t1,0x10
ee006196:	01055693          	srli	a3,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00619a:	00d7ceb3          	xor	t4,a5,a3
                if (x16 == 1)
ee00619e:	001ef613          	andi	a2,t4,1
                data >>= 1;
ee0061a2:	0035df93          	srli	t6,a1,0x3
                if (x16 == 1)
ee0061a6:	0016d393          	srli	t2,a3,0x1
ee0061aa:	ca11                	beqz	a2,ee0061be <cmp_complex+0x4b0>
                   crc |= 0x8000;
ee0061ac:	72e9                	lui	t0,0xffffa
ee0061ae:	00128713          	addi	a4,t0,1 # ffffa001 <STACK+0xffb8271>
ee0061b2:	00e3c933          	xor	s2,t2,a4
ee0061b6:	01091f13          	slli	t5,s2,0x10
ee0061ba:	010f5393          	srli	t2,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0061be:	007fc0b3          	xor	ra,t6,t2
                if (x16 == 1)
ee0061c2:	0010f413          	andi	s0,ra,1
                data >>= 1;
ee0061c6:	0045d893          	srli	a7,a1,0x4
                if (x16 == 1)
ee0061ca:	0013d513          	srli	a0,t2,0x1
ee0061ce:	c811                	beqz	s0,ee0061e2 <cmp_complex+0x4d4>
                   crc |= 0x8000;
ee0061d0:	77e9                	lui	a5,0xffffa
ee0061d2:	00178e13          	addi	t3,a5,1 # ffffa001 <STACK+0xffb8271>
ee0061d6:	01c54833          	xor	a6,a0,t3
ee0061da:	01081313          	slli	t1,a6,0x10
ee0061de:	01035513          	srli	a0,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0061e2:	00a8c6b3          	xor	a3,a7,a0
                if (x16 == 1)
ee0061e6:	0016fe93          	andi	t4,a3,1
                data >>= 1;
ee0061ea:	0055d613          	srli	a2,a1,0x5
                if (x16 == 1)
ee0061ee:	00155f13          	srli	t5,a0,0x1
ee0061f2:	000e8b63          	beqz	t4,ee006208 <cmp_complex+0x4fa>
                   crc |= 0x8000;
ee0061f6:	7fe9                	lui	t6,0xffffa
ee0061f8:	001f8293          	addi	t0,t6,1 # ffffa001 <STACK+0xffb8271>
ee0061fc:	005f4733          	xor	a4,t5,t0
ee006200:	01071913          	slli	s2,a4,0x10
ee006204:	01095f13          	srli	t5,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006208:	01e643b3          	xor	t2,a2,t5
                if (x16 == 1)
ee00620c:	0013f093          	andi	ra,t2,1
                data >>= 1;
ee006210:	0065d413          	srli	s0,a1,0x6
                if (x16 == 1)
ee006214:	001f5313          	srli	t1,t5,0x1
ee006218:	00008b63          	beqz	ra,ee00622e <cmp_complex+0x520>
                   crc |= 0x8000;
ee00621c:	78e9                	lui	a7,0xffffa
ee00621e:	00188793          	addi	a5,a7,1 # ffffa001 <STACK+0xffb8271>
ee006222:	00f34e33          	xor	t3,t1,a5
ee006226:	010e1813          	slli	a6,t3,0x10
ee00622a:	01085313          	srli	t1,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00622e:	00644533          	xor	a0,s0,t1
                if (x16 == 1)
ee006232:	00157693          	andi	a3,a0,1
                data >>= 1;
ee006236:	819d                	srli	a1,a1,0x7
                if (x16 == 1)
ee006238:	00135913          	srli	s2,t1,0x1
ee00623c:	ca91                	beqz	a3,ee006250 <cmp_complex+0x542>
                   crc |= 0x8000;
ee00623e:	7ee9                	lui	t4,0xffffa
ee006240:	001e8613          	addi	a2,t4,1 # ffffa001 <STACK+0xffb8271>
ee006244:	00c94fb3          	xor	t6,s2,a2
ee006248:	010f9293          	slli	t0,t6,0x10
ee00624c:	0102d913          	srli	s2,t0,0x10
                if (x16 == 1)
ee006250:	00197713          	andi	a4,s2,1
ee006254:	00195513          	srli	a0,s2,0x1
ee006258:	00b70b63          	beq	a4,a1,ee00626e <cmp_complex+0x560>
                   crc |= 0x8000;
ee00625c:	7f69                	lui	t5,0xffffa
ee00625e:	001f0393          	addi	t2,t5,1 # ffffa001 <STACK+0xffb8271>
ee006262:	007540b3          	xor	ra,a0,t2
ee006266:	01009413          	slli	s0,ra,0x10
ee00626a:	01045513          	srli	a0,s0,0x10
                                if (res->crcmatrix==0)
ee00626e:	03c4d883          	lhu	a7,60(s1)
ee006272:	00089463          	bnez	a7,ee00627a <cmp_complex+0x56c>
                                        res->crcmatrix=retval;
ee006276:	02a49e23          	sh	a0,60(s1)
ee00627a:	0384d403          	lhu	s0,56(s1)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
ee00627e:	01051793          	slli	a5,a0,0x10
ee006282:	4107de13          	srai	t3,a5,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee006286:	0ffe7313          	zext.b	t1,t3
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00628a:	008346b3          	xor	a3,t1,s0
                if (x16 == 1)
ee00628e:	0016f593          	andi	a1,a3,1
                data >>= 1;
ee006292:	00135e93          	srli	t4,t1,0x1
                if (x16 == 1)
ee006296:	00145713          	srli	a4,s0,0x1
ee00629a:	c991                	beqz	a1,ee0062ae <cmp_complex+0x5a0>
                   crc |= 0x8000;
ee00629c:	7669                	lui	a2,0xffffa
ee00629e:	00160f93          	addi	t6,a2,1 # ffffa001 <STACK+0xffb8271>
ee0062a2:	01f742b3          	xor	t0,a4,t6
ee0062a6:	01029913          	slli	s2,t0,0x10
ee0062aa:	01095713          	srli	a4,s2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0062ae:	00eecf33          	xor	t5,t4,a4
                if (x16 == 1)
ee0062b2:	001f7393          	andi	t2,t5,1
                data >>= 1;
ee0062b6:	00235093          	srli	ra,t1,0x2
                if (x16 == 1)
ee0062ba:	00175693          	srli	a3,a4,0x1
ee0062be:	00038b63          	beqz	t2,ee0062d4 <cmp_complex+0x5c6>
                   crc |= 0x8000;
ee0062c2:	78e9                	lui	a7,0xffffa
ee0062c4:	00188413          	addi	s0,a7,1 # ffffa001 <STACK+0xffb8271>
ee0062c8:	0086c7b3          	xor	a5,a3,s0
ee0062cc:	01079813          	slli	a6,a5,0x10
ee0062d0:	01085693          	srli	a3,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0062d4:	00d0c5b3          	xor	a1,ra,a3
                if (x16 == 1)
ee0062d8:	0015fe93          	andi	t4,a1,1
                data >>= 1;
ee0062dc:	00335f93          	srli	t6,t1,0x3
                if (x16 == 1)
ee0062e0:	0016df13          	srli	t5,a3,0x1
ee0062e4:	000e8b63          	beqz	t4,ee0062fa <cmp_complex+0x5ec>
                   crc |= 0x8000;
ee0062e8:	7669                	lui	a2,0xffffa
ee0062ea:	00160293          	addi	t0,a2,1 # ffffa001 <STACK+0xffb8271>
ee0062ee:	005f4933          	xor	s2,t5,t0
ee0062f2:	01091713          	slli	a4,s2,0x10
ee0062f6:	01075f13          	srli	t5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0062fa:	01efc3b3          	xor	t2,t6,t5
                if (x16 == 1)
ee0062fe:	0013f093          	andi	ra,t2,1
                data >>= 1;
ee006302:	00435893          	srli	a7,t1,0x4
                if (x16 == 1)
ee006306:	001f5e93          	srli	t4,t5,0x1
ee00630a:	00008b63          	beqz	ra,ee006320 <cmp_complex+0x612>
                   crc |= 0x8000;
ee00630e:	7469                	lui	s0,0xffffa
ee006310:	00140813          	addi	a6,s0,1 # ffffa001 <STACK+0xffb8271>
ee006314:	010ec7b3          	xor	a5,t4,a6
ee006318:	01079693          	slli	a3,a5,0x10
ee00631c:	0106de93          	srli	t4,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006320:	01d8c5b3          	xor	a1,a7,t4
                if (x16 == 1)
ee006324:	0015ff93          	andi	t6,a1,1
                data >>= 1;
ee006328:	00535293          	srli	t0,t1,0x5
                if (x16 == 1)
ee00632c:	001ed393          	srli	t2,t4,0x1
ee006330:	000f8b63          	beqz	t6,ee006346 <cmp_complex+0x638>
                   crc |= 0x8000;
ee006334:	7669                	lui	a2,0xffffa
ee006336:	00160913          	addi	s2,a2,1 # ffffa001 <STACK+0xffb8271>
ee00633a:	0123c733          	xor	a4,t2,s2
ee00633e:	01071f13          	slli	t5,a4,0x10
ee006342:	010f5393          	srli	t2,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006346:	0072c0b3          	xor	ra,t0,t2
                if (x16 == 1)
ee00634a:	0010f893          	andi	a7,ra,1
                data >>= 1;
ee00634e:	00635413          	srli	s0,t1,0x6
                if (x16 == 1)
ee006352:	0013d593          	srli	a1,t2,0x1
ee006356:	00088b63          	beqz	a7,ee00636c <cmp_complex+0x65e>
                   crc |= 0x8000;
ee00635a:	7869                	lui	a6,0xffffa
ee00635c:	00180693          	addi	a3,a6,1 # ffffa001 <STACK+0xffb8271>
ee006360:	00d5c7b3          	xor	a5,a1,a3
ee006364:	01079e93          	slli	t4,a5,0x10
ee006368:	010ed593          	srli	a1,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00636c:	00b44fb3          	xor	t6,s0,a1
                if (x16 == 1)
ee006370:	001ff293          	andi	t0,t6,1
                data >>= 1;
ee006374:	00735313          	srli	t1,t1,0x7
                if (x16 == 1)
ee006378:	0015d393          	srli	t2,a1,0x1
ee00637c:	00028b63          	beqz	t0,ee006392 <cmp_complex+0x684>
                   crc |= 0x8000;
ee006380:	7669                	lui	a2,0xffffa
ee006382:	00160913          	addi	s2,a2,1 # ffffa001 <STACK+0xffb8271>
ee006386:	0123c733          	xor	a4,t2,s2
ee00638a:	01071f13          	slli	t5,a4,0x10
ee00638e:	010f5393          	srli	t2,t5,0x10
                if (x16 == 1)
ee006392:	0013f093          	andi	ra,t2,1
ee006396:	0013d793          	srli	a5,t2,0x1
ee00639a:	00608b63          	beq	ra,t1,ee0063b0 <cmp_complex+0x6a2>
                   crc |= 0x8000;
ee00639e:	78e9                	lui	a7,0xffffa
ee0063a0:	00188413          	addi	s0,a7,1 # ffffa001 <STACK+0xffb8271>
ee0063a4:	0087c833          	xor	a6,a5,s0
ee0063a8:	01081693          	slli	a3,a6,0x10
ee0063ac:	0106d793          	srli	a5,a3,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee0063b0:	8121                	srli	a0,a0,0x8
ee0063b2:	0ff57e93          	zext.b	t4,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0063b6:	00fec5b3          	xor	a1,t4,a5
                if (x16 == 1)
ee0063ba:	0015ff93          	andi	t6,a1,1
                data >>= 1;
ee0063be:	001ed293          	srli	t0,t4,0x1
                if (x16 == 1)
ee0063c2:	0017df13          	srli	t5,a5,0x1
ee0063c6:	000f8b63          	beqz	t6,ee0063dc <cmp_complex+0x6ce>
                   crc |= 0x8000;
ee0063ca:	7369                	lui	t1,0xffffa
ee0063cc:	00130613          	addi	a2,t1,1 # ffffa001 <STACK+0xffb8271>
ee0063d0:	00cf4933          	xor	s2,t5,a2
ee0063d4:	01091713          	slli	a4,s2,0x10
ee0063d8:	01075f13          	srli	t5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0063dc:	01e2c3b3          	xor	t2,t0,t5
                if (x16 == 1)
ee0063e0:	0013f093          	andi	ra,t2,1
                data >>= 1;
ee0063e4:	002ed893          	srli	a7,t4,0x2
                if (x16 == 1)
ee0063e8:	001f5513          	srli	a0,t5,0x1
ee0063ec:	00008b63          	beqz	ra,ee006402 <cmp_complex+0x6f4>
                   crc |= 0x8000;
ee0063f0:	7469                	lui	s0,0xffffa
ee0063f2:	00140813          	addi	a6,s0,1 # ffffa001 <STACK+0xffb8271>
ee0063f6:	010546b3          	xor	a3,a0,a6
ee0063fa:	01069793          	slli	a5,a3,0x10
ee0063fe:	0107d513          	srli	a0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006402:	00a8c5b3          	xor	a1,a7,a0
                if (x16 == 1)
ee006406:	0015ff93          	andi	t6,a1,1
                data >>= 1;
ee00640a:	003ed293          	srli	t0,t4,0x3
                if (x16 == 1)
ee00640e:	00155f13          	srli	t5,a0,0x1
ee006412:	000f8b63          	beqz	t6,ee006428 <cmp_complex+0x71a>
                   crc |= 0x8000;
ee006416:	7369                	lui	t1,0xffffa
ee006418:	00130613          	addi	a2,t1,1 # ffffa001 <STACK+0xffb8271>
ee00641c:	00cf4933          	xor	s2,t5,a2
ee006420:	01091713          	slli	a4,s2,0x10
ee006424:	01075f13          	srli	t5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006428:	01e2c3b3          	xor	t2,t0,t5
                if (x16 == 1)
ee00642c:	0013f093          	andi	ra,t2,1
                data >>= 1;
ee006430:	004ed893          	srli	a7,t4,0x4
                if (x16 == 1)
ee006434:	001f5513          	srli	a0,t5,0x1
ee006438:	00008b63          	beqz	ra,ee00644e <cmp_complex+0x740>
                   crc |= 0x8000;
ee00643c:	7469                	lui	s0,0xffffa
ee00643e:	00140813          	addi	a6,s0,1 # ffffa001 <STACK+0xffb8271>
ee006442:	010546b3          	xor	a3,a0,a6
ee006446:	01069793          	slli	a5,a3,0x10
ee00644a:	0107d513          	srli	a0,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00644e:	00a8c5b3          	xor	a1,a7,a0
                if (x16 == 1)
ee006452:	0015ff93          	andi	t6,a1,1
                data >>= 1;
ee006456:	005ed293          	srli	t0,t4,0x5
                if (x16 == 1)
ee00645a:	00155f13          	srli	t5,a0,0x1
ee00645e:	000f8b63          	beqz	t6,ee006474 <cmp_complex+0x766>
                   crc |= 0x8000;
ee006462:	7369                	lui	t1,0xffffa
ee006464:	00130613          	addi	a2,t1,1 # ffffa001 <STACK+0xffb8271>
ee006468:	00cf4933          	xor	s2,t5,a2
ee00646c:	01091713          	slli	a4,s2,0x10
ee006470:	01075f13          	srli	t5,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006474:	01e2c3b3          	xor	t2,t0,t5
                if (x16 == 1)
ee006478:	0013f093          	andi	ra,t2,1
                data >>= 1;
ee00647c:	006ed893          	srli	a7,t4,0x6
                if (x16 == 1)
ee006480:	001f5593          	srli	a1,t5,0x1
ee006484:	00008b63          	beqz	ra,ee00649a <cmp_complex+0x78c>
                   crc |= 0x8000;
ee006488:	7469                	lui	s0,0xffffa
ee00648a:	00140813          	addi	a6,s0,1 # ffffa001 <STACK+0xffb8271>
ee00648e:	0105c6b3          	xor	a3,a1,a6
ee006492:	01069793          	slli	a5,a3,0x10
ee006496:	0107d593          	srli	a1,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00649a:	00b8c533          	xor	a0,a7,a1
                if (x16 == 1)
ee00649e:	00157f93          	andi	t6,a0,1
                data >>= 1;
ee0064a2:	007ede93          	srli	t4,t4,0x7
                if (x16 == 1)
ee0064a6:	0015d713          	srli	a4,a1,0x1
ee0064aa:	000f8b63          	beqz	t6,ee0064c0 <cmp_complex+0x7b2>
                   crc |= 0x8000;
ee0064ae:	72e9                	lui	t0,0xffffa
ee0064b0:	00128313          	addi	t1,t0,1 # ffffa001 <STACK+0xffb8271>
ee0064b4:	00674633          	xor	a2,a4,t1
ee0064b8:	01061913          	slli	s2,a2,0x10
ee0064bc:	01095713          	srli	a4,s2,0x10
                if (x16 == 1)
ee0064c0:	00177f13          	andi	t5,a4,1
ee0064c4:	00175813          	srli	a6,a4,0x1
ee0064c8:	01df0b63          	beq	t5,t4,ee0064de <cmp_complex+0x7d0>
                   crc |= 0x8000;
ee0064cc:	73e9                	lui	t2,0xffffa
ee0064ce:	00138093          	addi	ra,t2,1 # ffffa001 <STACK+0xffb8271>
ee0064d2:	001848b3          	xor	a7,a6,ra
ee0064d6:	01089413          	slli	s0,a7,0x10
ee0064da:	01045813          	srli	a6,s0,0x10
                retval &= 0x007f;
ee0064de:	07fe7e13          	andi	t3,t3,127
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
ee0064e2:	f00afa93          	andi	s5,s5,-256
ee0064e6:	015e66b3          	or	a3,t3,s5
                res->crc=crcu16(retval,res->crc);
ee0064ea:	03049c23          	sh	a6,56(s1)
                *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
ee0064ee:	0806e493          	ori	s1,a3,128
ee0064f2:	00999023          	sh	s1,0(s3)
}
ee0064f6:	40f2                	lw	ra,28(sp)
ee0064f8:	4462                	lw	s0,24(sp)
ee0064fa:	44d2                	lw	s1,20(sp)
ee0064fc:	4942                	lw	s2,16(sp)
ee0064fe:	49b2                	lw	s3,12(sp)
ee006500:	4a92                	lw	s5,4(sp)
ee006502:	41ca0533          	sub	a0,s4,t3
ee006506:	4a22                	lw	s4,8(sp)
ee006508:	6105                	addi	sp,sp,32
ee00650a:	8082                	ret
                res->crc=crcu16(retval,res->crc);
ee00650c:	010a9813          	slli	a6,s5,0x10
ee006510:	01085513          	srli	a0,a6,0x10
        ee_s16 data=*pdata;
ee006514:	8e56                	mv	t3,s5
ee006516:	bb85                	j	ee006286 <cmp_complex+0x578>
                                if (dtype<0x22) /* set min period for bit corruption */
ee006518:	02200693          	li	a3,34
ee00651c:	8eba                	mv	t4,a4
ee00651e:	00d75463          	bge	a4,a3,ee006526 <cmp_complex+0x818>
ee006522:	02200e93          	li	t4,34
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
ee006526:	00049603          	lh	a2,0(s1)
ee00652a:	00249683          	lh	a3,2(s1)
ee00652e:	48cc                	lw	a1,20(s1)
ee006530:	4c88                	lw	a0,24(s1)
ee006532:	87a2                	mv	a5,s0
ee006534:	0ffef713          	zext.b	a4,t4
ee006538:	d50fe0ef          	jal	ra,ee004a88 <core_bench_state>
                                if (res->crcstate==0)
ee00653c:	03e4d603          	lhu	a2,62(s1)
ee006540:	d2061de3          	bnez	a2,ee00627a <cmp_complex+0x56c>
                                        res->crcstate=retval;
ee006544:	02a49f23          	sh	a0,62(s1)
ee006548:	bb0d                	j	ee00627a <cmp_complex+0x56c>
                                if (dtype<0x22) /* set min period for bit corruption */
ee00654a:	02200393          	li	t2,34
ee00654e:	883a                	mv	a6,a4
ee006550:	00775463          	bge	a4,t2,ee006558 <cmp_complex+0x84a>
ee006554:	02200813          	li	a6,34
                                retval=core_bench_state(res->size,res->memblock[3],res->seed1,res->seed2,dtype,res->crc);
ee006558:	00249683          	lh	a3,2(s1)
ee00655c:	00049603          	lh	a2,0(s1)
ee006560:	48cc                	lw	a1,20(s1)
ee006562:	4c88                	lw	a0,24(s1)
ee006564:	87a2                	mv	a5,s0
ee006566:	0ff87713          	zext.b	a4,a6
ee00656a:	d1efe0ef          	jal	ra,ee004a88 <core_bench_state>
                                if (res->crcstate==0)
ee00656e:	03e4d403          	lhu	s0,62(s1)
ee006572:	e019                	bnez	s0,ee006578 <cmp_complex+0x86a>
                                        res->crcstate=retval;
ee006574:	02a49f23          	sh	a0,62(s1)
                                retval=core_bench_matrix(&(res->mat),dtype,res->crc);
ee006578:	01051793          	slli	a5,a0,0x10
ee00657c:	0384d403          	lhu	s0,56(s1)
ee006580:	4107d293          	srai	t0,a5,0x10
ee006584:	fe0ff06f          	j	ee005d64 <cmp_complex+0x56>
        crc=crc16(matrix_test(N,C,A,B,val),crc);
ee006588:	5a14                	lw	a3,48(a2)
ee00658a:	58cc                	lw	a1,52(s1)
ee00658c:	5650                	lw	a2,44(a2)
ee00658e:	5488                	lw	a0,40(s1)
ee006590:	ca3fa0ef          	jal	ra,ee001232 <matrix_test>
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee006594:	0ff57593          	zext.b	a1,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006598:	0085c633          	xor	a2,a1,s0
        return crcu16((ee_u16)newval, crc);
ee00659c:	01051a13          	slli	s4,a0,0x10
                if (x16 == 1)
ee0065a0:	00167893          	andi	a7,a2,1
        return crcu16((ee_u16)newval, crc);
ee0065a4:	010a5e13          	srli	t3,s4,0x10
                data >>= 1;
ee0065a8:	0015de93          	srli	t4,a1,0x1
                crc >>= 1;
ee0065ac:	00145713          	srli	a4,s0,0x1
                if (x16 == 1)
ee0065b0:	00088b63          	beqz	a7,ee0065c6 <cmp_complex+0x8b8>
                   crc |= 0x8000;
ee0065b4:	7f69                	lui	t5,0xffffa
ee0065b6:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee0065ba:	01f747b3          	xor	a5,a4,t6
ee0065be:	01079093          	slli	ra,a5,0x10
ee0065c2:	0100d713          	srli	a4,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0065c6:	00eec2b3          	xor	t0,t4,a4
                if (x16 == 1)
ee0065ca:	0012f313          	andi	t1,t0,1
                data >>= 1;
ee0065ce:	0025d693          	srli	a3,a1,0x2
                crc >>= 1;
ee0065d2:	00175893          	srli	a7,a4,0x1
                if (x16 == 1)
ee0065d6:	00030b63          	beqz	t1,ee0065ec <cmp_complex+0x8de>
                   crc |= 0x8000;
ee0065da:	73e9                	lui	t2,0xffffa
ee0065dc:	00138813          	addi	a6,t2,1 # ffffa001 <STACK+0xffb8271>
ee0065e0:	0108c433          	xor	s0,a7,a6
ee0065e4:	01041513          	slli	a0,s0,0x10
ee0065e8:	01055893          	srli	a7,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0065ec:	0116c633          	xor	a2,a3,a7
                if (x16 == 1)
ee0065f0:	00167a13          	andi	s4,a2,1
                data >>= 1;
ee0065f4:	0035de93          	srli	t4,a1,0x3
                crc >>= 1;
ee0065f8:	0018d713          	srli	a4,a7,0x1
                if (x16 == 1)
ee0065fc:	000a0b63          	beqz	s4,ee006612 <cmp_complex+0x904>
                   crc |= 0x8000;
ee006600:	7f69                	lui	t5,0xffffa
ee006602:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee006606:	01f747b3          	xor	a5,a4,t6
ee00660a:	01079093          	slli	ra,a5,0x10
ee00660e:	0100d713          	srli	a4,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006612:	00eec2b3          	xor	t0,t4,a4
                if (x16 == 1)
ee006616:	0012f313          	andi	t1,t0,1
                data >>= 1;
ee00661a:	0045d693          	srli	a3,a1,0x4
                crc >>= 1;
ee00661e:	00175893          	srli	a7,a4,0x1
                if (x16 == 1)
ee006622:	00030b63          	beqz	t1,ee006638 <cmp_complex+0x92a>
                   crc |= 0x8000;
ee006626:	73e9                	lui	t2,0xffffa
ee006628:	00138813          	addi	a6,t2,1 # ffffa001 <STACK+0xffb8271>
ee00662c:	0108c433          	xor	s0,a7,a6
ee006630:	01041513          	slli	a0,s0,0x10
ee006634:	01055893          	srli	a7,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006638:	0116c633          	xor	a2,a3,a7
                if (x16 == 1)
ee00663c:	00167a13          	andi	s4,a2,1
                data >>= 1;
ee006640:	0055de93          	srli	t4,a1,0x5
                crc >>= 1;
ee006644:	0018d713          	srli	a4,a7,0x1
                if (x16 == 1)
ee006648:	000a0b63          	beqz	s4,ee00665e <cmp_complex+0x950>
                   crc |= 0x8000;
ee00664c:	7f69                	lui	t5,0xffffa
ee00664e:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee006652:	01f747b3          	xor	a5,a4,t6
ee006656:	01079093          	slli	ra,a5,0x10
ee00665a:	0100d713          	srli	a4,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00665e:	00eec2b3          	xor	t0,t4,a4
                if (x16 == 1)
ee006662:	0012f313          	andi	t1,t0,1
                data >>= 1;
ee006666:	0065d693          	srli	a3,a1,0x6
                crc >>= 1;
ee00666a:	00175893          	srli	a7,a4,0x1
                if (x16 == 1)
ee00666e:	00030b63          	beqz	t1,ee006684 <cmp_complex+0x976>
                   crc |= 0x8000;
ee006672:	73e9                	lui	t2,0xffffa
ee006674:	00138813          	addi	a6,t2,1 # ffffa001 <STACK+0xffb8271>
ee006678:	0108c433          	xor	s0,a7,a6
ee00667c:	01041513          	slli	a0,s0,0x10
ee006680:	01055893          	srli	a7,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006684:	0116c633          	xor	a2,a3,a7
                if (x16 == 1)
ee006688:	00167a13          	andi	s4,a2,1
                data >>= 1;
ee00668c:	819d                	srli	a1,a1,0x7
                crc >>= 1;
ee00668e:	0018d093          	srli	ra,a7,0x1
                if (x16 == 1)
ee006692:	000a0b63          	beqz	s4,ee0066a8 <cmp_complex+0x99a>
                   crc |= 0x8000;
ee006696:	7ee9                	lui	t4,0xffffa
ee006698:	001e8f13          	addi	t5,t4,1 # ffffa001 <STACK+0xffb8271>
ee00669c:	01e0cfb3          	xor	t6,ra,t5
ee0066a0:	010f9793          	slli	a5,t6,0x10
ee0066a4:	0107d093          	srli	ra,a5,0x10
                if (x16 == 1)
ee0066a8:	0010f713          	andi	a4,ra,1
                crc >>= 1;
ee0066ac:	0010d813          	srli	a6,ra,0x1
                if (x16 == 1)
ee0066b0:	00b70b63          	beq	a4,a1,ee0066c6 <cmp_complex+0x9b8>
                   crc |= 0x8000;
ee0066b4:	72e9                	lui	t0,0xffffa
ee0066b6:	00128313          	addi	t1,t0,1 # ffffa001 <STACK+0xffb8271>
ee0066ba:	006846b3          	xor	a3,a6,t1
ee0066be:	01069393          	slli	t2,a3,0x10
ee0066c2:	0103d813          	srli	a6,t2,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee0066c6:	008e5413          	srli	s0,t3,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0066ca:	01044533          	xor	a0,s0,a6
                if (x16 == 1)
ee0066ce:	00157893          	andi	a7,a0,1
                data >>= 1;
ee0066d2:	009e5e13          	srli	t3,t3,0x9
                if (x16 == 1)
ee0066d6:	00185f13          	srli	t5,a6,0x1
ee0066da:	00088b63          	beqz	a7,ee0066f0 <cmp_complex+0x9e2>
                   crc |= 0x8000;
ee0066de:	7669                	lui	a2,0xffffa
ee0066e0:	00160a13          	addi	s4,a2,1 # ffffa001 <STACK+0xffb8271>
ee0066e4:	014f45b3          	xor	a1,t5,s4
ee0066e8:	01059e93          	slli	t4,a1,0x10
ee0066ec:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0066f0:	01ee4fb3          	xor	t6,t3,t5
                if (x16 == 1)
ee0066f4:	001ff093          	andi	ra,t6,1
                data >>= 1;
ee0066f8:	00245793          	srli	a5,s0,0x2
                if (x16 == 1)
ee0066fc:	001f5393          	srli	t2,t5,0x1
ee006700:	00008b63          	beqz	ra,ee006716 <cmp_complex+0xa08>
                   crc |= 0x8000;
ee006704:	7769                	lui	a4,0xffffa
ee006706:	00170293          	addi	t0,a4,1 # ffffa001 <STACK+0xffb8271>
ee00670a:	0053c333          	xor	t1,t2,t0
ee00670e:	01031693          	slli	a3,t1,0x10
ee006712:	0106d393          	srli	t2,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006716:	0077c833          	xor	a6,a5,t2
                if (x16 == 1)
ee00671a:	00187893          	andi	a7,a6,1
                data >>= 1;
ee00671e:	00345e13          	srli	t3,s0,0x3
                if (x16 == 1)
ee006722:	0013de93          	srli	t4,t2,0x1
ee006726:	00088b63          	beqz	a7,ee00673c <cmp_complex+0xa2e>
                   crc |= 0x8000;
ee00672a:	7669                	lui	a2,0xffffa
ee00672c:	00160a13          	addi	s4,a2,1 # ffffa001 <STACK+0xffb8271>
ee006730:	014ec533          	xor	a0,t4,s4
ee006734:	01051593          	slli	a1,a0,0x10
ee006738:	0105de93          	srli	t4,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00673c:	01de4f33          	xor	t5,t3,t4
                if (x16 == 1)
ee006740:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee006744:	00445093          	srli	ra,s0,0x4
                if (x16 == 1)
ee006748:	001ed693          	srli	a3,t4,0x1
ee00674c:	000f8b63          	beqz	t6,ee006762 <cmp_complex+0xa54>
                   crc |= 0x8000;
ee006750:	77e9                	lui	a5,0xffffa
ee006752:	00178713          	addi	a4,a5,1 # ffffa001 <STACK+0xffb8271>
ee006756:	00e6c2b3          	xor	t0,a3,a4
ee00675a:	01029313          	slli	t1,t0,0x10
ee00675e:	01035693          	srli	a3,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006762:	00d0c3b3          	xor	t2,ra,a3
                if (x16 == 1)
ee006766:	0013f813          	andi	a6,t2,1
                data >>= 1;
ee00676a:	00545893          	srli	a7,s0,0x5
                if (x16 == 1)
ee00676e:	0016d593          	srli	a1,a3,0x1
ee006772:	00080b63          	beqz	a6,ee006788 <cmp_complex+0xa7a>
                   crc |= 0x8000;
ee006776:	7e69                	lui	t3,0xffffa
ee006778:	001e0613          	addi	a2,t3,1 # ffffa001 <STACK+0xffb8271>
ee00677c:	00c5ca33          	xor	s4,a1,a2
ee006780:	010a1513          	slli	a0,s4,0x10
ee006784:	01055593          	srli	a1,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006788:	00b8ceb3          	xor	t4,a7,a1
                if (x16 == 1)
ee00678c:	001eff13          	andi	t5,t4,1
                data >>= 1;
ee006790:	00645f93          	srli	t6,s0,0x6
                if (x16 == 1)
ee006794:	0015d313          	srli	t1,a1,0x1
ee006798:	000f0b63          	beqz	t5,ee0067ae <cmp_complex+0xaa0>
                   crc |= 0x8000;
ee00679c:	70e9                	lui	ra,0xffffa
ee00679e:	00108793          	addi	a5,ra,1 # ffffa001 <STACK+0xffb8271>
ee0067a2:	00f34733          	xor	a4,t1,a5
ee0067a6:	01071293          	slli	t0,a4,0x10
ee0067aa:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0067ae:	006fc6b3          	xor	a3,t6,t1
                if (x16 == 1)
ee0067b2:	0016f393          	andi	t2,a3,1
                data >>= 1;
ee0067b6:	801d                	srli	s0,s0,0x7
                if (x16 == 1)
ee0067b8:	00135a13          	srli	s4,t1,0x1
ee0067bc:	00038b63          	beqz	t2,ee0067d2 <cmp_complex+0xac4>
                   crc |= 0x8000;
ee0067c0:	7869                	lui	a6,0xffffa
ee0067c2:	00180893          	addi	a7,a6,1 # ffffa001 <STACK+0xffb8271>
ee0067c6:	011a4e33          	xor	t3,s4,a7
ee0067ca:	010e1613          	slli	a2,t3,0x10
ee0067ce:	01065a13          	srli	s4,a2,0x10
                if (x16 == 1)
ee0067d2:	001a7593          	andi	a1,s4,1
ee0067d6:	001a5513          	srli	a0,s4,0x1
ee0067da:	00858b63          	beq	a1,s0,ee0067f0 <cmp_complex+0xae2>
                   crc |= 0x8000;
ee0067de:	7ee9                	lui	t4,0xffffa
ee0067e0:	001e8f13          	addi	t5,t4,1 # ffffa001 <STACK+0xffb8271>
ee0067e4:	01e54533          	xor	a0,a0,t5
ee0067e8:	01051f93          	slli	t6,a0,0x10
ee0067ec:	010fd513          	srli	a0,t6,0x10
                                if (res->crcmatrix==0)
ee0067f0:	03c4d083          	lhu	ra,60(s1)
ee0067f4:	d80092e3          	bnez	ra,ee006578 <cmp_complex+0x86a>
                                        res->crcmatrix=retval;
ee0067f8:	02a49e23          	sh	a0,60(s1)
ee0067fc:	bbb5                	j	ee006578 <cmp_complex+0x86a>

ee0067fe <core_bench_list>:
        ee_s16 find_num=res->seed3;
ee0067fe:	00451303          	lh	t1,4(a0)
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
ee006802:	7139                	addi	sp,sp,-64
ee006804:	dc22                	sw	s0,56(sp)
ee006806:	d256                	sw	s5,36(sp)
ee006808:	de06                	sw	ra,60(sp)
ee00680a:	da26                	sw	s1,52(sp)
ee00680c:	d84a                	sw	s2,48(sp)
ee00680e:	d64e                	sw	s3,44(sp)
ee006810:	d452                	sw	s4,40(sp)
ee006812:	d05a                	sw	s6,32(sp)
ee006814:	ce5e                	sw	s7,28(sp)
ee006816:	cc62                	sw	s8,24(sp)
ee006818:	ca66                	sw	s9,20(sp)
ee00681a:	c86a                	sw	s10,16(sp)
ee00681c:	c66e                	sw	s11,12(sp)
        list_head *list=res->list;
ee00681e:	5140                	lw	s0,36(a0)
ee_u16 core_bench_list(core_results *res, ee_s16 finder_idx) {
ee006820:	8aaa                	mv	s5,a0
ee006822:	88ae                	mv	a7,a1
        for (i=0; i<find_num; i++) {
ee006824:	0c6057e3          	blez	t1,ee0070f2 <core_bench_list+0x8f4>
        info.idx=finder_idx;
ee006828:	8bae                	mv	s7,a1
        ee_u16 found=0,missed=0;
ee00682a:	4e01                	li	t3,0
        for (i=0; i<find_num; i++) {
ee00682c:	4581                	li	a1,0
        ee_u16 found=0,missed=0;
ee00682e:	4801                	li	a6,0
        ee_u16 retval=0;
ee006830:	4e81                	li	t4,0
                info.data16= (i & 0xff) ;
ee006832:	0ff5fc93          	zext.b	s9,a1
        if (info->idx>=0) {
ee006836:	4e0bca63          	bltz	s7,ee006d2a <core_bench_list+0x52c>
                while (list && (list->info->idx != info->idx))
ee00683a:	0c0400e3          	beqz	s0,ee0070fa <core_bench_list+0x8fc>
ee00683e:	87a2                	mv	a5,s0
ee006840:	a019                	j	ee006846 <core_bench_list+0x48>
                        list=list->next;
ee006842:	439c                	lw	a5,0(a5)
                while (list && (list->info->idx != info->idx))
ee006844:	c799                	beqz	a5,ee006852 <core_bench_list+0x54>
ee006846:	0047a283          	lw	t0,4(a5)
ee00684a:	00229383          	lh	t2,2(t0)
ee00684e:	ff739ae3          	bne	t2,s7,ee006842 <core_bench_list+0x44>
                while (list && ((list->info->data16 & 0xff) != info->data16))
ee006852:	8b22                	mv	s6,s0
ee006854:	4c01                	li	s8,0
                tmp=list->next;
ee006856:	000b2683          	lw	a3,0(s6)
                list->next=next;
ee00685a:	018b2023          	sw	s8,0(s6)
        while (list) {
ee00685e:	845a                	mv	s0,s6
ee006860:	cea1                	beqz	a3,ee0068b8 <core_bench_list+0xba>
                tmp=list->next;
ee006862:	4290                	lw	a2,0(a3)
                list->next=next;
ee006864:	0166a023          	sw	s6,0(a3)
                next=list;
ee006868:	8436                	mv	s0,a3
        while (list) {
ee00686a:	c639                	beqz	a2,ee0068b8 <core_bench_list+0xba>
                tmp=list->next;
ee00686c:	4204                	lw	s1,0(a2)
                list->next=next;
ee00686e:	c214                	sw	a3,0(a2)
                next=list;
ee006870:	8432                	mv	s0,a2
        while (list) {
ee006872:	c0b9                	beqz	s1,ee0068b8 <core_bench_list+0xba>
                tmp=list->next;
ee006874:	0004a903          	lw	s2,0(s1)
                list->next=next;
ee006878:	c090                	sw	a2,0(s1)
                next=list;
ee00687a:	8426                	mv	s0,s1
        while (list) {
ee00687c:	02090e63          	beqz	s2,ee0068b8 <core_bench_list+0xba>
                tmp=list->next;
ee006880:	00092983          	lw	s3,0(s2)
                list->next=next;
ee006884:	00992023          	sw	s1,0(s2)
                next=list;
ee006888:	844a                	mv	s0,s2
        while (list) {
ee00688a:	02098763          	beqz	s3,ee0068b8 <core_bench_list+0xba>
                tmp=list->next;
ee00688e:	0009a503          	lw	a0,0(s3)
                list->next=next;
ee006892:	0129a023          	sw	s2,0(s3)
                next=list;
ee006896:	844e                	mv	s0,s3
        while (list) {
ee006898:	c105                	beqz	a0,ee0068b8 <core_bench_list+0xba>
                tmp=list->next;
ee00689a:	00052a03          	lw	s4,0(a0)
                list->next=next;
ee00689e:	01352023          	sw	s3,0(a0)
                next=list;
ee0068a2:	842a                	mv	s0,a0
        while (list) {
ee0068a4:	000a0a63          	beqz	s4,ee0068b8 <core_bench_list+0xba>
                tmp=list->next;
ee0068a8:	000a2b03          	lw	s6,0(s4)
                list->next=next;
ee0068ac:	00aa2023          	sw	a0,0(s4)
ee0068b0:	8452                	mv	s0,s4
        while (list) {
ee0068b2:	8c52                	mv	s8,s4
ee0068b4:	fa0b11e3          	bnez	s6,ee006856 <core_bench_list+0x58>
                if (this_find==NULL) {
ee0068b8:	48078663          	beqz	a5,ee006d44 <core_bench_list+0x546>
                        if (this_find->info->data16 & 0x1) /* use found value */
ee0068bc:	0047ad03          	lw	s10,4(a5)
ee0068c0:	000d1d83          	lh	s11,0(s10)
ee0068c4:	001dff13          	andi	t5,s11,1
ee0068c8:	000f0b63          	beqz	t5,ee0068de <core_bench_list+0xe0>
                                retval+=(this_find->info->data16 >> 9) & 1;
ee0068cc:	409ddf93          	srai	t6,s11,0x9
ee0068d0:	001ff713          	andi	a4,t6,1
ee0068d4:	9eba                	add	t4,t4,a4
ee0068d6:	010e9093          	slli	ra,t4,0x10
ee0068da:	0100de93          	srli	t4,ra,0x10
                        if (this_find->next != NULL) {
ee0068de:	0007a283          	lw	t0,0(a5)
ee0068e2:	00028b63          	beqz	t0,ee0068f8 <core_bench_list+0xfa>
                                this_find->next = finder->next;
ee0068e6:	0002a383          	lw	t2,0(t0)
ee0068ea:	0077a023          	sw	t2,0(a5)
                                finder->next=list->next;
ee0068ee:	401c                	lw	a5,0(s0)
ee0068f0:	00f2a023          	sw	a5,0(t0)
                                list->next=finder;
ee0068f4:	00542023          	sw	t0,0(s0)
                        found++;
ee0068f8:	0805                	addi	a6,a6,1
ee0068fa:	01081693          	slli	a3,a6,0x10
ee0068fe:	0106d813          	srli	a6,a3,0x10
                if (info.idx>=0)
ee006902:	000bc763          	bltz	s7,ee006910 <core_bench_list+0x112>
                        info.idx++;
ee006906:	0b85                	addi	s7,s7,1
ee006908:	010b9c13          	slli	s8,s7,0x10
ee00690c:	410c5b93          	srai	s7,s8,0x10
        for (i=0; i<find_num; i++) {
ee006910:	0585                	addi	a1,a1,1
ee006912:	01059d13          	slli	s10,a1,0x10
ee006916:	410d5593          	srai	a1,s10,0x10
ee00691a:	f0b31ce3          	bne	t1,a1,ee006832 <core_bench_list+0x34>
        retval+=found*4-missed;
ee00691e:	00281313          	slli	t1,a6,0x2
ee006922:	41c30db3          	sub	s11,t1,t3
ee006926:	01be8f33          	add	t5,t4,s11
ee00692a:	010f1f93          	slli	t6,t5,0x10
ee00692e:	010fd493          	srli	s1,t6,0x10
        if (finder_idx>0)
ee006932:	69104f63          	bgtz	a7,ee006fd0 <core_bench_list+0x7d2>
        remover=core_list_remove(list->next);
ee006936:	00042e03          	lw	t3,0(s0)
        list_head *ret=item->next;
ee00693a:	8d22                	mv	s10,s0
ee00693c:	000e2503          	lw	a0,0(t3)
        tmp=item->info;
ee006940:	004e2a83          	lw	s5,4(t3)
        item->info=ret->info;
ee006944:	4150                	lw	a2,4(a0)
        item->next=item->next->next;
ee006946:	00052983          	lw	s3,0(a0)
        item->info=ret->info;
ee00694a:	00ce2223          	sw	a2,4(t3)
        ret->info=tmp;
ee00694e:	01552223          	sw	s5,4(a0)
        item->next=item->next->next;
ee006952:	013e2023          	sw	s3,0(t3)
        ret->next=NULL;
ee006956:	00052023          	sw	zero,0(a0)
        if (info->idx>=0) {
ee00695a:	3c0bc163          	bltz	s7,ee006d1c <core_bench_list+0x51e>
                while (list && (list->info->idx != info->idx))
ee00695e:	004d2c83          	lw	s9,4(s10)
ee006962:	002c9c03          	lh	s8,2(s9)
ee006966:	017c0c63          	beq	s8,s7,ee00697e <core_bench_list+0x180>
                        list=list->next;
ee00696a:	000d2d03          	lw	s10,0(s10)
                while (list && (list->info->idx != info->idx))
ee00696e:	760d0b63          	beqz	s10,ee0070e4 <core_bench_list+0x8e6>
ee006972:	004d2c83          	lw	s9,4(s10)
ee006976:	002c9c03          	lh	s8,2(s9)
ee00697a:	ff7c18e3          	bne	s8,s7,ee00696a <core_bench_list+0x16c>
                finder=list->next;
ee00697e:	400c                	lw	a1,0(s0)
                retval=crc16(list->info->data16,retval);
ee006980:	00442303          	lw	t1,4(s0)
                   crc |= 0x8000;
ee006984:	7de9                	lui	s11,0xffffa
ee006986:	001d8713          	addi	a4,s11,1 # ffffa001 <STACK+0xffb8271>
                retval=crc16(list->info->data16,retval);
ee00698a:	00031f03          	lh	t5,0(t1)
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee00698e:	010f1f93          	slli	t6,t5,0x10
ee006992:	010fd093          	srli	ra,t6,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee006996:	0fff7693          	zext.b	a3,t5
                data >>= 1;
ee00699a:	0016d793          	srli	a5,a3,0x1
ee00699e:	0026db13          	srli	s6,a3,0x2
ee0069a2:	0036da13          	srli	s4,a3,0x3
ee0069a6:	0046d993          	srli	s3,a3,0x4
ee0069aa:	0056d913          	srli	s2,a3,0x5
ee0069ae:	0066d393          	srli	t2,a3,0x6
ee0069b2:	0076d293          	srli	t0,a3,0x7
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee0069b6:	0080dc93          	srli	s9,ra,0x8
                data >>= 1;
ee0069ba:	0090db93          	srli	s7,ra,0x9
ee0069be:	00a0de93          	srli	t4,ra,0xa
ee0069c2:	00b0de13          	srli	t3,ra,0xb
ee0069c6:	00c0d313          	srli	t1,ra,0xc
ee0069ca:	00d0d893          	srli	a7,ra,0xd
ee0069ce:	00e0d813          	srli	a6,ra,0xe
ee0069d2:	00f0d613          	srli	a2,ra,0xf
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0069d6:	0096cc33          	xor	s8,a3,s1
                if (x16 == 1)
ee0069da:	001c7d93          	andi	s11,s8,1
ee0069de:	0014df93          	srli	t6,s1,0x1
ee0069e2:	000d8863          	beqz	s11,ee0069f2 <core_bench_list+0x1f4>
                   crc |= 0x8000;
ee0069e6:	00efc4b3          	xor	s1,t6,a4
ee0069ea:	01049f13          	slli	t5,s1,0x10
ee0069ee:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0069f2:	01f7c0b3          	xor	ra,a5,t6
                if (x16 == 1)
ee0069f6:	0010fc13          	andi	s8,ra,1
ee0069fa:	001fdf13          	srli	t5,t6,0x1
ee0069fe:	000c0863          	beqz	s8,ee006a0e <core_bench_list+0x210>
                   crc |= 0x8000;
ee006a02:	00ef4db3          	xor	s11,t5,a4
ee006a06:	010d9493          	slli	s1,s11,0x10
ee006a0a:	0104df13          	srli	t5,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006a0e:	01eb4fb3          	xor	t6,s6,t5
                if (x16 == 1)
ee006a12:	001ff093          	andi	ra,t6,1
ee006a16:	001f5493          	srli	s1,t5,0x1
ee006a1a:	00008863          	beqz	ra,ee006a2a <core_bench_list+0x22c>
                   crc |= 0x8000;
ee006a1e:	00e4cc33          	xor	s8,s1,a4
ee006a22:	010c1d93          	slli	s11,s8,0x10
ee006a26:	010dd493          	srli	s1,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006a2a:	009a4f33          	xor	t5,s4,s1
                if (x16 == 1)
ee006a2e:	001f7f93          	andi	t6,t5,1
ee006a32:	0014dd93          	srli	s11,s1,0x1
ee006a36:	000f8863          	beqz	t6,ee006a46 <core_bench_list+0x248>
                   crc |= 0x8000;
ee006a3a:	00edc0b3          	xor	ra,s11,a4
ee006a3e:	01009c13          	slli	s8,ra,0x10
ee006a42:	010c5d93          	srli	s11,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006a46:	01b9c4b3          	xor	s1,s3,s11
                if (x16 == 1)
ee006a4a:	0014ff13          	andi	t5,s1,1
ee006a4e:	001ddd93          	srli	s11,s11,0x1
ee006a52:	000f0863          	beqz	t5,ee006a62 <core_bench_list+0x264>
                   crc |= 0x8000;
ee006a56:	00edcfb3          	xor	t6,s11,a4
ee006a5a:	010f9093          	slli	ra,t6,0x10
ee006a5e:	0100dd93          	srli	s11,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006a62:	01b94c33          	xor	s8,s2,s11
                if (x16 == 1)
ee006a66:	001c7f13          	andi	t5,s8,1
ee006a6a:	001dd093          	srli	ra,s11,0x1
ee006a6e:	000f0863          	beqz	t5,ee006a7e <core_bench_list+0x280>
                   crc |= 0x8000;
ee006a72:	00e0c4b3          	xor	s1,ra,a4
ee006a76:	01049f93          	slli	t6,s1,0x10
ee006a7a:	010fd093          	srli	ra,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006a7e:	0013cdb3          	xor	s11,t2,ra
                if (x16 == 1)
ee006a82:	001dfc13          	andi	s8,s11,1
ee006a86:	0010df93          	srli	t6,ra,0x1
ee006a8a:	000c0863          	beqz	s8,ee006a9a <core_bench_list+0x29c>
                   crc |= 0x8000;
ee006a8e:	00efcf33          	xor	t5,t6,a4
ee006a92:	010f1493          	slli	s1,t5,0x10
ee006a96:	0104df93          	srli	t6,s1,0x10
                if (x16 == 1)
ee006a9a:	001ff093          	andi	ra,t6,1
ee006a9e:	001fdf13          	srli	t5,t6,0x1
ee006aa2:	00508863          	beq	ra,t0,ee006ab2 <core_bench_list+0x2b4>
                   crc |= 0x8000;
ee006aa6:	00ef4db3          	xor	s11,t5,a4
ee006aaa:	010d9c13          	slli	s8,s11,0x10
ee006aae:	010c5f13          	srli	t5,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006ab2:	01ecc4b3          	xor	s1,s9,t5
                if (x16 == 1)
ee006ab6:	0014ff93          	andi	t6,s1,1
ee006aba:	001f5f13          	srli	t5,t5,0x1
ee006abe:	000f8863          	beqz	t6,ee006ace <core_bench_list+0x2d0>
                   crc |= 0x8000;
ee006ac2:	00ef40b3          	xor	ra,t5,a4
ee006ac6:	01009d93          	slli	s11,ra,0x10
ee006aca:	010ddf13          	srli	t5,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006ace:	01ebcc33          	xor	s8,s7,t5
                if (x16 == 1)
ee006ad2:	001c7f93          	andi	t6,s8,1
ee006ad6:	001f5d93          	srli	s11,t5,0x1
ee006ada:	000f8863          	beqz	t6,ee006aea <core_bench_list+0x2ec>
                   crc |= 0x8000;
ee006ade:	00edc4b3          	xor	s1,s11,a4
ee006ae2:	01049093          	slli	ra,s1,0x10
ee006ae6:	0100dd93          	srli	s11,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006aea:	01becf33          	xor	t5,t4,s11
                if (x16 == 1)
ee006aee:	001f7c13          	andi	s8,t5,1
ee006af2:	001dd093          	srli	ra,s11,0x1
ee006af6:	000c0863          	beqz	s8,ee006b06 <core_bench_list+0x308>
                   crc |= 0x8000;
ee006afa:	00e0cfb3          	xor	t6,ra,a4
ee006afe:	010f9493          	slli	s1,t6,0x10
ee006b02:	0104d093          	srli	ra,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006b06:	001e4db3          	xor	s11,t3,ra
                if (x16 == 1)
ee006b0a:	001dff13          	andi	t5,s11,1
ee006b0e:	0010d493          	srli	s1,ra,0x1
ee006b12:	000f0863          	beqz	t5,ee006b22 <core_bench_list+0x324>
                   crc |= 0x8000;
ee006b16:	00e4cc33          	xor	s8,s1,a4
ee006b1a:	010c1f93          	slli	t6,s8,0x10
ee006b1e:	010fd493          	srli	s1,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006b22:	009340b3          	xor	ra,t1,s1
                if (x16 == 1)
ee006b26:	0010fd93          	andi	s11,ra,1
ee006b2a:	0014df93          	srli	t6,s1,0x1
ee006b2e:	000d8863          	beqz	s11,ee006b3e <core_bench_list+0x340>
                   crc |= 0x8000;
ee006b32:	00efcf33          	xor	t5,t6,a4
ee006b36:	010f1c13          	slli	s8,t5,0x10
ee006b3a:	010c5f93          	srli	t6,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006b3e:	01f8c4b3          	xor	s1,a7,t6
                if (x16 == 1)
ee006b42:	0014f093          	andi	ra,s1,1
ee006b46:	001fdf93          	srli	t6,t6,0x1
ee006b4a:	00008863          	beqz	ra,ee006b5a <core_bench_list+0x35c>
                   crc |= 0x8000;
ee006b4e:	00efcdb3          	xor	s11,t6,a4
ee006b52:	010d9f13          	slli	t5,s11,0x10
ee006b56:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006b5a:	01f84c33          	xor	s8,a6,t6
                if (x16 == 1)
ee006b5e:	001c7093          	andi	ra,s8,1
ee006b62:	001fdf13          	srli	t5,t6,0x1
ee006b66:	00008863          	beqz	ra,ee006b76 <core_bench_list+0x378>
                   crc |= 0x8000;
ee006b6a:	00ef44b3          	xor	s1,t5,a4
ee006b6e:	01049d93          	slli	s11,s1,0x10
ee006b72:	010ddf13          	srli	t5,s11,0x10
                if (x16 == 1)
ee006b76:	001f7f93          	andi	t6,t5,1
ee006b7a:	001f5493          	srli	s1,t5,0x1
ee006b7e:	00cf8863          	beq	t6,a2,ee006b8e <core_bench_list+0x390>
                   crc |= 0x8000;
ee006b82:	00e4cc33          	xor	s8,s1,a4
ee006b86:	010c1093          	slli	ra,s8,0x10
ee006b8a:	0100d493          	srli	s1,ra,0x10
                finder=finder->next;
ee006b8e:	000d2d03          	lw	s10,0(s10)
        while (finder) {
ee006b92:	e40d12e3          	bnez	s10,ee0069d6 <core_bench_list+0x1d8>
        item_removed->info=item_modified->info;
ee006b96:	0045ad03          	lw	s10,4(a1)
        item_removed->next=item_modified->next;
ee006b9a:	4198                	lw	a4,0(a1)
    insize = 1;
ee006b9c:	4c85                	li	s9,1
        item_removed->info=item_modified->info;
ee006b9e:	01a52223          	sw	s10,4(a0)
        item_modified->info=tmp;
ee006ba2:	0155a223          	sw	s5,4(a1)
        item_removed->next=item_modified->next;
ee006ba6:	c118                	sw	a4,0(a0)
        item_modified->next=item_removed;
ee006ba8:	c188                	sw	a0,0(a1)
        tail = NULL;
ee006baa:	4281                	li	t0,0
        list = NULL;
ee006bac:	4e81                	li	t4,0
        nmerges = 0;  /* count number of merges we do in this pass */
ee006bae:	4c01                	li	s8,0
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
ee006bb0:	4b85                	li	s7,1
            nmerges++;  /* there exists a merge to be done */
ee006bb2:	007cf513          	andi	a0,s9,7
ee006bb6:	0c05                	addi	s8,s8,1
ee006bb8:	83a2                	mv	t2,s0
            psize = 0;
ee006bba:	4781                	li	a5,0
ee006bbc:	c925                	beqz	a0,ee006c2c <core_bench_list+0x42e>
ee006bbe:	4a85                	li	s5,1
ee006bc0:	05550f63          	beq	a0,s5,ee006c1e <core_bench_list+0x420>
ee006bc4:	4589                	li	a1,2
ee006bc6:	04b50763          	beq	a0,a1,ee006c14 <core_bench_list+0x416>
ee006bca:	468d                	li	a3,3
ee006bcc:	02d50f63          	beq	a0,a3,ee006c0a <core_bench_list+0x40c>
ee006bd0:	4b11                	li	s6,4
ee006bd2:	03650763          	beq	a0,s6,ee006c00 <core_bench_list+0x402>
ee006bd6:	4a15                	li	s4,5
ee006bd8:	01450f63          	beq	a0,s4,ee006bf6 <core_bench_list+0x3f8>
ee006bdc:	4999                	li	s3,6
ee006bde:	01350763          	beq	a0,s3,ee006bec <core_bench_list+0x3ee>
                            q = q->next;
ee006be2:	00042383          	lw	t2,0(s0)
                psize++;
ee006be6:	4785                	li	a5,1
                if (!q) break;
ee006be8:	0a038163          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006bec:	0003a383          	lw	t2,0(t2)
                psize++;
ee006bf0:	0785                	addi	a5,a5,1
                if (!q) break;
ee006bf2:	08038c63          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006bf6:	0003a383          	lw	t2,0(t2)
                psize++;
ee006bfa:	0785                	addi	a5,a5,1
                if (!q) break;
ee006bfc:	08038763          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c00:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c04:	0785                	addi	a5,a5,1
                if (!q) break;
ee006c06:	08038263          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c0a:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c0e:	0785                	addi	a5,a5,1
                if (!q) break;
ee006c10:	06038d63          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c14:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c18:	0785                	addi	a5,a5,1
                if (!q) break;
ee006c1a:	06038863          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c1e:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c22:	0785                	addi	a5,a5,1
                if (!q) break;
ee006c24:	06038363          	beqz	t2,ee006c8a <core_bench_list+0x48c>
            for (i = 0; i < insize; i++) {
ee006c28:	07978163          	beq	a5,s9,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c2c:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c30:	0785                	addi	a5,a5,1
ee006c32:	893e                	mv	s2,a5
                if (!q) break;
ee006c34:	04038b63          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c38:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c3c:	0785                	addi	a5,a5,1
                if (!q) break;
ee006c3e:	04038663          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c42:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c46:	00290793          	addi	a5,s2,2
                if (!q) break;
ee006c4a:	04038063          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c4e:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c52:	00390793          	addi	a5,s2,3
                if (!q) break;
ee006c56:	02038a63          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c5a:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c5e:	00490793          	addi	a5,s2,4
                if (!q) break;
ee006c62:	02038463          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c66:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c6a:	00590793          	addi	a5,s2,5
                if (!q) break;
ee006c6e:	00038e63          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c72:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c76:	00690793          	addi	a5,s2,6
                if (!q) break;
ee006c7a:	00038863          	beqz	t2,ee006c8a <core_bench_list+0x48c>
                            q = q->next;
ee006c7e:	0003a383          	lw	t2,0(t2)
                psize++;
ee006c82:	00790793          	addi	a5,s2,7
                if (!q) break;
ee006c86:	fa0391e3          	bnez	t2,ee006c28 <core_bench_list+0x42a>
                                    list = e;
ee006c8a:	85e6                	mv	a1,s9
            while (psize > 0 || (qsize > 0 && q)) {
ee006c8c:	06f05663          	blez	a5,ee006cf8 <core_bench_list+0x4fa>
                                } else if (qsize == 0 || !q) {
ee006c90:	cde9                	beqz	a1,ee006d6a <core_bench_list+0x56c>
ee006c92:	0c038c63          	beqz	t2,ee006d6a <core_bench_list+0x56c>
                                } else if (cmp(p->info,q->info,res) <= 0) {
ee006c96:	00442083          	lw	ra,4(s0)
ee006c9a:	0043ad03          	lw	s10,4(t2)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
ee006c9e:	00009703          	lh	a4,0(ra)
        return a->idx - b->idx;
ee006ca2:	002d1b03          	lh	s6,2(s10)
ee006ca6:	00209a83          	lh	s5,2(ra)
                a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16>>8));
ee006caa:	01071f93          	slli	t6,a4,0x10
ee006cae:	010fdf13          	srli	t5,t6,0x10
ee006cb2:	f0077993          	andi	s3,a4,-256
ee006cb6:	008f5913          	srli	s2,t5,0x8
ee006cba:	0129e333          	or	t1,s3,s2
ee006cbe:	00609023          	sh	t1,0(ra)
                b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16>>8));
ee006cc2:	000d1883          	lh	a7,0(s10)
ee006cc6:	01089813          	slli	a6,a7,0x10
ee006cca:	01085513          	srli	a0,a6,0x10
ee006cce:	f008f693          	andi	a3,a7,-256
ee006cd2:	00855e13          	srli	t3,a0,0x8
ee006cd6:	01c6edb3          	or	s11,a3,t3
ee006cda:	01bd1023          	sh	s11,0(s10)
                                } else if (cmp(p->info,q->info,res) <= 0) {
ee006cde:	095b5663          	bge	s6,s5,ee006d6a <core_bench_list+0x56c>
                                    e = q; q = q->next; qsize--;
ee006ce2:	8a1e                	mv	s4,t2
ee006ce4:	0003a383          	lw	t2,0(t2)
ee006ce8:	15fd                	addi	a1,a1,-1
                                if (tail) {
ee006cea:	02028263          	beqz	t0,ee006d0e <core_bench_list+0x510>
                                    tail->next = e;
ee006cee:	0142a023          	sw	s4,0(t0)
                                    list = e;
ee006cf2:	82d2                	mv	t0,s4
            while (psize > 0 || (qsize > 0 && q)) {
ee006cf4:	f8f04ee3          	bgtz	a5,ee006c90 <core_bench_list+0x492>
ee006cf8:	06b05d63          	blez	a1,ee006d72 <core_bench_list+0x574>
ee006cfc:	06038f63          	beqz	t2,ee006d7a <core_bench_list+0x57c>
                                if (psize == 0) {
ee006d00:	fbd9                	bnez	a5,ee006c96 <core_bench_list+0x498>
                                    e = q; q = q->next; qsize--;
ee006d02:	8a1e                	mv	s4,t2
ee006d04:	15fd                	addi	a1,a1,-1
ee006d06:	0003a383          	lw	t2,0(t2)
                                if (tail) {
ee006d0a:	fe0292e3          	bnez	t0,ee006cee <core_bench_list+0x4f0>
                                    list = e;
ee006d0e:	8ed2                	mv	t4,s4
ee006d10:	82d2                	mv	t0,s4
ee006d12:	b7cd                	j	ee006cf4 <core_bench_list+0x4f6>
                        list=list->next;
ee006d14:	000d2d03          	lw	s10,0(s10)
                while (list && ((list->info->data16 & 0xff) != info->data16))
ee006d18:	3c0d0663          	beqz	s10,ee0070e4 <core_bench_list+0x8e6>
ee006d1c:	004d2a03          	lw	s4,4(s10)
ee006d20:	000a4b83          	lbu	s7,0(s4)
ee006d24:	ff7c98e3          	bne	s9,s7,ee006d14 <core_bench_list+0x516>
ee006d28:	b999                	j	ee00697e <core_bench_list+0x180>
ee006d2a:	3c040863          	beqz	s0,ee0070fa <core_bench_list+0x8fc>
ee006d2e:	87a2                	mv	a5,s0
ee006d30:	a021                	j	ee006d38 <core_bench_list+0x53a>
                        list=list->next;
ee006d32:	439c                	lw	a5,0(a5)
                while (list && ((list->info->data16 & 0xff) != info->data16))
ee006d34:	b0078fe3          	beqz	a5,ee006852 <core_bench_list+0x54>
ee006d38:	43d8                	lw	a4,4(a5)
ee006d3a:	00074083          	lbu	ra,0(a4)
ee006d3e:	fe1c9ae3          	bne	s9,ra,ee006d32 <core_bench_list+0x534>
ee006d42:	be01                	j	ee006852 <core_bench_list+0x54>
                        retval+=(list->next->info->data16 >> 8) & 1;
ee006d44:	4010                	lw	a2,0(s0)
                        missed++;
ee006d46:	0e05                	addi	t3,t3,1
ee006d48:	010e1493          	slli	s1,t3,0x10
                        retval+=(list->next->info->data16 >> 8) & 1;
ee006d4c:	00462903          	lw	s2,4(a2)
                        missed++;
ee006d50:	0104de13          	srli	t3,s1,0x10
                        retval+=(list->next->info->data16 >> 8) & 1;
ee006d54:	00190983          	lb	s3,1(s2)
ee006d58:	0019f513          	andi	a0,s3,1
ee006d5c:	00ae8a33          	add	s4,t4,a0
ee006d60:	010a1b13          	slli	s6,s4,0x10
ee006d64:	010b5e93          	srli	t4,s6,0x10
ee006d68:	be69                	j	ee006902 <core_bench_list+0x104>
                                    e = p; p = p->next; psize--;
ee006d6a:	8a22                	mv	s4,s0
ee006d6c:	17fd                	addi	a5,a5,-1
ee006d6e:	4000                	lw	s0,0(s0)
ee006d70:	bfad                	j	ee006cea <core_bench_list+0x4ec>
        while (p) {
ee006d72:	00038463          	beqz	t2,ee006d7a <core_bench_list+0x57c>
        nmerges = 0;  /* count number of merges we do in this pass */
ee006d76:	841e                	mv	s0,t2
ee006d78:	bd2d                	j	ee006bb2 <core_bench_list+0x3b4>
            tail->next = NULL;
ee006d7a:	0002a023          	sw	zero,0(t0)
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
ee006d7e:	017c0e63          	beq	s8,s7,ee006d9a <core_bench_list+0x59c>
        insize *= 2;
ee006d82:	0c86                	slli	s9,s9,0x1
        while (p) {
ee006d84:	000e8863          	beqz	t4,ee006d94 <core_bench_list+0x596>
ee006d88:	83f6                	mv	t2,t4
        tail = NULL;
ee006d8a:	4281                	li	t0,0
        list = NULL;
ee006d8c:	4e81                	li	t4,0
        nmerges = 0;  /* count number of merges we do in this pass */
ee006d8e:	4c01                	li	s8,0
ee006d90:	841e                	mv	s0,t2
ee006d92:	b505                	j	ee006bb2 <core_bench_list+0x3b4>
            tail->next = NULL;
ee006d94:	00002023          	sw	zero,0(zero) # 0 <_start-0x80000000>
ee006d98:	9002                	ebreak
        finder=list->next;
ee006d9a:	000ea603          	lw	a2,0(t4)
        while (finder) {
ee006d9e:	20060963          	beqz	a2,ee006fb0 <core_bench_list+0x7b2>
                retval=crc16(list->info->data16,retval);
ee006da2:	004ea403          	lw	s0,4(t4)
                   crc |= 0x8000;
ee006da6:	72e9                	lui	t0,0xffffa
ee006da8:	00128b93          	addi	s7,t0,1 # ffffa001 <STACK+0xffb8271>
                retval=crc16(list->info->data16,retval);
ee006dac:	00041e83          	lh	t4,0(s0)
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee006db0:	010e9e13          	slli	t3,t4,0x10
ee006db4:	010e5d93          	srli	s11,t3,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee006db8:	0ffefc13          	zext.b	s8,t4
                data >>= 1;
ee006dbc:	001c5093          	srli	ra,s8,0x1
ee006dc0:	002c5d13          	srli	s10,s8,0x2
ee006dc4:	003c5713          	srli	a4,s8,0x3
ee006dc8:	004c5a93          	srli	s5,s8,0x4
ee006dcc:	005c5b13          	srli	s6,s8,0x5
ee006dd0:	006c5f93          	srli	t6,s8,0x6
ee006dd4:	007c5f13          	srli	t5,s8,0x7
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee006dd8:	008dd993          	srli	s3,s11,0x8
                data >>= 1;
ee006ddc:	009dd913          	srli	s2,s11,0x9
ee006de0:	00add313          	srli	t1,s11,0xa
ee006de4:	00bdd893          	srli	a7,s11,0xb
ee006de8:	00cdd813          	srli	a6,s11,0xc
ee006dec:	00ddd513          	srli	a0,s11,0xd
ee006df0:	00edd593          	srli	a1,s11,0xe
ee006df4:	00fdd693          	srli	a3,s11,0xf
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006df8:	009c4a33          	xor	s4,s8,s1
                if (x16 == 1)
ee006dfc:	001a7393          	andi	t2,s4,1
ee006e00:	0014dc93          	srli	s9,s1,0x1
ee006e04:	00038863          	beqz	t2,ee006e14 <core_bench_list+0x616>
                   crc |= 0x8000;
ee006e08:	017cc4b3          	xor	s1,s9,s7
ee006e0c:	01049793          	slli	a5,s1,0x10
ee006e10:	0107dc93          	srli	s9,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006e14:	0190c433          	xor	s0,ra,s9
                if (x16 == 1)
ee006e18:	00147293          	andi	t0,s0,1
ee006e1c:	001cdd93          	srli	s11,s9,0x1
ee006e20:	00028863          	beqz	t0,ee006e30 <core_bench_list+0x632>
                   crc |= 0x8000;
ee006e24:	017dceb3          	xor	t4,s11,s7
ee006e28:	010e9e13          	slli	t3,t4,0x10
ee006e2c:	010e5d93          	srli	s11,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006e30:	01bd4a33          	xor	s4,s10,s11
                if (x16 == 1)
ee006e34:	001a7393          	andi	t2,s4,1
ee006e38:	001ddc93          	srli	s9,s11,0x1
ee006e3c:	00038863          	beqz	t2,ee006e4c <core_bench_list+0x64e>
                   crc |= 0x8000;
ee006e40:	017cc4b3          	xor	s1,s9,s7
ee006e44:	01049793          	slli	a5,s1,0x10
ee006e48:	0107dc93          	srli	s9,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006e4c:	01974433          	xor	s0,a4,s9
                if (x16 == 1)
ee006e50:	00147293          	andi	t0,s0,1
ee006e54:	001cdd93          	srli	s11,s9,0x1
ee006e58:	00028863          	beqz	t0,ee006e68 <core_bench_list+0x66a>
                   crc |= 0x8000;
ee006e5c:	017dceb3          	xor	t4,s11,s7
ee006e60:	010e9e13          	slli	t3,t4,0x10
ee006e64:	010e5d93          	srli	s11,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006e68:	01baca33          	xor	s4,s5,s11
                if (x16 == 1)
ee006e6c:	001a7393          	andi	t2,s4,1
ee006e70:	001ddc93          	srli	s9,s11,0x1
ee006e74:	00038863          	beqz	t2,ee006e84 <core_bench_list+0x686>
                   crc |= 0x8000;
ee006e78:	017cc4b3          	xor	s1,s9,s7
ee006e7c:	01049793          	slli	a5,s1,0x10
ee006e80:	0107dc93          	srli	s9,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006e84:	019b4433          	xor	s0,s6,s9
                if (x16 == 1)
ee006e88:	00147293          	andi	t0,s0,1
ee006e8c:	001cdd93          	srli	s11,s9,0x1
ee006e90:	00028863          	beqz	t0,ee006ea0 <core_bench_list+0x6a2>
                   crc |= 0x8000;
ee006e94:	017dceb3          	xor	t4,s11,s7
ee006e98:	010e9e13          	slli	t3,t4,0x10
ee006e9c:	010e5d93          	srli	s11,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006ea0:	01bfca33          	xor	s4,t6,s11
                if (x16 == 1)
ee006ea4:	001a7393          	andi	t2,s4,1
ee006ea8:	001ddc93          	srli	s9,s11,0x1
ee006eac:	00038863          	beqz	t2,ee006ebc <core_bench_list+0x6be>
                   crc |= 0x8000;
ee006eb0:	017cc4b3          	xor	s1,s9,s7
ee006eb4:	01049793          	slli	a5,s1,0x10
ee006eb8:	0107dc93          	srli	s9,a5,0x10
                if (x16 == 1)
ee006ebc:	001cf413          	andi	s0,s9,1
ee006ec0:	001cde13          	srli	t3,s9,0x1
ee006ec4:	01e40863          	beq	s0,t5,ee006ed4 <core_bench_list+0x6d6>
                   crc |= 0x8000;
ee006ec8:	017e42b3          	xor	t0,t3,s7
ee006ecc:	01029e93          	slli	t4,t0,0x10
ee006ed0:	010ede13          	srli	t3,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006ed4:	01c9cdb3          	xor	s11,s3,t3
                if (x16 == 1)
ee006ed8:	001dfa13          	andi	s4,s11,1
ee006edc:	001e5793          	srli	a5,t3,0x1
ee006ee0:	000a0863          	beqz	s4,ee006ef0 <core_bench_list+0x6f2>
                   crc |= 0x8000;
ee006ee4:	0177c3b3          	xor	t2,a5,s7
ee006ee8:	01039493          	slli	s1,t2,0x10
ee006eec:	0104d793          	srli	a5,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006ef0:	00f94cb3          	xor	s9,s2,a5
                if (x16 == 1)
ee006ef4:	001cf413          	andi	s0,s9,1
ee006ef8:	0017de13          	srli	t3,a5,0x1
ee006efc:	c419                	beqz	s0,ee006f0a <core_bench_list+0x70c>
                   crc |= 0x8000;
ee006efe:	017e42b3          	xor	t0,t3,s7
ee006f02:	01029e93          	slli	t4,t0,0x10
ee006f06:	010ede13          	srli	t3,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006f0a:	01c34db3          	xor	s11,t1,t3
                if (x16 == 1)
ee006f0e:	001dfa13          	andi	s4,s11,1
ee006f12:	001e5793          	srli	a5,t3,0x1
ee006f16:	000a0863          	beqz	s4,ee006f26 <core_bench_list+0x728>
                   crc |= 0x8000;
ee006f1a:	0177c3b3          	xor	t2,a5,s7
ee006f1e:	01039493          	slli	s1,t2,0x10
ee006f22:	0104d793          	srli	a5,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006f26:	00f8ccb3          	xor	s9,a7,a5
                if (x16 == 1)
ee006f2a:	001cf413          	andi	s0,s9,1
ee006f2e:	0017de13          	srli	t3,a5,0x1
ee006f32:	c419                	beqz	s0,ee006f40 <core_bench_list+0x742>
                   crc |= 0x8000;
ee006f34:	017e42b3          	xor	t0,t3,s7
ee006f38:	01029e93          	slli	t4,t0,0x10
ee006f3c:	010ede13          	srli	t3,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006f40:	01c84db3          	xor	s11,a6,t3
                if (x16 == 1)
ee006f44:	001dfa13          	andi	s4,s11,1
ee006f48:	001e5793          	srli	a5,t3,0x1
ee006f4c:	000a0863          	beqz	s4,ee006f5c <core_bench_list+0x75e>
                   crc |= 0x8000;
ee006f50:	0177c3b3          	xor	t2,a5,s7
ee006f54:	01039493          	slli	s1,t2,0x10
ee006f58:	0104d793          	srli	a5,s1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006f5c:	00f54cb3          	xor	s9,a0,a5
                if (x16 == 1)
ee006f60:	001cf413          	andi	s0,s9,1
ee006f64:	0017de13          	srli	t3,a5,0x1
ee006f68:	c419                	beqz	s0,ee006f76 <core_bench_list+0x778>
                   crc |= 0x8000;
ee006f6a:	017e42b3          	xor	t0,t3,s7
ee006f6e:	01029e93          	slli	t4,t0,0x10
ee006f72:	010ede13          	srli	t3,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee006f76:	01c5cdb3          	xor	s11,a1,t3
                if (x16 == 1)
ee006f7a:	001dfa13          	andi	s4,s11,1
ee006f7e:	001e5793          	srli	a5,t3,0x1
ee006f82:	000a0863          	beqz	s4,ee006f92 <core_bench_list+0x794>
                   crc |= 0x8000;
ee006f86:	0177c3b3          	xor	t2,a5,s7
ee006f8a:	01039493          	slli	s1,t2,0x10
ee006f8e:	0104d793          	srli	a5,s1,0x10
                if (x16 == 1)
ee006f92:	0017fc93          	andi	s9,a5,1
                crc >>= 1;
ee006f96:	0017d493          	srli	s1,a5,0x1
                if (x16 == 1)
ee006f9a:	00dc8863          	beq	s9,a3,ee006faa <core_bench_list+0x7ac>
                   crc |= 0x8000;
ee006f9e:	0174c433          	xor	s0,s1,s7
ee006fa2:	01041293          	slli	t0,s0,0x10
ee006fa6:	0102d493          	srli	s1,t0,0x10
                finder=finder->next;
ee006faa:	4210                	lw	a2,0(a2)
        while (finder) {
ee006fac:	e40616e3          	bnez	a2,ee006df8 <core_bench_list+0x5fa>
}
ee006fb0:	50f2                	lw	ra,60(sp)
ee006fb2:	5462                	lw	s0,56(sp)
ee006fb4:	5942                	lw	s2,48(sp)
ee006fb6:	59b2                	lw	s3,44(sp)
ee006fb8:	5a22                	lw	s4,40(sp)
ee006fba:	5a92                	lw	s5,36(sp)
ee006fbc:	5b02                	lw	s6,32(sp)
ee006fbe:	4bf2                	lw	s7,28(sp)
ee006fc0:	4c62                	lw	s8,24(sp)
ee006fc2:	4cd2                	lw	s9,20(sp)
ee006fc4:	4d42                	lw	s10,16(sp)
ee006fc6:	4db2                	lw	s11,12(sp)
ee006fc8:	8526                	mv	a0,s1
ee006fca:	54d2                	lw	s1,52(sp)
ee006fcc:	6121                	addi	sp,sp,64
ee006fce:	8082                	ret
    insize = 1;
ee006fd0:	4b05                	li	s6,1
        while (p) {
ee006fd2:	dc0401e3          	beqz	s0,ee006d94 <core_bench_list+0x596>
        tail = NULL;
ee006fd6:	4981                	li	s3,0
        list = NULL;
ee006fd8:	4a01                	li	s4,0
        nmerges = 0;  /* count number of merges we do in this pass */
ee006fda:	4c01                	li	s8,0
            nmerges++;  /* there exists a merge to be done */
ee006fdc:	007b7893          	andi	a7,s6,7
ee006fe0:	0c05                	addi	s8,s8,1
ee006fe2:	87a2                	mv	a5,s0
            psize = 0;
ee006fe4:	4901                	li	s2,0
ee006fe6:	04088b63          	beqz	a7,ee00703c <core_bench_list+0x83e>
ee006fea:	4705                	li	a4,1
ee006fec:	04e88363          	beq	a7,a4,ee007032 <core_bench_list+0x834>
ee006ff0:	4089                	li	ra,2
ee006ff2:	02188d63          	beq	a7,ra,ee00702c <core_bench_list+0x82e>
ee006ff6:	4e8d                	li	t4,3
ee006ff8:	03d88763          	beq	a7,t4,ee007026 <core_bench_list+0x828>
ee006ffc:	4291                	li	t0,4
ee006ffe:	02588163          	beq	a7,t0,ee007020 <core_bench_list+0x822>
ee007002:	4395                	li	t2,5
ee007004:	00788b63          	beq	a7,t2,ee00701a <core_bench_list+0x81c>
ee007008:	4699                	li	a3,6
ee00700a:	00d88563          	beq	a7,a3,ee007014 <core_bench_list+0x816>
                            q = q->next;
ee00700e:	401c                	lw	a5,0(s0)
                psize++;
ee007010:	4905                	li	s2,1
                if (!q) break;
ee007012:	c7a5                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee007014:	439c                	lw	a5,0(a5)
                psize++;
ee007016:	0905                	addi	s2,s2,1
                if (!q) break;
ee007018:	c3ad                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee00701a:	439c                	lw	a5,0(a5)
                psize++;
ee00701c:	0905                	addi	s2,s2,1
                if (!q) break;
ee00701e:	cfb1                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee007020:	439c                	lw	a5,0(a5)
                psize++;
ee007022:	0905                	addi	s2,s2,1
                if (!q) break;
ee007024:	cbb9                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee007026:	439c                	lw	a5,0(a5)
                psize++;
ee007028:	0905                	addi	s2,s2,1
                if (!q) break;
ee00702a:	cba1                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee00702c:	439c                	lw	a5,0(a5)
                psize++;
ee00702e:	0905                	addi	s2,s2,1
                if (!q) break;
ee007030:	c7a9                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee007032:	439c                	lw	a5,0(a5)
                psize++;
ee007034:	0905                	addi	s2,s2,1
                if (!q) break;
ee007036:	c3b1                	beqz	a5,ee00707a <core_bench_list+0x87c>
            for (i = 0; i < insize; i++) {
ee007038:	05690163          	beq	s2,s6,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee00703c:	439c                	lw	a5,0(a5)
                psize++;
ee00703e:	0905                	addi	s2,s2,1
ee007040:	884a                	mv	a6,s2
                if (!q) break;
ee007042:	cf85                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee007044:	439c                	lw	a5,0(a5)
                psize++;
ee007046:	0905                	addi	s2,s2,1
                if (!q) break;
ee007048:	cb8d                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee00704a:	439c                	lw	a5,0(a5)
                psize++;
ee00704c:	00280913          	addi	s2,a6,2
                if (!q) break;
ee007050:	c78d                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee007052:	439c                	lw	a5,0(a5)
                psize++;
ee007054:	00380913          	addi	s2,a6,3
                if (!q) break;
ee007058:	c38d                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee00705a:	439c                	lw	a5,0(a5)
                psize++;
ee00705c:	00480913          	addi	s2,a6,4
                if (!q) break;
ee007060:	cf89                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee007062:	439c                	lw	a5,0(a5)
                psize++;
ee007064:	00580913          	addi	s2,a6,5
                if (!q) break;
ee007068:	cb89                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee00706a:	439c                	lw	a5,0(a5)
                psize++;
ee00706c:	00680913          	addi	s2,a6,6
                if (!q) break;
ee007070:	c789                	beqz	a5,ee00707a <core_bench_list+0x87c>
                            q = q->next;
ee007072:	439c                	lw	a5,0(a5)
                psize++;
ee007074:	00780913          	addi	s2,a6,7
                if (!q) break;
ee007078:	f3e1                	bnez	a5,ee007038 <core_bench_list+0x83a>
                                    list = e;
ee00707a:	8da2                	mv	s11,s0
ee00707c:	8d5a                	mv	s10,s6
ee00707e:	843e                	mv	s0,a5
            while (psize > 0 || (qsize > 0 && q)) {
ee007080:	01205f63          	blez	s2,ee00709e <core_bench_list+0x8a0>
                                } else if (qsize == 0 || !q) {
ee007084:	020d1a63          	bnez	s10,ee0070b8 <core_bench_list+0x8ba>
                                    e = p; p = p->next; psize--;
ee007088:	83ee                	mv	t2,s11
ee00708a:	000dad83          	lw	s11,0(s11)
ee00708e:	197d                	addi	s2,s2,-1
                                if (tail) {
ee007090:	02098163          	beqz	s3,ee0070b2 <core_bench_list+0x8b4>
                                    tail->next = e;
ee007094:	0079a023          	sw	t2,0(s3)
                                    list = e;
ee007098:	899e                	mv	s3,t2
            while (psize > 0 || (qsize > 0 && q)) {
ee00709a:	ff2045e3          	bgtz	s2,ee007084 <core_bench_list+0x886>
ee00709e:	03a05a63          	blez	s10,ee0070d2 <core_bench_list+0x8d4>
ee0070a2:	c80d                	beqz	s0,ee0070d4 <core_bench_list+0x8d6>
                                if (psize == 0) {
ee0070a4:	00091b63          	bnez	s2,ee0070ba <core_bench_list+0x8bc>
                                    e = q; q = q->next; qsize--;
ee0070a8:	83a2                	mv	t2,s0
ee0070aa:	1d7d                	addi	s10,s10,-1
ee0070ac:	4000                	lw	s0,0(s0)
                                if (tail) {
ee0070ae:	fe0993e3          	bnez	s3,ee007094 <core_bench_list+0x896>
                                    list = e;
ee0070b2:	8a1e                	mv	s4,t2
ee0070b4:	899e                	mv	s3,t2
ee0070b6:	b7d5                	j	ee00709a <core_bench_list+0x89c>
                                } else if (qsize == 0 || !q) {
ee0070b8:	d861                	beqz	s0,ee007088 <core_bench_list+0x88a>
                                } else if (cmp(p->info,q->info,res) <= 0) {
ee0070ba:	404c                	lw	a1,4(s0)
ee0070bc:	004da503          	lw	a0,4(s11)
ee0070c0:	8656                	mv	a2,s5
ee0070c2:	c4dfe0ef          	jal	ra,ee005d0e <cmp_complex>
ee0070c6:	fca051e3          	blez	a0,ee007088 <core_bench_list+0x88a>
                                    e = q; q = q->next; qsize--;
ee0070ca:	83a2                	mv	t2,s0
ee0070cc:	1d7d                	addi	s10,s10,-1
ee0070ce:	4000                	lw	s0,0(s0)
ee0070d0:	b7c1                	j	ee007090 <core_bench_list+0x892>
        while (p) {
ee0070d2:	f409                	bnez	s0,ee006fdc <core_bench_list+0x7de>
            tail->next = NULL;
ee0070d4:	0009a023          	sw	zero,0(s3)
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
ee0070d8:	4405                	li	s0,1
ee0070da:	008c0a63          	beq	s8,s0,ee0070ee <core_bench_list+0x8f0>
        insize *= 2;
ee0070de:	0b06                	slli	s6,s6,0x1
        p = list;
ee0070e0:	8452                	mv	s0,s4
ee0070e2:	bdc5                	j	ee006fd2 <core_bench_list+0x7d4>
                finder=list->next;
ee0070e4:	400c                	lw	a1,0(s0)
ee0070e6:	8d2e                	mv	s10,a1
        while (finder) {
ee0070e8:	88059ce3          	bnez	a1,ee006980 <core_bench_list+0x182>
ee0070ec:	b46d                	j	ee006b96 <core_bench_list+0x398>
ee0070ee:	8452                	mv	s0,s4
ee0070f0:	b099                	j	ee006936 <core_bench_list+0x138>
ee0070f2:	4c81                	li	s9,0
        info.idx=finder_idx;
ee0070f4:	8bae                	mv	s7,a1
        for (i=0; i<find_num; i++) {
ee0070f6:	4481                	li	s1,0
ee0070f8:	b82d                	j	ee006932 <core_bench_list+0x134>
                        retval+=(list->next->info->data16 >> 8) & 1;
ee0070fa:	00002783          	lw	a5,0(zero) # 0 <_start-0x80000000>
ee0070fe:	9002                	ebreak

ee007100 <iterate>:
void *iterate(void *pres) {
ee007100:	1101                	addi	sp,sp,-32
ee007102:	ca26                	sw	s1,20(sp)
        ee_u32 iterations=res->iterations;
ee007104:	4d44                	lw	s1,28(a0)
void *iterate(void *pres) {
ee007106:	cc22                	sw	s0,24(sp)
ee007108:	c84a                	sw	s2,16(sp)
ee00710a:	c64e                	sw	s3,12(sp)
ee00710c:	ce06                	sw	ra,28(sp)
                   crc |= 0x8000;
ee00710e:	7969                	lui	s2,0xffffa
        res->crc=0;
ee007110:	02052c23          	sw	zero,56(a0)
ee007114:	02052e23          	sw	zero,60(a0)
void *iterate(void *pres) {
ee007118:	89aa                	mv	s3,a0
        for (i=0; i<iterations; i++) {
ee00711a:	4401                	li	s0,0
                   crc |= 0x8000;
ee00711c:	0905                	addi	s2,s2,1 # ffffa001 <STACK+0xffb8271>
        for (i=0; i<iterations; i++) {
ee00711e:	40048863          	beqz	s1,ee00752e <iterate+0x42e>
                crc=core_bench_list(res,1);
ee007122:	4585                	li	a1,1
ee007124:	854e                	mv	a0,s3
ee007126:	ed8ff0ef          	jal	ra,ee0067fe <core_bench_list>
                res->crc=crcu16(crc,res->crc);
ee00712a:	0389d783          	lhu	a5,56(s3)
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee00712e:	0ff57713          	zext.b	a4,a0
                data >>= 1;
ee007132:	00175613          	srli	a2,a4,0x1
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007136:	00f746b3          	xor	a3,a4,a5
                if (x16 == 1)
ee00713a:	0016f293          	andi	t0,a3,1
                   crc |= 0x8000;
ee00713e:	0017d393          	srli	t2,a5,0x1
                if (x16 == 1)
ee007142:	00028863          	beqz	t0,ee007152 <iterate+0x52>
                   crc |= 0x8000;
ee007146:	0123c0b3          	xor	ra,t2,s2
ee00714a:	01009313          	slli	t1,ra,0x10
ee00714e:	01035393          	srli	t2,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007152:	007645b3          	xor	a1,a2,t2
                if (x16 == 1)
ee007156:	0015f813          	andi	a6,a1,1
                data >>= 1;
ee00715a:	00275893          	srli	a7,a4,0x2
                if (x16 == 1)
ee00715e:	0013df13          	srli	t5,t2,0x1
ee007162:	00080863          	beqz	a6,ee007172 <iterate+0x72>
                   crc |= 0x8000;
ee007166:	012f4e33          	xor	t3,t5,s2
ee00716a:	010e1e93          	slli	t4,t3,0x10
ee00716e:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007172:	01e8cfb3          	xor	t6,a7,t5
                if (x16 == 1)
ee007176:	001ff693          	andi	a3,t6,1
                data >>= 1;
ee00717a:	00375293          	srli	t0,a4,0x3
                if (x16 == 1)
ee00717e:	001f5093          	srli	ra,t5,0x1
ee007182:	c699                	beqz	a3,ee007190 <iterate+0x90>
                   crc |= 0x8000;
ee007184:	0120c7b3          	xor	a5,ra,s2
ee007188:	01079613          	slli	a2,a5,0x10
ee00718c:	01065093          	srli	ra,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007190:	0012c333          	xor	t1,t0,ra
                if (x16 == 1)
ee007194:	00137393          	andi	t2,t1,1
                data >>= 1;
ee007198:	00475593          	srli	a1,a4,0x4
                if (x16 == 1)
ee00719c:	0010de13          	srli	t3,ra,0x1
ee0071a0:	00038863          	beqz	t2,ee0071b0 <iterate+0xb0>
                   crc |= 0x8000;
ee0071a4:	012e4833          	xor	a6,t3,s2
ee0071a8:	01081893          	slli	a7,a6,0x10
ee0071ac:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0071b0:	01c5ceb3          	xor	t4,a1,t3
                if (x16 == 1)
ee0071b4:	001eff13          	andi	t5,t4,1
                data >>= 1;
ee0071b8:	00575f93          	srli	t6,a4,0x5
                if (x16 == 1)
ee0071bc:	001e5793          	srli	a5,t3,0x1
ee0071c0:	000f0863          	beqz	t5,ee0071d0 <iterate+0xd0>
                   crc |= 0x8000;
ee0071c4:	0127c6b3          	xor	a3,a5,s2
ee0071c8:	01069293          	slli	t0,a3,0x10
ee0071cc:	0102d793          	srli	a5,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0071d0:	00ffc633          	xor	a2,t6,a5
                if (x16 == 1)
ee0071d4:	00167093          	andi	ra,a2,1
                data >>= 1;
ee0071d8:	00675313          	srli	t1,a4,0x6
                if (x16 == 1)
ee0071dc:	0017d813          	srli	a6,a5,0x1
ee0071e0:	00008863          	beqz	ra,ee0071f0 <iterate+0xf0>
                   crc |= 0x8000;
ee0071e4:	012843b3          	xor	t2,a6,s2
ee0071e8:	01039593          	slli	a1,t2,0x10
ee0071ec:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0071f0:	010348b3          	xor	a7,t1,a6
                if (x16 == 1)
ee0071f4:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee0071f8:	831d                	srli	a4,a4,0x7
                if (x16 == 1)
ee0071fa:	00185f93          	srli	t6,a6,0x1
ee0071fe:	000e0863          	beqz	t3,ee00720e <iterate+0x10e>
                   crc |= 0x8000;
ee007202:	012fceb3          	xor	t4,t6,s2
ee007206:	010e9f13          	slli	t5,t4,0x10
ee00720a:	010f5f93          	srli	t6,t5,0x10
                if (x16 == 1)
ee00720e:	001ff693          	andi	a3,t6,1
ee007212:	001fd613          	srli	a2,t6,0x1
ee007216:	00e68863          	beq	a3,a4,ee007226 <iterate+0x126>
                   crc |= 0x8000;
ee00721a:	012642b3          	xor	t0,a2,s2
ee00721e:	01029793          	slli	a5,t0,0x10
ee007222:	0107d613          	srli	a2,a5,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee007226:	8121                	srli	a0,a0,0x8
ee007228:	0ff57093          	zext.b	ra,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00722c:	00c0c333          	xor	t1,ra,a2
                if (x16 == 1)
ee007230:	00137393          	andi	t2,t1,1
                data >>= 1;
ee007234:	0010d593          	srli	a1,ra,0x1
                if (x16 == 1)
ee007238:	00165e13          	srli	t3,a2,0x1
ee00723c:	00038863          	beqz	t2,ee00724c <iterate+0x14c>
                   crc |= 0x8000;
ee007240:	012e4833          	xor	a6,t3,s2
ee007244:	01081893          	slli	a7,a6,0x10
ee007248:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00724c:	01c5c733          	xor	a4,a1,t3
                if (x16 == 1)
ee007250:	00177e93          	andi	t4,a4,1
                data >>= 1;
ee007254:	0020df13          	srli	t5,ra,0x2
                if (x16 == 1)
ee007258:	001e5293          	srli	t0,t3,0x1
ee00725c:	000e8863          	beqz	t4,ee00726c <iterate+0x16c>
                   crc |= 0x8000;
ee007260:	0122cfb3          	xor	t6,t0,s2
ee007264:	010f9693          	slli	a3,t6,0x10
ee007268:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00726c:	005f47b3          	xor	a5,t5,t0
                if (x16 == 1)
ee007270:	0017f613          	andi	a2,a5,1
                data >>= 1;
ee007274:	0030d513          	srli	a0,ra,0x3
                if (x16 == 1)
ee007278:	0012d593          	srli	a1,t0,0x1
ee00727c:	c619                	beqz	a2,ee00728a <iterate+0x18a>
                   crc |= 0x8000;
ee00727e:	0125c333          	xor	t1,a1,s2
ee007282:	01031393          	slli	t2,t1,0x10
ee007286:	0103d593          	srli	a1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00728a:	00b54833          	xor	a6,a0,a1
                if (x16 == 1)
ee00728e:	00187893          	andi	a7,a6,1
                data >>= 1;
ee007292:	0040de13          	srli	t3,ra,0x4
                if (x16 == 1)
ee007296:	0015df13          	srli	t5,a1,0x1
ee00729a:	00088863          	beqz	a7,ee0072aa <iterate+0x1aa>
                   crc |= 0x8000;
ee00729e:	012f4733          	xor	a4,t5,s2
ee0072a2:	01071e93          	slli	t4,a4,0x10
ee0072a6:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0072aa:	01ee4fb3          	xor	t6,t3,t5
                if (x16 == 1)
ee0072ae:	001ff293          	andi	t0,t6,1
                data >>= 1;
ee0072b2:	0050d693          	srli	a3,ra,0x5
                if (x16 == 1)
ee0072b6:	001f5513          	srli	a0,t5,0x1
ee0072ba:	00028863          	beqz	t0,ee0072ca <iterate+0x1ca>
                   crc |= 0x8000;
ee0072be:	012547b3          	xor	a5,a0,s2
ee0072c2:	01079613          	slli	a2,a5,0x10
ee0072c6:	01065513          	srli	a0,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0072ca:	00a6c333          	xor	t1,a3,a0
                if (x16 == 1)
ee0072ce:	00137393          	andi	t2,t1,1
                data >>= 1;
ee0072d2:	0060d593          	srli	a1,ra,0x6
                if (x16 == 1)
ee0072d6:	00155e13          	srli	t3,a0,0x1
ee0072da:	00038863          	beqz	t2,ee0072ea <iterate+0x1ea>
                   crc |= 0x8000;
ee0072de:	012e4833          	xor	a6,t3,s2
ee0072e2:	01081893          	slli	a7,a6,0x10
ee0072e6:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0072ea:	01c5c733          	xor	a4,a1,t3
                if (x16 == 1)
ee0072ee:	00177e93          	andi	t4,a4,1
                data >>= 1;
ee0072f2:	0070d093          	srli	ra,ra,0x7
                if (x16 == 1)
ee0072f6:	001e5293          	srli	t0,t3,0x1
ee0072fa:	000e8863          	beqz	t4,ee00730a <iterate+0x20a>
                   crc |= 0x8000;
ee0072fe:	0122cf33          	xor	t5,t0,s2
ee007302:	010f1f93          	slli	t6,t5,0x10
ee007306:	010fd293          	srli	t0,t6,0x10
                if (x16 == 1)
ee00730a:	0012f693          	andi	a3,t0,1
ee00730e:	0012d513          	srli	a0,t0,0x1
ee007312:	00168863          	beq	a3,ra,ee007322 <iterate+0x222>
                   crc |= 0x8000;
ee007316:	012547b3          	xor	a5,a0,s2
ee00731a:	01079613          	slli	a2,a5,0x10
ee00731e:	01065513          	srli	a0,a2,0x10
                res->crc=crcu16(crc,res->crc);
ee007322:	02a99c23          	sh	a0,56(s3)
                crc=core_bench_list(res,-1);
ee007326:	55fd                	li	a1,-1
ee007328:	854e                	mv	a0,s3
ee00732a:	cd4ff0ef          	jal	ra,ee0067fe <core_bench_list>
                res->crc=crcu16(crc,res->crc);
ee00732e:	0389d303          	lhu	t1,56(s3)
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee007332:	0ff57393          	zext.b	t2,a0
                data >>= 1;
ee007336:	0013d893          	srli	a7,t2,0x1
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00733a:	0063c5b3          	xor	a1,t2,t1
                if (x16 == 1)
ee00733e:	0015f813          	andi	a6,a1,1
                crc >>= 1;
ee007342:	00135e93          	srli	t4,t1,0x1
                if (x16 == 1)
ee007346:	00080863          	beqz	a6,ee007356 <iterate+0x256>
                   crc |= 0x8000;
ee00734a:	012ece33          	xor	t3,t4,s2
ee00734e:	010e1713          	slli	a4,t3,0x10
ee007352:	01075e93          	srli	t4,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007356:	01d8c0b3          	xor	ra,a7,t4
                if (x16 == 1)
ee00735a:	0010ff13          	andi	t5,ra,1
                data >>= 1;
ee00735e:	0023df93          	srli	t6,t2,0x2
                if (x16 == 1)
ee007362:	001ed313          	srli	t1,t4,0x1
ee007366:	000f0863          	beqz	t5,ee007376 <iterate+0x276>
                   crc |= 0x8000;
ee00736a:	012342b3          	xor	t0,t1,s2
ee00736e:	01029693          	slli	a3,t0,0x10
ee007372:	0106d313          	srli	t1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007376:	006fc633          	xor	a2,t6,t1
                if (x16 == 1)
ee00737a:	00167593          	andi	a1,a2,1
                data >>= 1;
ee00737e:	0033d813          	srli	a6,t2,0x3
                if (x16 == 1)
ee007382:	00135e13          	srli	t3,t1,0x1
ee007386:	c599                	beqz	a1,ee007394 <iterate+0x294>
                   crc |= 0x8000;
ee007388:	012e48b3          	xor	a7,t3,s2
ee00738c:	01089793          	slli	a5,a7,0x10
ee007390:	0107de13          	srli	t3,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007394:	01c84733          	xor	a4,a6,t3
                if (x16 == 1)
ee007398:	00177e93          	andi	t4,a4,1
                data >>= 1;
ee00739c:	0043d093          	srli	ra,t2,0x4
                if (x16 == 1)
ee0073a0:	001e5293          	srli	t0,t3,0x1
ee0073a4:	000e8863          	beqz	t4,ee0073b4 <iterate+0x2b4>
                   crc |= 0x8000;
ee0073a8:	0122cf33          	xor	t5,t0,s2
ee0073ac:	010f1f93          	slli	t6,t5,0x10
ee0073b0:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0073b4:	0050c6b3          	xor	a3,ra,t0
                if (x16 == 1)
ee0073b8:	0016f313          	andi	t1,a3,1
                data >>= 1;
ee0073bc:	0053d613          	srli	a2,t2,0x5
                if (x16 == 1)
ee0073c0:	0012d893          	srli	a7,t0,0x1
ee0073c4:	00030863          	beqz	t1,ee0073d4 <iterate+0x2d4>
                   crc |= 0x8000;
ee0073c8:	0128c5b3          	xor	a1,a7,s2
ee0073cc:	01059813          	slli	a6,a1,0x10
ee0073d0:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0073d4:	011647b3          	xor	a5,a2,a7
                if (x16 == 1)
ee0073d8:	0017fe13          	andi	t3,a5,1
                data >>= 1;
ee0073dc:	0063d713          	srli	a4,t2,0x6
                if (x16 == 1)
ee0073e0:	0018df13          	srli	t5,a7,0x1
ee0073e4:	000e0863          	beqz	t3,ee0073f4 <iterate+0x2f4>
                   crc |= 0x8000;
ee0073e8:	012f4eb3          	xor	t4,t5,s2
ee0073ec:	010e9093          	slli	ra,t4,0x10
ee0073f0:	0100df13          	srli	t5,ra,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0073f4:	01e74fb3          	xor	t6,a4,t5
                if (x16 == 1)
ee0073f8:	001ff293          	andi	t0,t6,1
                data >>= 1;
ee0073fc:	0073d393          	srli	t2,t2,0x7
                if (x16 == 1)
ee007400:	001f5613          	srli	a2,t5,0x1
ee007404:	00028863          	beqz	t0,ee007414 <iterate+0x314>
                   crc |= 0x8000;
ee007408:	012646b3          	xor	a3,a2,s2
ee00740c:	01069313          	slli	t1,a3,0x10
ee007410:	01035613          	srli	a2,t1,0x10
                if (x16 == 1)
ee007414:	00167593          	andi	a1,a2,1
ee007418:	00165793          	srli	a5,a2,0x1
ee00741c:	00758863          	beq	a1,t2,ee00742c <iterate+0x32c>
                   crc |= 0x8000;
ee007420:	0127c833          	xor	a6,a5,s2
ee007424:	01081893          	slli	a7,a6,0x10
ee007428:	0108d793          	srli	a5,a7,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee00742c:	8121                	srli	a0,a0,0x8
ee00742e:	0ff57e13          	zext.b	t3,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007432:	00fe4733          	xor	a4,t3,a5
                if (x16 == 1)
ee007436:	00177e93          	andi	t4,a4,1
                data >>= 1;
ee00743a:	001e5093          	srli	ra,t3,0x1
                if (x16 == 1)
ee00743e:	0017d293          	srli	t0,a5,0x1
ee007442:	000e8863          	beqz	t4,ee007452 <iterate+0x352>
                   crc |= 0x8000;
ee007446:	0122cf33          	xor	t5,t0,s2
ee00744a:	010f1f93          	slli	t6,t5,0x10
ee00744e:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007452:	0050c3b3          	xor	t2,ra,t0
                if (x16 == 1)
ee007456:	0013f693          	andi	a3,t2,1
                data >>= 1;
ee00745a:	002e5313          	srli	t1,t3,0x2
                if (x16 == 1)
ee00745e:	0012d813          	srli	a6,t0,0x1
ee007462:	c699                	beqz	a3,ee007470 <iterate+0x370>
                   crc |= 0x8000;
ee007464:	01284633          	xor	a2,a6,s2
ee007468:	01061593          	slli	a1,a2,0x10
ee00746c:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007470:	010348b3          	xor	a7,t1,a6
                if (x16 == 1)
ee007474:	0018f513          	andi	a0,a7,1
                data >>= 1;
ee007478:	003e5713          	srli	a4,t3,0x3
                if (x16 == 1)
ee00747c:	00185093          	srli	ra,a6,0x1
ee007480:	c519                	beqz	a0,ee00748e <iterate+0x38e>
                   crc |= 0x8000;
ee007482:	0120c7b3          	xor	a5,ra,s2
ee007486:	01079e93          	slli	t4,a5,0x10
ee00748a:	010ed093          	srli	ra,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00748e:	00174f33          	xor	t5,a4,ra
                if (x16 == 1)
ee007492:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee007496:	004e5293          	srli	t0,t3,0x4
                if (x16 == 1)
ee00749a:	0010d313          	srli	t1,ra,0x1
ee00749e:	000f8863          	beqz	t6,ee0074ae <iterate+0x3ae>
                   crc |= 0x8000;
ee0074a2:	012343b3          	xor	t2,t1,s2
ee0074a6:	01039693          	slli	a3,t2,0x10
ee0074aa:	0106d313          	srli	t1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0074ae:	0062c633          	xor	a2,t0,t1
                if (x16 == 1)
ee0074b2:	00167593          	andi	a1,a2,1
                data >>= 1;
ee0074b6:	005e5813          	srli	a6,t3,0x5
                if (x16 == 1)
ee0074ba:	00135793          	srli	a5,t1,0x1
ee0074be:	c599                	beqz	a1,ee0074cc <iterate+0x3cc>
                   crc |= 0x8000;
ee0074c0:	0127c8b3          	xor	a7,a5,s2
ee0074c4:	01089513          	slli	a0,a7,0x10
ee0074c8:	01055793          	srli	a5,a0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0074cc:	00f84733          	xor	a4,a6,a5
                if (x16 == 1)
ee0074d0:	00177e93          	andi	t4,a4,1
                data >>= 1;
ee0074d4:	006e5093          	srli	ra,t3,0x6
                if (x16 == 1)
ee0074d8:	0017d293          	srli	t0,a5,0x1
ee0074dc:	000e8863          	beqz	t4,ee0074ec <iterate+0x3ec>
                   crc |= 0x8000;
ee0074e0:	0122cf33          	xor	t5,t0,s2
ee0074e4:	010f1f93          	slli	t6,t5,0x10
ee0074e8:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0074ec:	0050c3b3          	xor	t2,ra,t0
                if (x16 == 1)
ee0074f0:	0013f693          	andi	a3,t2,1
                data >>= 1;
ee0074f4:	007e5e13          	srli	t3,t3,0x7
                if (x16 == 1)
ee0074f8:	0012d593          	srli	a1,t0,0x1
ee0074fc:	c699                	beqz	a3,ee00750a <iterate+0x40a>
                   crc |= 0x8000;
ee0074fe:	0125c333          	xor	t1,a1,s2
ee007502:	01031613          	slli	a2,t1,0x10
ee007506:	01065593          	srli	a1,a2,0x10
                if (x16 == 1)
ee00750a:	0015f813          	andi	a6,a1,1
ee00750e:	0015d793          	srli	a5,a1,0x1
ee007512:	01c80863          	beq	a6,t3,ee007522 <iterate+0x422>
                   crc |= 0x8000;
ee007516:	0127c8b3          	xor	a7,a5,s2
ee00751a:	01089513          	slli	a0,a7,0x10
ee00751e:	01055793          	srli	a5,a0,0x10
                res->crc=crcu16(crc,res->crc);
ee007522:	02f99c23          	sh	a5,56(s3)
                if (i==0) res->crclist=res->crc;
ee007526:	cc01                	beqz	s0,ee00753e <iterate+0x43e>
        for (i=0; i<iterations; i++) {
ee007528:	0405                	addi	s0,s0,1
ee00752a:	be849ce3          	bne	s1,s0,ee007122 <iterate+0x22>
}
ee00752e:	40f2                	lw	ra,28(sp)
ee007530:	4462                	lw	s0,24(sp)
ee007532:	44d2                	lw	s1,20(sp)
ee007534:	4942                	lw	s2,16(sp)
ee007536:	49b2                	lw	s3,12(sp)
ee007538:	4501                	li	a0,0
ee00753a:	6105                	addi	sp,sp,32
ee00753c:	8082                	ret
                if (i==0) res->crclist=res->crc;
ee00753e:	02f99d23          	sh	a5,58(s3)
        for (i=0; i<iterations; i++) {
ee007542:	4405                	li	s0,1
ee007544:	fe8485e3          	beq	s1,s0,ee00752e <iterate+0x42e>
ee007548:	4405                	li	s0,1
ee00754a:	bee1                	j	ee007122 <iterate+0x22>

ee00754c <get_seed_32>:
                switch (i) {
ee00754c:	4795                	li	a5,5
ee00754e:	04a7e563          	bltu	a5,a0,ee007598 <get_seed_32+0x4c>
ee007552:	f00402b7          	lui	t0,0xf0040
ee007556:	050a                	slli	a0,a0,0x2
ee007558:	09028313          	addi	t1,t0,144 # f0040090 <STACK+0xffffe300>
ee00755c:	006503b3          	add	t2,a0,t1
ee007560:	0003a583          	lw	a1,0(t2)
ee007564:	8582                	jr	a1
                                retval=seed5_volatile;
ee007566:	f0041637          	lui	a2,0xf0041
ee00756a:	d8062503          	lw	a0,-640(a2) # f0040d80 <STACK+0xffffeff0>
                                break;
ee00756e:	8082                	ret
                                retval=seed1_volatile;
ee007570:	f00418b7          	lui	a7,0xf0041
ee007574:	d888a503          	lw	a0,-632(a7) # f0040d88 <STACK+0xffffeff8>
                                break;
ee007578:	8082                	ret
                                retval=seed2_volatile;
ee00757a:	f0041837          	lui	a6,0xf0041
ee00757e:	d8482503          	lw	a0,-636(a6) # f0040d84 <STACK+0xffffeff4>
                                break;
ee007582:	8082                	ret
                                retval=seed3_volatile;
ee007584:	f0040737          	lui	a4,0xf0040
ee007588:	0f072503          	lw	a0,240(a4) # f00400f0 <STACK+0xffffe360>
                                break;
ee00758c:	8082                	ret
                                retval=seed4_volatile;
ee00758e:	f00406b7          	lui	a3,0xf0040
ee007592:	0ec6a503          	lw	a0,236(a3) # f00400ec <STACK+0xffffe35c>
                                break;
ee007596:	8082                	ret
                switch (i) {
ee007598:	4501                	li	a0,0
        }
ee00759a:	8082                	ret

ee00759c <crcu8>:
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00759c:	00b546b3          	xor	a3,a0,a1
                if (x16 == 1)
ee0075a0:	0016f293          	andi	t0,a3,1
                data >>= 1;
ee0075a4:	00155713          	srli	a4,a0,0x1
                if (x16 == 1)
ee0075a8:	0015d613          	srli	a2,a1,0x1
ee0075ac:	00028b63          	beqz	t0,ee0075c2 <crcu8+0x26>
                   crc |= 0x8000;
ee0075b0:	7369                	lui	t1,0xffffa
ee0075b2:	00130393          	addi	t2,t1,1 # ffffa001 <STACK+0xffb8271>
ee0075b6:	007647b3          	xor	a5,a2,t2
ee0075ba:	01079593          	slli	a1,a5,0x10
ee0075be:	0105d613          	srli	a2,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0075c2:	00c74833          	xor	a6,a4,a2
                if (x16 == 1)
ee0075c6:	00187893          	andi	a7,a6,1
                data >>= 1;
ee0075ca:	00255e13          	srli	t3,a0,0x2
                if (x16 == 1)
ee0075ce:	00165293          	srli	t0,a2,0x1
ee0075d2:	00088b63          	beqz	a7,ee0075e8 <crcu8+0x4c>
                   crc |= 0x8000;
ee0075d6:	7ee9                	lui	t4,0xffffa
ee0075d8:	001e8f13          	addi	t5,t4,1 # ffffa001 <STACK+0xffb8271>
ee0075dc:	01e2cfb3          	xor	t6,t0,t5
ee0075e0:	010f9693          	slli	a3,t6,0x10
ee0075e4:	0106d293          	srli	t0,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0075e8:	005e4733          	xor	a4,t3,t0
                if (x16 == 1)
ee0075ec:	00177313          	andi	t1,a4,1
                data >>= 1;
ee0075f0:	00355393          	srli	t2,a0,0x3
                if (x16 == 1)
ee0075f4:	0012d893          	srli	a7,t0,0x1
ee0075f8:	00030b63          	beqz	t1,ee00760e <crcu8+0x72>
                   crc |= 0x8000;
ee0075fc:	75e9                	lui	a1,0xffffa
ee0075fe:	00158613          	addi	a2,a1,1 # ffffa001 <STACK+0xffb8271>
ee007602:	00c8c7b3          	xor	a5,a7,a2
ee007606:	01079813          	slli	a6,a5,0x10
ee00760a:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00760e:	0113ce33          	xor	t3,t2,a7
                if (x16 == 1)
ee007612:	001e7e93          	andi	t4,t3,1
                data >>= 1;
ee007616:	00455f13          	srli	t5,a0,0x4
                if (x16 == 1)
ee00761a:	0018d313          	srli	t1,a7,0x1
ee00761e:	000e8b63          	beqz	t4,ee007634 <crcu8+0x98>
                   crc |= 0x8000;
ee007622:	7fe9                	lui	t6,0xffffa
ee007624:	001f8693          	addi	a3,t6,1 # ffffa001 <STACK+0xffb8271>
ee007628:	00d342b3          	xor	t0,t1,a3
ee00762c:	01029713          	slli	a4,t0,0x10
ee007630:	01075313          	srli	t1,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007634:	006f43b3          	xor	t2,t5,t1
                if (x16 == 1)
ee007638:	0013f593          	andi	a1,t2,1
                data >>= 1;
ee00763c:	00555613          	srli	a2,a0,0x5
                if (x16 == 1)
ee007640:	00135e93          	srli	t4,t1,0x1
ee007644:	c991                	beqz	a1,ee007658 <crcu8+0xbc>
                   crc |= 0x8000;
ee007646:	7869                	lui	a6,0xffffa
ee007648:	00180893          	addi	a7,a6,1 # ffffa001 <STACK+0xffb8271>
ee00764c:	011ec7b3          	xor	a5,t4,a7
ee007650:	01079e13          	slli	t3,a5,0x10
ee007654:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007658:	01d64f33          	xor	t5,a2,t4
                if (x16 == 1)
ee00765c:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee007660:	00655693          	srli	a3,a0,0x6
                if (x16 == 1)
ee007664:	001ed593          	srli	a1,t4,0x1
ee007668:	000f8b63          	beqz	t6,ee00767e <crcu8+0xe2>
                   crc |= 0x8000;
ee00766c:	72e9                	lui	t0,0xffffa
ee00766e:	00128713          	addi	a4,t0,1 # ffffa001 <STACK+0xffb8271>
ee007672:	00e5c333          	xor	t1,a1,a4
ee007676:	01031393          	slli	t2,t1,0x10
ee00767a:	0103d593          	srli	a1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00767e:	00b6c633          	xor	a2,a3,a1
                if (x16 == 1)
ee007682:	00167813          	andi	a6,a2,1
                data >>= 1;
ee007686:	00755893          	srli	a7,a0,0x7
                if (x16 == 1)
ee00768a:	0015df13          	srli	t5,a1,0x1
ee00768e:	00080b63          	beqz	a6,ee0076a4 <crcu8+0x108>
                   crc |= 0x8000;
ee007692:	7569                	lui	a0,0xffffa
ee007694:	00150e13          	addi	t3,a0,1 # ffffa001 <STACK+0xffb8271>
ee007698:	01cf47b3          	xor	a5,t5,t3
ee00769c:	01079e93          	slli	t4,a5,0x10
ee0076a0:	010edf13          	srli	t5,t4,0x10
                if (x16 == 1)
ee0076a4:	001f7f93          	andi	t6,t5,1
ee0076a8:	001f5513          	srli	a0,t5,0x1
ee0076ac:	011f8b63          	beq	t6,a7,ee0076c2 <crcu8+0x126>
                   crc |= 0x8000;
ee0076b0:	76e9                	lui	a3,0xffffa
ee0076b2:	00168293          	addi	t0,a3,1 # ffffa001 <STACK+0xffb8271>
ee0076b6:	00554733          	xor	a4,a0,t0
ee0076ba:	01071313          	slli	t1,a4,0x10
ee0076be:	01035513          	srli	a0,t1,0x10
}
ee0076c2:	8082                	ret

ee0076c4 <crcu16>:
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee0076c4:	0ff57713          	zext.b	a4,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0076c8:	00b746b3          	xor	a3,a4,a1
                if (x16 == 1)
ee0076cc:	0016f293          	andi	t0,a3,1
ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
ee0076d0:	87aa                	mv	a5,a0
                data >>= 1;
ee0076d2:	00175613          	srli	a2,a4,0x1
                crc >>= 1;
ee0076d6:	0015d813          	srli	a6,a1,0x1
                if (x16 == 1)
ee0076da:	00028b63          	beqz	t0,ee0076f0 <crcu16+0x2c>
                   crc |= 0x8000;
ee0076de:	7369                	lui	t1,0xffffa
ee0076e0:	00130393          	addi	t2,t1,1 # ffffa001 <STACK+0xffb8271>
ee0076e4:	00784533          	xor	a0,a6,t2
ee0076e8:	01051593          	slli	a1,a0,0x10
ee0076ec:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0076f0:	010648b3          	xor	a7,a2,a6
                if (x16 == 1)
ee0076f4:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee0076f8:	00275e93          	srli	t4,a4,0x2
                crc >>= 1;
ee0076fc:	00185313          	srli	t1,a6,0x1
                if (x16 == 1)
ee007700:	000e0b63          	beqz	t3,ee007716 <crcu16+0x52>
                   crc |= 0x8000;
ee007704:	7f69                	lui	t5,0xffffa
ee007706:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee00770a:	01f346b3          	xor	a3,t1,t6
ee00770e:	01069293          	slli	t0,a3,0x10
ee007712:	0102d313          	srli	t1,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007716:	006ec633          	xor	a2,t4,t1
                if (x16 == 1)
ee00771a:	00167393          	andi	t2,a2,1
                data >>= 1;
ee00771e:	00375593          	srli	a1,a4,0x3
                crc >>= 1;
ee007722:	00135e93          	srli	t4,t1,0x1
                if (x16 == 1)
ee007726:	00038b63          	beqz	t2,ee00773c <crcu16+0x78>
                   crc |= 0x8000;
ee00772a:	7869                	lui	a6,0xffffa
ee00772c:	00180893          	addi	a7,a6,1 # ffffa001 <STACK+0xffb8271>
ee007730:	011ec533          	xor	a0,t4,a7
ee007734:	01051e13          	slli	t3,a0,0x10
ee007738:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00773c:	01d5cf33          	xor	t5,a1,t4
                if (x16 == 1)
ee007740:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee007744:	00475693          	srli	a3,a4,0x4
                crc >>= 1;
ee007748:	001ed593          	srli	a1,t4,0x1
                if (x16 == 1)
ee00774c:	000f8b63          	beqz	t6,ee007762 <crcu16+0x9e>
                   crc |= 0x8000;
ee007750:	72e9                	lui	t0,0xffffa
ee007752:	00128313          	addi	t1,t0,1 # ffffa001 <STACK+0xffb8271>
ee007756:	0065c633          	xor	a2,a1,t1
ee00775a:	01061393          	slli	t2,a2,0x10
ee00775e:	0103d593          	srli	a1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007762:	00b6c833          	xor	a6,a3,a1
                if (x16 == 1)
ee007766:	00187893          	andi	a7,a6,1
                data >>= 1;
ee00776a:	00575e13          	srli	t3,a4,0x5
                crc >>= 1;
ee00776e:	0015d293          	srli	t0,a1,0x1
                if (x16 == 1)
ee007772:	00088b63          	beqz	a7,ee007788 <crcu16+0xc4>
                   crc |= 0x8000;
ee007776:	7ee9                	lui	t4,0xffffa
ee007778:	001e8f13          	addi	t5,t4,1 # ffffa001 <STACK+0xffb8271>
ee00777c:	01e2c533          	xor	a0,t0,t5
ee007780:	01051f93          	slli	t6,a0,0x10
ee007784:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007788:	005e46b3          	xor	a3,t3,t0
                if (x16 == 1)
ee00778c:	0016f313          	andi	t1,a3,1
                data >>= 1;
ee007790:	00675393          	srli	t2,a4,0x6
                crc >>= 1;
ee007794:	0012de13          	srli	t3,t0,0x1
                if (x16 == 1)
ee007798:	00030b63          	beqz	t1,ee0077ae <crcu16+0xea>
                   crc |= 0x8000;
ee00779c:	7669                	lui	a2,0xffffa
ee00779e:	00160593          	addi	a1,a2,1 # ffffa001 <STACK+0xffb8271>
ee0077a2:	00be4833          	xor	a6,t3,a1
ee0077a6:	01081893          	slli	a7,a6,0x10
ee0077aa:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0077ae:	01c3ceb3          	xor	t4,t2,t3
                if (x16 == 1)
ee0077b2:	001eff13          	andi	t5,t4,1
                data >>= 1;
ee0077b6:	831d                	srli	a4,a4,0x7
                crc >>= 1;
ee0077b8:	001e5313          	srli	t1,t3,0x1
                if (x16 == 1)
ee0077bc:	000f0b63          	beqz	t5,ee0077d2 <crcu16+0x10e>
                   crc |= 0x8000;
ee0077c0:	7fe9                	lui	t6,0xffffa
ee0077c2:	001f8293          	addi	t0,t6,1 # ffffa001 <STACK+0xffb8271>
ee0077c6:	00534533          	xor	a0,t1,t0
ee0077ca:	01051693          	slli	a3,a0,0x10
ee0077ce:	0106d313          	srli	t1,a3,0x10
                if (x16 == 1)
ee0077d2:	00137393          	andi	t2,t1,1
                crc >>= 1;
ee0077d6:	00135e13          	srli	t3,t1,0x1
                if (x16 == 1)
ee0077da:	00e38b63          	beq	t2,a4,ee0077f0 <crcu16+0x12c>
                   crc |= 0x8000;
ee0077de:	7669                	lui	a2,0xffffa
ee0077e0:	00160593          	addi	a1,a2,1 # ffffa001 <STACK+0xffb8271>
ee0077e4:	00be4833          	xor	a6,t3,a1
ee0077e8:	01081893          	slli	a7,a6,0x10
ee0077ec:	0108de13          	srli	t3,a7,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee0077f0:	0087de93          	srli	t4,a5,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0077f4:	01cecf33          	xor	t5,t4,t3
                if (x16 == 1)
ee0077f8:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee0077fc:	0097d713          	srli	a4,a5,0x9
                if (x16 == 1)
ee007800:	001e5313          	srli	t1,t3,0x1
ee007804:	000f8b63          	beqz	t6,ee00781a <crcu16+0x156>
                   crc |= 0x8000;
ee007808:	77e9                	lui	a5,0xffffa
ee00780a:	00178293          	addi	t0,a5,1 # ffffa001 <STACK+0xffb8271>
ee00780e:	00534533          	xor	a0,t1,t0
ee007812:	01051693          	slli	a3,a0,0x10
ee007816:	0106d313          	srli	t1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00781a:	006743b3          	xor	t2,a4,t1
                if (x16 == 1)
ee00781e:	0013f613          	andi	a2,t2,1
                data >>= 1;
ee007822:	002ed593          	srli	a1,t4,0x2
                if (x16 == 1)
ee007826:	00135f93          	srli	t6,t1,0x1
ee00782a:	ca11                	beqz	a2,ee00783e <crcu16+0x17a>
                   crc |= 0x8000;
ee00782c:	7869                	lui	a6,0xffffa
ee00782e:	00180893          	addi	a7,a6,1 # ffffa001 <STACK+0xffb8271>
ee007832:	011fce33          	xor	t3,t6,a7
ee007836:	010e1f13          	slli	t5,t3,0x10
ee00783a:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00783e:	01f5c733          	xor	a4,a1,t6
                if (x16 == 1)
ee007842:	00177293          	andi	t0,a4,1
                data >>= 1;
ee007846:	003ed793          	srli	a5,t4,0x3
                if (x16 == 1)
ee00784a:	001fd613          	srli	a2,t6,0x1
ee00784e:	00028b63          	beqz	t0,ee007864 <crcu16+0x1a0>
                   crc |= 0x8000;
ee007852:	76e9                	lui	a3,0xffffa
ee007854:	00168313          	addi	t1,a3,1 # ffffa001 <STACK+0xffb8271>
ee007858:	00664533          	xor	a0,a2,t1
ee00785c:	01051393          	slli	t2,a0,0x10
ee007860:	0103d613          	srli	a2,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007864:	00c7c5b3          	xor	a1,a5,a2
                if (x16 == 1)
ee007868:	0015f813          	andi	a6,a1,1
                data >>= 1;
ee00786c:	004ed893          	srli	a7,t4,0x4
                if (x16 == 1)
ee007870:	00165293          	srli	t0,a2,0x1
ee007874:	00080b63          	beqz	a6,ee00788a <crcu16+0x1c6>
                   crc |= 0x8000;
ee007878:	7e69                	lui	t3,0xffffa
ee00787a:	001e0f13          	addi	t5,t3,1 # ffffa001 <STACK+0xffb8271>
ee00787e:	01e2cfb3          	xor	t6,t0,t5
ee007882:	010f9713          	slli	a4,t6,0x10
ee007886:	01075293          	srli	t0,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00788a:	0058c7b3          	xor	a5,a7,t0
                if (x16 == 1)
ee00788e:	0017f693          	andi	a3,a5,1
                data >>= 1;
ee007892:	005ed313          	srli	t1,t4,0x5
                if (x16 == 1)
ee007896:	0012d813          	srli	a6,t0,0x1
ee00789a:	ca91                	beqz	a3,ee0078ae <crcu16+0x1ea>
                   crc |= 0x8000;
ee00789c:	73e9                	lui	t2,0xffffa
ee00789e:	00138613          	addi	a2,t2,1 # ffffa001 <STACK+0xffb8271>
ee0078a2:	00c84533          	xor	a0,a6,a2
ee0078a6:	01051593          	slli	a1,a0,0x10
ee0078aa:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0078ae:	010348b3          	xor	a7,t1,a6
                if (x16 == 1)
ee0078b2:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee0078b6:	006edf13          	srli	t5,t4,0x6
                if (x16 == 1)
ee0078ba:	00185693          	srli	a3,a6,0x1
ee0078be:	000e0b63          	beqz	t3,ee0078d4 <crcu16+0x210>
                   crc |= 0x8000;
ee0078c2:	7fe9                	lui	t6,0xffffa
ee0078c4:	001f8713          	addi	a4,t6,1 # ffffa001 <STACK+0xffb8271>
ee0078c8:	00e6c2b3          	xor	t0,a3,a4
ee0078cc:	01029793          	slli	a5,t0,0x10
ee0078d0:	0107d693          	srli	a3,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0078d4:	00df4333          	xor	t1,t5,a3
                if (x16 == 1)
ee0078d8:	00137393          	andi	t2,t1,1
                data >>= 1;
ee0078dc:	007ede93          	srli	t4,t4,0x7
                if (x16 == 1)
ee0078e0:	0016d893          	srli	a7,a3,0x1
ee0078e4:	00038b63          	beqz	t2,ee0078fa <crcu16+0x236>
                   crc |= 0x8000;
ee0078e8:	7669                	lui	a2,0xffffa
ee0078ea:	00160593          	addi	a1,a2,1 # ffffa001 <STACK+0xffb8271>
ee0078ee:	00b8c533          	xor	a0,a7,a1
ee0078f2:	01051813          	slli	a6,a0,0x10
ee0078f6:	01085893          	srli	a7,a6,0x10
                if (x16 == 1)
ee0078fa:	0018fe13          	andi	t3,a7,1
ee0078fe:	0018d513          	srli	a0,a7,0x1
ee007902:	01de0b63          	beq	t3,t4,ee007918 <crcu16+0x254>
                   crc |= 0x8000;
ee007906:	7f69                	lui	t5,0xffffa
ee007908:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee00790c:	01f54733          	xor	a4,a0,t6
ee007910:	01071293          	slli	t0,a4,0x10
ee007914:	0102d513          	srli	a0,t0,0x10
}
ee007918:	8082                	ret

ee00791a <crcu32>:
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee00791a:	0ff57713          	zext.b	a4,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00791e:	00b74833          	xor	a6,a4,a1
        return crcu16((ee_u16)newval, crc);
ee007922:	01051693          	slli	a3,a0,0x10
                if (x16 == 1)
ee007926:	00187293          	andi	t0,a6,1
ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
ee00792a:	87aa                	mv	a5,a0
        return crcu16((ee_u16)newval, crc);
ee00792c:	0106d313          	srli	t1,a3,0x10
                data >>= 1;
ee007930:	00175613          	srli	a2,a4,0x1
                crc >>= 1;
ee007934:	0015de13          	srli	t3,a1,0x1
                if (x16 == 1)
ee007938:	00028b63          	beqz	t0,ee00794e <crcu32+0x34>
                   crc |= 0x8000;
ee00793c:	75e9                	lui	a1,0xffffa
ee00793e:	00158393          	addi	t2,a1,1 # ffffa001 <STACK+0xffb8271>
ee007942:	007e4533          	xor	a0,t3,t2
ee007946:	01051893          	slli	a7,a0,0x10
ee00794a:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00794e:	01c64eb3          	xor	t4,a2,t3
                if (x16 == 1)
ee007952:	001eff13          	andi	t5,t4,1
                data >>= 1;
ee007956:	00275f93          	srli	t6,a4,0x2
                crc >>= 1;
ee00795a:	001e5393          	srli	t2,t3,0x1
                if (x16 == 1)
ee00795e:	000f0b63          	beqz	t5,ee007974 <crcu32+0x5a>
                   crc |= 0x8000;
ee007962:	7869                	lui	a6,0xffffa
ee007964:	00180293          	addi	t0,a6,1 # ffffa001 <STACK+0xffb8271>
ee007968:	0053c6b3          	xor	a3,t2,t0
ee00796c:	01069613          	slli	a2,a3,0x10
ee007970:	01065393          	srli	t2,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007974:	007fc5b3          	xor	a1,t6,t2
                if (x16 == 1)
ee007978:	0015f893          	andi	a7,a1,1
                data >>= 1;
ee00797c:	00375e13          	srli	t3,a4,0x3
                crc >>= 1;
ee007980:	0013d813          	srli	a6,t2,0x1
                if (x16 == 1)
ee007984:	00088b63          	beqz	a7,ee00799a <crcu32+0x80>
                   crc |= 0x8000;
ee007988:	7ee9                	lui	t4,0xffffa
ee00798a:	001e8f13          	addi	t5,t4,1 # ffffa001 <STACK+0xffb8271>
ee00798e:	01e84533          	xor	a0,a6,t5
ee007992:	01051f93          	slli	t6,a0,0x10
ee007996:	010fd813          	srli	a6,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00799a:	010e42b3          	xor	t0,t3,a6
                if (x16 == 1)
ee00799e:	0012f693          	andi	a3,t0,1
                data >>= 1;
ee0079a2:	00475613          	srli	a2,a4,0x4
                crc >>= 1;
ee0079a6:	00185e93          	srli	t4,a6,0x1
                if (x16 == 1)
ee0079aa:	ca91                	beqz	a3,ee0079be <crcu32+0xa4>
                   crc |= 0x8000;
ee0079ac:	73e9                	lui	t2,0xffffa
ee0079ae:	00138593          	addi	a1,t2,1 # ffffa001 <STACK+0xffb8271>
ee0079b2:	00bec8b3          	xor	a7,t4,a1
ee0079b6:	01089e13          	slli	t3,a7,0x10
ee0079ba:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0079be:	01d64f33          	xor	t5,a2,t4
                if (x16 == 1)
ee0079c2:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee0079c6:	00575813          	srli	a6,a4,0x5
                crc >>= 1;
ee0079ca:	001ed393          	srli	t2,t4,0x1
                if (x16 == 1)
ee0079ce:	000f8b63          	beqz	t6,ee0079e4 <crcu32+0xca>
                   crc |= 0x8000;
ee0079d2:	72e9                	lui	t0,0xffffa
ee0079d4:	00128693          	addi	a3,t0,1 # ffffa001 <STACK+0xffb8271>
ee0079d8:	00d3c533          	xor	a0,t2,a3
ee0079dc:	01051613          	slli	a2,a0,0x10
ee0079e0:	01065393          	srli	t2,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0079e4:	007845b3          	xor	a1,a6,t2
                if (x16 == 1)
ee0079e8:	0015f893          	andi	a7,a1,1
                data >>= 1;
ee0079ec:	00675e13          	srli	t3,a4,0x6
                crc >>= 1;
ee0079f0:	0013d293          	srli	t0,t2,0x1
                if (x16 == 1)
ee0079f4:	00088b63          	beqz	a7,ee007a0a <crcu32+0xf0>
                   crc |= 0x8000;
ee0079f8:	7ee9                	lui	t4,0xffffa
ee0079fa:	001e8f13          	addi	t5,t4,1 # ffffa001 <STACK+0xffb8271>
ee0079fe:	01e2cfb3          	xor	t6,t0,t5
ee007a02:	010f9813          	slli	a6,t6,0x10
ee007a06:	01085293          	srli	t0,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007a0a:	005e46b3          	xor	a3,t3,t0
                if (x16 == 1)
ee007a0e:	0016f613          	andi	a2,a3,1
                data >>= 1;
ee007a12:	831d                	srli	a4,a4,0x7
                crc >>= 1;
ee007a14:	0012de13          	srli	t3,t0,0x1
                if (x16 == 1)
ee007a18:	ca11                	beqz	a2,ee007a2c <crcu32+0x112>
                   crc |= 0x8000;
ee007a1a:	73e9                	lui	t2,0xffffa
ee007a1c:	00138593          	addi	a1,t2,1 # ffffa001 <STACK+0xffb8271>
ee007a20:	00be4533          	xor	a0,t3,a1
ee007a24:	01051893          	slli	a7,a0,0x10
ee007a28:	0108de13          	srli	t3,a7,0x10
                if (x16 == 1)
ee007a2c:	001e7e93          	andi	t4,t3,1
                crc >>= 1;
ee007a30:	001e5393          	srli	t2,t3,0x1
                if (x16 == 1)
ee007a34:	38ee9263          	bne	t4,a4,ee007db8 <crcu32+0x49e>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee007a38:	00835713          	srli	a4,t1,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007a3c:	007746b3          	xor	a3,a4,t2
                if (x16 == 1)
ee007a40:	0016f613          	andi	a2,a3,1
                data >>= 1;
ee007a44:	00935313          	srli	t1,t1,0x9
                if (x16 == 1)
ee007a48:	0013de93          	srli	t4,t2,0x1
ee007a4c:	ca11                	beqz	a2,ee007a60 <crcu32+0x146>
                   crc |= 0x8000;
ee007a4e:	75e9                	lui	a1,0xffffa
ee007a50:	00158893          	addi	a7,a1,1 # ffffa001 <STACK+0xffb8271>
ee007a54:	011ec533          	xor	a0,t4,a7
ee007a58:	01051e13          	slli	t3,a0,0x10
ee007a5c:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007a60:	01d34f33          	xor	t5,t1,t4
                if (x16 == 1)
ee007a64:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee007a68:	00275813          	srli	a6,a4,0x2
                if (x16 == 1)
ee007a6c:	001ed313          	srli	t1,t4,0x1
ee007a70:	000f8b63          	beqz	t6,ee007a86 <crcu32+0x16c>
                   crc |= 0x8000;
ee007a74:	72e9                	lui	t0,0xffffa
ee007a76:	00128393          	addi	t2,t0,1 # ffffa001 <STACK+0xffb8271>
ee007a7a:	007346b3          	xor	a3,t1,t2
ee007a7e:	01069613          	slli	a2,a3,0x10
ee007a82:	01065313          	srli	t1,a2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007a86:	006845b3          	xor	a1,a6,t1
                if (x16 == 1)
ee007a8a:	0015f893          	andi	a7,a1,1
                data >>= 1;
ee007a8e:	00375e13          	srli	t3,a4,0x3
                if (x16 == 1)
ee007a92:	00135813          	srli	a6,t1,0x1
ee007a96:	00088b63          	beqz	a7,ee007aac <crcu32+0x192>
                   crc |= 0x8000;
ee007a9a:	7ee9                	lui	t4,0xffffa
ee007a9c:	001e8f13          	addi	t5,t4,1 # ffffa001 <STACK+0xffb8271>
ee007aa0:	01e84533          	xor	a0,a6,t5
ee007aa4:	01051f93          	slli	t6,a0,0x10
ee007aa8:	010fd813          	srli	a6,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007aac:	010e42b3          	xor	t0,t3,a6
                if (x16 == 1)
ee007ab0:	0012f393          	andi	t2,t0,1
                data >>= 1;
ee007ab4:	00475693          	srli	a3,a4,0x4
                if (x16 == 1)
ee007ab8:	00185e13          	srli	t3,a6,0x1
ee007abc:	00038b63          	beqz	t2,ee007ad2 <crcu32+0x1b8>
                   crc |= 0x8000;
ee007ac0:	7669                	lui	a2,0xffffa
ee007ac2:	00160313          	addi	t1,a2,1 # ffffa001 <STACK+0xffb8271>
ee007ac6:	006e45b3          	xor	a1,t3,t1
ee007aca:	01059893          	slli	a7,a1,0x10
ee007ace:	0108de13          	srli	t3,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007ad2:	01c6ceb3          	xor	t4,a3,t3
                if (x16 == 1)
ee007ad6:	001eff13          	andi	t5,t4,1
                data >>= 1;
ee007ada:	00575f93          	srli	t6,a4,0x5
                if (x16 == 1)
ee007ade:	001e5313          	srli	t1,t3,0x1
ee007ae2:	000f0b63          	beqz	t5,ee007af8 <crcu32+0x1de>
                   crc |= 0x8000;
ee007ae6:	7869                	lui	a6,0xffffa
ee007ae8:	00180293          	addi	t0,a6,1 # ffffa001 <STACK+0xffb8271>
ee007aec:	00534533          	xor	a0,t1,t0
ee007af0:	01051393          	slli	t2,a0,0x10
ee007af4:	0103d313          	srli	t1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007af8:	006fc6b3          	xor	a3,t6,t1
                if (x16 == 1)
ee007afc:	0016f613          	andi	a2,a3,1
                data >>= 1;
ee007b00:	00675593          	srli	a1,a4,0x6
                if (x16 == 1)
ee007b04:	00135f93          	srli	t6,t1,0x1
ee007b08:	ca11                	beqz	a2,ee007b1c <crcu32+0x202>
                   crc |= 0x8000;
ee007b0a:	78e9                	lui	a7,0xffffa
ee007b0c:	00188e13          	addi	t3,a7,1 # ffffa001 <STACK+0xffb8271>
ee007b10:	01cfceb3          	xor	t4,t6,t3
ee007b14:	010e9f13          	slli	t5,t4,0x10
ee007b18:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007b1c:	01f5c833          	xor	a6,a1,t6
                if (x16 == 1)
ee007b20:	00187293          	andi	t0,a6,1
                data >>= 1;
ee007b24:	831d                	srli	a4,a4,0x7
                if (x16 == 1)
ee007b26:	001fd613          	srli	a2,t6,0x1
ee007b2a:	00028b63          	beqz	t0,ee007b40 <crcu32+0x226>
                   crc |= 0x8000;
ee007b2e:	73e9                	lui	t2,0xffffa
ee007b30:	00138313          	addi	t1,t2,1 # ffffa001 <STACK+0xffb8271>
ee007b34:	00664533          	xor	a0,a2,t1
ee007b38:	01051693          	slli	a3,a0,0x10
ee007b3c:	0106d613          	srli	a2,a3,0x10
                if (x16 == 1)
ee007b40:	00167593          	andi	a1,a2,1
ee007b44:	00165f93          	srli	t6,a2,0x1
ee007b48:	24e59e63          	bne	a1,a4,ee007da4 <crcu32+0x48a>
        crc=crc16((ee_s16) (newval>>16) ,crc);
ee007b4c:	0107d813          	srli	a6,a5,0x10
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee007b50:	0ff87293          	zext.b	t0,a6
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007b54:	01f2c733          	xor	a4,t0,t6
                if (x16 == 1)
ee007b58:	00177393          	andi	t2,a4,1
        return crcu16((ee_u16)newval, crc);
ee007b5c:	83c1                	srli	a5,a5,0x10
                data >>= 1;
ee007b5e:	0012d313          	srli	t1,t0,0x1
                if (x16 == 1)
ee007b62:	001fd893          	srli	a7,t6,0x1
ee007b66:	00038b63          	beqz	t2,ee007b7c <crcu32+0x262>
                   crc |= 0x8000;
ee007b6a:	76e9                	lui	a3,0xffffa
ee007b6c:	00168613          	addi	a2,a3,1 # ffffa001 <STACK+0xffb8271>
ee007b70:	00c8c533          	xor	a0,a7,a2
ee007b74:	01051593          	slli	a1,a0,0x10
ee007b78:	0105d893          	srli	a7,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007b7c:	01134e33          	xor	t3,t1,a7
                if (x16 == 1)
ee007b80:	001e7e93          	andi	t4,t3,1
                data >>= 1;
ee007b84:	0022df13          	srli	t5,t0,0x2
                if (x16 == 1)
ee007b88:	0018d313          	srli	t1,a7,0x1
ee007b8c:	000e8b63          	beqz	t4,ee007ba2 <crcu32+0x288>
                   crc |= 0x8000;
ee007b90:	7fe9                	lui	t6,0xffffa
ee007b92:	001f8813          	addi	a6,t6,1 # ffffa001 <STACK+0xffb8271>
ee007b96:	01034733          	xor	a4,t1,a6
ee007b9a:	01071393          	slli	t2,a4,0x10
ee007b9e:	0103d313          	srli	t1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007ba2:	006f46b3          	xor	a3,t5,t1
                if (x16 == 1)
ee007ba6:	0016f593          	andi	a1,a3,1
                data >>= 1;
ee007baa:	0032d613          	srli	a2,t0,0x3
                if (x16 == 1)
ee007bae:	00135f13          	srli	t5,t1,0x1
ee007bb2:	c991                	beqz	a1,ee007bc6 <crcu32+0x2ac>
                   crc |= 0x8000;
ee007bb4:	78e9                	lui	a7,0xffffa
ee007bb6:	00188e13          	addi	t3,a7,1 # ffffa001 <STACK+0xffb8271>
ee007bba:	01cf4533          	xor	a0,t5,t3
ee007bbe:	01051e93          	slli	t4,a0,0x10
ee007bc2:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007bc6:	01e64fb3          	xor	t6,a2,t5
                if (x16 == 1)
ee007bca:	001ff813          	andi	a6,t6,1
                data >>= 1;
ee007bce:	0042d713          	srli	a4,t0,0x4
                if (x16 == 1)
ee007bd2:	001f5893          	srli	a7,t5,0x1
ee007bd6:	00080b63          	beqz	a6,ee007bec <crcu32+0x2d2>
                   crc |= 0x8000;
ee007bda:	73e9                	lui	t2,0xffffa
ee007bdc:	00138313          	addi	t1,t2,1 # ffffa001 <STACK+0xffb8271>
ee007be0:	0068c6b3          	xor	a3,a7,t1
ee007be4:	01069593          	slli	a1,a3,0x10
ee007be8:	0105d893          	srli	a7,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007bec:	01174633          	xor	a2,a4,a7
                if (x16 == 1)
ee007bf0:	00167e13          	andi	t3,a2,1
                data >>= 1;
ee007bf4:	0052de93          	srli	t4,t0,0x5
                if (x16 == 1)
ee007bf8:	0018d713          	srli	a4,a7,0x1
ee007bfc:	000e0b63          	beqz	t3,ee007c12 <crcu32+0x2f8>
                   crc |= 0x8000;
ee007c00:	7f69                	lui	t5,0xffffa
ee007c02:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee007c06:	01f74533          	xor	a0,a4,t6
ee007c0a:	01051813          	slli	a6,a0,0x10
ee007c0e:	01085713          	srli	a4,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007c12:	00eec3b3          	xor	t2,t4,a4
                if (x16 == 1)
ee007c16:	0013f313          	andi	t1,t2,1
                data >>= 1;
ee007c1a:	0062d693          	srli	a3,t0,0x6
                if (x16 == 1)
ee007c1e:	00175e93          	srli	t4,a4,0x1
ee007c22:	00030b63          	beqz	t1,ee007c38 <crcu32+0x31e>
                   crc |= 0x8000;
ee007c26:	75e9                	lui	a1,0xffffa
ee007c28:	00158893          	addi	a7,a1,1 # ffffa001 <STACK+0xffb8271>
ee007c2c:	011ec633          	xor	a2,t4,a7
ee007c30:	01061e13          	slli	t3,a2,0x10
ee007c34:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007c38:	01d6cf33          	xor	t5,a3,t4
                if (x16 == 1)
ee007c3c:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee007c40:	0072d293          	srli	t0,t0,0x7
                if (x16 == 1)
ee007c44:	001ed313          	srli	t1,t4,0x1
ee007c48:	000f8b63          	beqz	t6,ee007c5e <crcu32+0x344>
                   crc |= 0x8000;
ee007c4c:	7869                	lui	a6,0xffffa
ee007c4e:	00180713          	addi	a4,a6,1 # ffffa001 <STACK+0xffb8271>
ee007c52:	00e34533          	xor	a0,t1,a4
ee007c56:	01051393          	slli	t2,a0,0x10
ee007c5a:	0103d313          	srli	t1,t2,0x10
                if (x16 == 1)
ee007c5e:	00137693          	andi	a3,t1,1
ee007c62:	00135e93          	srli	t4,t1,0x1
ee007c66:	12569563          	bne	a3,t0,ee007d90 <crcu32+0x476>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee007c6a:	0087df13          	srli	t5,a5,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007c6e:	01df4fb3          	xor	t6,t5,t4
                if (x16 == 1)
ee007c72:	001ff293          	andi	t0,t6,1
                data >>= 1;
ee007c76:	83a5                	srli	a5,a5,0x9
                if (x16 == 1)
ee007c78:	001ed313          	srli	t1,t4,0x1
ee007c7c:	00028b63          	beqz	t0,ee007c92 <crcu32+0x378>
                   crc |= 0x8000;
ee007c80:	7869                	lui	a6,0xffffa
ee007c82:	00180713          	addi	a4,a6,1 # ffffa001 <STACK+0xffb8271>
ee007c86:	00e34533          	xor	a0,t1,a4
ee007c8a:	01051393          	slli	t2,a0,0x10
ee007c8e:	0103d313          	srli	t1,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007c92:	0067c6b3          	xor	a3,a5,t1
                if (x16 == 1)
ee007c96:	0016f593          	andi	a1,a3,1
                data >>= 1;
ee007c9a:	002f5893          	srli	a7,t5,0x2
                if (x16 == 1)
ee007c9e:	00135293          	srli	t0,t1,0x1
ee007ca2:	c991                	beqz	a1,ee007cb6 <crcu32+0x39c>
                   crc |= 0x8000;
ee007ca4:	7669                	lui	a2,0xffffa
ee007ca6:	00160e13          	addi	t3,a2,1 # ffffa001 <STACK+0xffb8271>
ee007caa:	01c2ceb3          	xor	t4,t0,t3
ee007cae:	010e9f93          	slli	t6,t4,0x10
ee007cb2:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007cb6:	0058c7b3          	xor	a5,a7,t0
                if (x16 == 1)
ee007cba:	0017f813          	andi	a6,a5,1
                data >>= 1;
ee007cbe:	003f5713          	srli	a4,t5,0x3
                if (x16 == 1)
ee007cc2:	0012d593          	srli	a1,t0,0x1
ee007cc6:	00080b63          	beqz	a6,ee007cdc <crcu32+0x3c2>
                   crc |= 0x8000;
ee007cca:	73e9                	lui	t2,0xffffa
ee007ccc:	00138313          	addi	t1,t2,1 # ffffa001 <STACK+0xffb8271>
ee007cd0:	0065c533          	xor	a0,a1,t1
ee007cd4:	01051693          	slli	a3,a0,0x10
ee007cd8:	0106d593          	srli	a1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007cdc:	00b748b3          	xor	a7,a4,a1
                if (x16 == 1)
ee007ce0:	0018f613          	andi	a2,a7,1
                data >>= 1;
ee007ce4:	004f5e13          	srli	t3,t5,0x4
                if (x16 == 1)
ee007ce8:	0015d813          	srli	a6,a1,0x1
ee007cec:	ca11                	beqz	a2,ee007d00 <crcu32+0x3e6>
                   crc |= 0x8000;
ee007cee:	7ee9                	lui	t4,0xffffa
ee007cf0:	001e8f93          	addi	t6,t4,1 # ffffa001 <STACK+0xffb8271>
ee007cf4:	01f842b3          	xor	t0,a6,t6
ee007cf8:	01029793          	slli	a5,t0,0x10
ee007cfc:	0107d813          	srli	a6,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007d00:	010e4733          	xor	a4,t3,a6
                if (x16 == 1)
ee007d04:	00177393          	andi	t2,a4,1
                data >>= 1;
ee007d08:	005f5313          	srli	t1,t5,0x5
                if (x16 == 1)
ee007d0c:	00185613          	srli	a2,a6,0x1
ee007d10:	00038b63          	beqz	t2,ee007d26 <crcu32+0x40c>
                   crc |= 0x8000;
ee007d14:	76e9                	lui	a3,0xffffa
ee007d16:	00168593          	addi	a1,a3,1 # ffffa001 <STACK+0xffb8271>
ee007d1a:	00b64533          	xor	a0,a2,a1
ee007d1e:	01051893          	slli	a7,a0,0x10
ee007d22:	0108d613          	srli	a2,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007d26:	00c34e33          	xor	t3,t1,a2
                if (x16 == 1)
ee007d2a:	001e7e93          	andi	t4,t3,1
                data >>= 1;
ee007d2e:	006f5f93          	srli	t6,t5,0x6
                if (x16 == 1)
ee007d32:	00165393          	srli	t2,a2,0x1
ee007d36:	000e8b63          	beqz	t4,ee007d4c <crcu32+0x432>
                   crc |= 0x8000;
ee007d3a:	72e9                	lui	t0,0xffffa
ee007d3c:	00128793          	addi	a5,t0,1 # ffffa001 <STACK+0xffb8271>
ee007d40:	00f3c833          	xor	a6,t2,a5
ee007d44:	01081713          	slli	a4,a6,0x10
ee007d48:	01075393          	srli	t2,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007d4c:	007fc333          	xor	t1,t6,t2
                if (x16 == 1)
ee007d50:	00137693          	andi	a3,t1,1
                data >>= 1;
ee007d54:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
ee007d58:	0013de13          	srli	t3,t2,0x1
ee007d5c:	ca91                	beqz	a3,ee007d70 <crcu32+0x456>
                   crc |= 0x8000;
ee007d5e:	75e9                	lui	a1,0xffffa
ee007d60:	00158893          	addi	a7,a1,1 # ffffa001 <STACK+0xffb8271>
ee007d64:	011e4533          	xor	a0,t3,a7
ee007d68:	01051613          	slli	a2,a0,0x10
ee007d6c:	01065e13          	srli	t3,a2,0x10
                if (x16 == 1)
ee007d70:	001e7e93          	andi	t4,t3,1
ee007d74:	001e5513          	srli	a0,t3,0x1
ee007d78:	01ee8b63          	beq	t4,t5,ee007d8e <crcu32+0x474>
                   crc |= 0x8000;
ee007d7c:	7fe9                	lui	t6,0xffffa
ee007d7e:	001f8293          	addi	t0,t6,1 # ffffa001 <STACK+0xffb8271>
ee007d82:	005547b3          	xor	a5,a0,t0
ee007d86:	01079813          	slli	a6,a5,0x10
ee007d8a:	01085513          	srli	a0,a6,0x10
}
ee007d8e:	8082                	ret
                   crc |= 0x8000;
ee007d90:	75e9                	lui	a1,0xffffa
ee007d92:	00158893          	addi	a7,a1,1 # ffffa001 <STACK+0xffb8271>
ee007d96:	011ec633          	xor	a2,t4,a7
ee007d9a:	01061e13          	slli	t3,a2,0x10
ee007d9e:	010e5e93          	srli	t4,t3,0x10
ee007da2:	b5e1                	j	ee007c6a <crcu32+0x350>
ee007da4:	78e9                	lui	a7,0xffffa
ee007da6:	00188e13          	addi	t3,a7,1 # ffffa001 <STACK+0xffb8271>
ee007daa:	01cfceb3          	xor	t4,t6,t3
ee007dae:	010e9f13          	slli	t5,t4,0x10
ee007db2:	010f5f93          	srli	t6,t5,0x10
ee007db6:	bb59                	j	ee007b4c <crcu32+0x232>
ee007db8:	7f69                	lui	t5,0xffffa
ee007dba:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee007dbe:	01f3c833          	xor	a6,t2,t6
ee007dc2:	01081293          	slli	t0,a6,0x10
ee007dc6:	0102d393          	srli	t2,t0,0x10
ee007dca:	b1bd                	j	ee007a38 <crcu32+0x11e>

ee007dcc <crc16>:
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee007dcc:	0ff57713          	zext.b	a4,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007dd0:	00b746b3          	xor	a3,a4,a1
        return crcu16((ee_u16)newval, crc);
ee007dd4:	01051793          	slli	a5,a0,0x10
                if (x16 == 1)
ee007dd8:	0016f293          	andi	t0,a3,1
        return crcu16((ee_u16)newval, crc);
ee007ddc:	0107d313          	srli	t1,a5,0x10
                data >>= 1;
ee007de0:	00175613          	srli	a2,a4,0x1
                crc >>= 1;
ee007de4:	0015d893          	srli	a7,a1,0x1
                if (x16 == 1)
ee007de8:	00028b63          	beqz	t0,ee007dfe <crc16+0x32>
                   crc |= 0x8000;
ee007dec:	73e9                	lui	t2,0xffffa
ee007dee:	00138593          	addi	a1,t2,1 # ffffa001 <STACK+0xffb8271>
ee007df2:	00b8c533          	xor	a0,a7,a1
ee007df6:	01051813          	slli	a6,a0,0x10
ee007dfa:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007dfe:	01164e33          	xor	t3,a2,a7
                if (x16 == 1)
ee007e02:	001e7e93          	andi	t4,t3,1
                data >>= 1;
ee007e06:	00275f13          	srli	t5,a4,0x2
                crc >>= 1;
ee007e0a:	0018d393          	srli	t2,a7,0x1
                if (x16 == 1)
ee007e0e:	000e8b63          	beqz	t4,ee007e24 <crc16+0x58>
                   crc |= 0x8000;
ee007e12:	7fe9                	lui	t6,0xffffa
ee007e14:	001f8693          	addi	a3,t6,1 # ffffa001 <STACK+0xffb8271>
ee007e18:	00d3c2b3          	xor	t0,t2,a3
ee007e1c:	01029793          	slli	a5,t0,0x10
ee007e20:	0107d393          	srli	t2,a5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007e24:	007f4633          	xor	a2,t5,t2
                if (x16 == 1)
ee007e28:	00167593          	andi	a1,a2,1
                data >>= 1;
ee007e2c:	00375813          	srli	a6,a4,0x3
                crc >>= 1;
ee007e30:	0013df13          	srli	t5,t2,0x1
                if (x16 == 1)
ee007e34:	c991                	beqz	a1,ee007e48 <crc16+0x7c>
                   crc |= 0x8000;
ee007e36:	78e9                	lui	a7,0xffffa
ee007e38:	00188e13          	addi	t3,a7,1 # ffffa001 <STACK+0xffb8271>
ee007e3c:	01cf4533          	xor	a0,t5,t3
ee007e40:	01051e93          	slli	t4,a0,0x10
ee007e44:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007e48:	01e84fb3          	xor	t6,a6,t5
                if (x16 == 1)
ee007e4c:	001ff293          	andi	t0,t6,1
                data >>= 1;
ee007e50:	00475693          	srli	a3,a4,0x4
                crc >>= 1;
ee007e54:	001f5813          	srli	a6,t5,0x1
                if (x16 == 1)
ee007e58:	00028b63          	beqz	t0,ee007e6e <crc16+0xa2>
                   crc |= 0x8000;
ee007e5c:	77e9                	lui	a5,0xffffa
ee007e5e:	00178393          	addi	t2,a5,1 # ffffa001 <STACK+0xffb8271>
ee007e62:	00784633          	xor	a2,a6,t2
ee007e66:	01061593          	slli	a1,a2,0x10
ee007e6a:	0105d813          	srli	a6,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007e6e:	0106c8b3          	xor	a7,a3,a6
                if (x16 == 1)
ee007e72:	0018fe13          	andi	t3,a7,1
                data >>= 1;
ee007e76:	00575e93          	srli	t4,a4,0x5
                crc >>= 1;
ee007e7a:	00185793          	srli	a5,a6,0x1
                if (x16 == 1)
ee007e7e:	000e0b63          	beqz	t3,ee007e94 <crc16+0xc8>
                   crc |= 0x8000;
ee007e82:	7f69                	lui	t5,0xffffa
ee007e84:	001f0f93          	addi	t6,t5,1 # ffffa001 <STACK+0xffb8271>
ee007e88:	01f7c533          	xor	a0,a5,t6
ee007e8c:	01051293          	slli	t0,a0,0x10
ee007e90:	0102d793          	srli	a5,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007e94:	00fec6b3          	xor	a3,t4,a5
                if (x16 == 1)
ee007e98:	0016f393          	andi	t2,a3,1
                data >>= 1;
ee007e9c:	00675593          	srli	a1,a4,0x6
                crc >>= 1;
ee007ea0:	0017de93          	srli	t4,a5,0x1
                if (x16 == 1)
ee007ea4:	00038b63          	beqz	t2,ee007eba <crc16+0xee>
                   crc |= 0x8000;
ee007ea8:	7669                	lui	a2,0xffffa
ee007eaa:	00160813          	addi	a6,a2,1 # ffffa001 <STACK+0xffb8271>
ee007eae:	010ec8b3          	xor	a7,t4,a6
ee007eb2:	01089e13          	slli	t3,a7,0x10
ee007eb6:	010e5e93          	srli	t4,t3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007eba:	01d5cf33          	xor	t5,a1,t4
                if (x16 == 1)
ee007ebe:	001f7f93          	andi	t6,t5,1
                data >>= 1;
ee007ec2:	831d                	srli	a4,a4,0x7
                crc >>= 1;
ee007ec4:	001ed393          	srli	t2,t4,0x1
                if (x16 == 1)
ee007ec8:	000f8b63          	beqz	t6,ee007ede <crc16+0x112>
                   crc |= 0x8000;
ee007ecc:	72e9                	lui	t0,0xffffa
ee007ece:	00128793          	addi	a5,t0,1 # ffffa001 <STACK+0xffb8271>
ee007ed2:	00f3c533          	xor	a0,t2,a5
ee007ed6:	01051693          	slli	a3,a0,0x10
ee007eda:	0106d393          	srli	t2,a3,0x10
                if (x16 == 1)
ee007ede:	0013f593          	andi	a1,t2,1
                crc >>= 1;
ee007ee2:	0013de93          	srli	t4,t2,0x1
                if (x16 == 1)
ee007ee6:	12e59663          	bne	a1,a4,ee008012 <crc16+0x246>
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee007eea:	00835f13          	srli	t5,t1,0x8
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007eee:	01df4fb3          	xor	t6,t5,t4
                if (x16 == 1)
ee007ef2:	001ff293          	andi	t0,t6,1
                data >>= 1;
ee007ef6:	00935313          	srli	t1,t1,0x9
                if (x16 == 1)
ee007efa:	001ed393          	srli	t2,t4,0x1
ee007efe:	00028b63          	beqz	t0,ee007f14 <crc16+0x148>
                   crc |= 0x8000;
ee007f02:	7769                	lui	a4,0xffffa
ee007f04:	00170793          	addi	a5,a4,1 # ffffa001 <STACK+0xffb8271>
ee007f08:	00f3c533          	xor	a0,t2,a5
ee007f0c:	01051693          	slli	a3,a0,0x10
ee007f10:	0106d393          	srli	t2,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007f14:	007345b3          	xor	a1,t1,t2
                if (x16 == 1)
ee007f18:	0015f613          	andi	a2,a1,1
                data >>= 1;
ee007f1c:	002f5813          	srli	a6,t5,0x2
                if (x16 == 1)
ee007f20:	0013d293          	srli	t0,t2,0x1
ee007f24:	ca11                	beqz	a2,ee007f38 <crc16+0x16c>
                   crc |= 0x8000;
ee007f26:	78e9                	lui	a7,0xffffa
ee007f28:	00188e13          	addi	t3,a7,1 # ffffa001 <STACK+0xffb8271>
ee007f2c:	01c2ceb3          	xor	t4,t0,t3
ee007f30:	010e9f93          	slli	t6,t4,0x10
ee007f34:	010fd293          	srli	t0,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007f38:	00584333          	xor	t1,a6,t0
                if (x16 == 1)
ee007f3c:	00137713          	andi	a4,t1,1
                data >>= 1;
ee007f40:	003f5793          	srli	a5,t5,0x3
                if (x16 == 1)
ee007f44:	0012d613          	srli	a2,t0,0x1
ee007f48:	cb11                	beqz	a4,ee007f5c <crc16+0x190>
                   crc |= 0x8000;
ee007f4a:	76e9                	lui	a3,0xffffa
ee007f4c:	00168393          	addi	t2,a3,1 # ffffa001 <STACK+0xffb8271>
ee007f50:	00764533          	xor	a0,a2,t2
ee007f54:	01051593          	slli	a1,a0,0x10
ee007f58:	0105d613          	srli	a2,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007f5c:	00c7c833          	xor	a6,a5,a2
                if (x16 == 1)
ee007f60:	00187893          	andi	a7,a6,1
                data >>= 1;
ee007f64:	004f5e13          	srli	t3,t5,0x4
                if (x16 == 1)
ee007f68:	00165693          	srli	a3,a2,0x1
ee007f6c:	00088b63          	beqz	a7,ee007f82 <crc16+0x1b6>
                   crc |= 0x8000;
ee007f70:	7ee9                	lui	t4,0xffffa
ee007f72:	001e8f93          	addi	t6,t4,1 # ffffa001 <STACK+0xffb8271>
ee007f76:	01f6c2b3          	xor	t0,a3,t6
ee007f7a:	01029313          	slli	t1,t0,0x10
ee007f7e:	01035693          	srli	a3,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007f82:	00de4733          	xor	a4,t3,a3
                if (x16 == 1)
ee007f86:	00177393          	andi	t2,a4,1
                data >>= 1;
ee007f8a:	005f5793          	srli	a5,t5,0x5
                if (x16 == 1)
ee007f8e:	0016d893          	srli	a7,a3,0x1
ee007f92:	00038b63          	beqz	t2,ee007fa8 <crc16+0x1dc>
                   crc |= 0x8000;
ee007f96:	75e9                	lui	a1,0xffffa
ee007f98:	00158613          	addi	a2,a1,1 # ffffa001 <STACK+0xffb8271>
ee007f9c:	00c8c533          	xor	a0,a7,a2
ee007fa0:	01051813          	slli	a6,a0,0x10
ee007fa4:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007fa8:	0117ce33          	xor	t3,a5,a7
                if (x16 == 1)
ee007fac:	001e7e93          	andi	t4,t3,1
                data >>= 1;
ee007fb0:	006f5f93          	srli	t6,t5,0x6
                if (x16 == 1)
ee007fb4:	0018d393          	srli	t2,a7,0x1
ee007fb8:	000e8b63          	beqz	t4,ee007fce <crc16+0x202>
                   crc |= 0x8000;
ee007fbc:	72e9                	lui	t0,0xffffa
ee007fbe:	00128313          	addi	t1,t0,1 # ffffa001 <STACK+0xffb8271>
ee007fc2:	0063c6b3          	xor	a3,t2,t1
ee007fc6:	01069713          	slli	a4,a3,0x10
ee007fca:	01075393          	srli	t2,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee007fce:	007fc7b3          	xor	a5,t6,t2
                if (x16 == 1)
ee007fd2:	0017f593          	andi	a1,a5,1
                data >>= 1;
ee007fd6:	007f5f13          	srli	t5,t5,0x7
                if (x16 == 1)
ee007fda:	0013de13          	srli	t3,t2,0x1
ee007fde:	c991                	beqz	a1,ee007ff2 <crc16+0x226>
                   crc |= 0x8000;
ee007fe0:	7669                	lui	a2,0xffffa
ee007fe2:	00160813          	addi	a6,a2,1 # ffffa001 <STACK+0xffb8271>
ee007fe6:	010e4533          	xor	a0,t3,a6
ee007fea:	01051893          	slli	a7,a0,0x10
ee007fee:	0108de13          	srli	t3,a7,0x10
                if (x16 == 1)
ee007ff2:	001e7e93          	andi	t4,t3,1
ee007ff6:	001e5513          	srli	a0,t3,0x1
ee007ffa:	01ee8b63          	beq	t4,t5,ee008010 <crc16+0x244>
                   crc |= 0x8000;
ee007ffe:	7fe9                	lui	t6,0xffffa
ee008000:	001f8293          	addi	t0,t6,1 # ffffa001 <STACK+0xffb8271>
ee008004:	00554333          	xor	t1,a0,t0
ee008008:	01031693          	slli	a3,t1,0x10
ee00800c:	0106d513          	srli	a0,a3,0x10
}
ee008010:	8082                	ret
                   crc |= 0x8000;
ee008012:	7669                	lui	a2,0xffffa
ee008014:	00160813          	addi	a6,a2,1 # ffffa001 <STACK+0xffb8271>
ee008018:	010ec8b3          	xor	a7,t4,a6
ee00801c:	01089e13          	slli	t3,a7,0x10
ee008020:	010e5e93          	srli	t4,t3,0x10
ee008024:	b5d9                	j	ee007eea <crc16+0x11e>

ee008026 <check_data_types>:
        }
        if (retval>0) {
                ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
        }
        return retval;
}
ee008026:	4501                	li	a0,0
ee008028:	8082                	ret

ee00802a <start_time>:
        Implementation may be capturing a system timer (as implemented in the example code)
        or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void) {
uint32_t mcyclel;
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
ee00802a:	b0002773          	csrr	a4,mcycle
        start_time_val = mcyclel;
ee00802e:	f00417b7          	lui	a5,0xf0041
ee008032:	d6e7ae23          	sw	a4,-644(a5) # f0040d7c <STACK+0xffffefec>
}
ee008036:	8082                	ret

ee008038 <stop_time>:
        Implementation may be capturing a system timer (as implemented in the example code)
        or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void) {
uint32_t mcyclel;
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
ee008038:	b0002773          	csrr	a4,mcycle
        stop_time_val = mcyclel;
ee00803c:	f00417b7          	lui	a5,0xf0041
ee008040:	d6e7ac23          	sw	a4,-648(a5) # f0040d78 <STACK+0xffffefe8>
}
ee008044:	8082                	ret

ee008046 <get_time>:
        This methodology is taken to accomodate any hardware or simulated platform.
        The sample implementation returns millisecs by default,
        and the resolution is controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS get_time(void) {
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
ee008046:	f00417b7          	lui	a5,0xf0041
ee00804a:	f00412b7          	lui	t0,0xf0041
ee00804e:	d787a503          	lw	a0,-648(a5) # f0040d78 <STACK+0xffffefe8>
ee008052:	d7c2a303          	lw	t1,-644(t0) # f0040d7c <STACK+0xffffefec>
        return elapsed;
}
ee008056:	40650533          	sub	a0,a0,t1
ee00805a:	8082                	ret

ee00805c <time_in_secs>:

        The <secs_ret> type is used to accomodate systems with no support for floating point.
        Default implementation implemented by the EE_TICKS_PER_SEC macro above.
*/
secs_ret time_in_secs(CORE_TICKS ticks) {
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
ee00805c:	3e800793          	li	a5,1000
        return retval;
}
ee008060:	02f55533          	divu	a0,a0,a5
ee008064:	8082                	ret

ee008066 <portable_init>:
                ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
        }
        if (sizeof(ee_u32) != 4) {
                ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
        }
        p->portable_id=1;
ee008066:	4785                	li	a5,1
ee008068:	00f50023          	sb	a5,0(a0)
}
ee00806c:	8082                	ret

ee00806e <portable_fini>:
/* Function : portable_fini
        Target specific final code
*/
void portable_fini(core_portable *p)
{
        p->portable_id=0;
ee00806e:	00050023          	sb	zero,0(a0)
}
ee008072:	8082                	ret

ee008074 <memset>:


void* memset(void* s, int c, size_t n)
{
  asm("mv t0, a0");
ee008074:	82aa                	mv	t0,a0
  asm("add a2, a2, a0");  // end = s + n
ee008076:	962a                	add	a2,a2,a0

ee008078 <.memset_loop>:
  asm(".memset_loop: bge a0, a2, .memset_end");
ee008078:	00c55663          	bge	a0,a2,ee008084 <.memset_end>
  asm("sb a1, 0(a0)");
ee00807c:	00b50023          	sb	a1,0(a0)
  asm("addi a0, a0, 1");
ee008080:	0505                	addi	a0,a0,1
  asm("j .memset_loop");
ee008082:	bfdd                	j	ee008078 <.memset_loop>

ee008084 <.memset_end>:
  asm(".memset_end:");
  asm("mv a0, t0");
ee008084:	8516                	mv	a0,t0
  asm("jr ra");
ee008086:	8082                	ret
}
ee008088:	8082                	ret

Disassembly of section .text.startup:

ee00808a <main>:
MAIN_RETURN_TYPE main(void) {
ee00808a:	7135                	addi	sp,sp,-160
ee00808c:	cf06                	sw	ra,156(sp)
                                retval=seed1_volatile;
ee00808e:	f00417b7          	lui	a5,0xf0041
                                retval=seed2_volatile;
ee008092:	f00410b7          	lui	ra,0xf0041
                                retval=seed3_volatile;
ee008096:	f00402b7          	lui	t0,0xf0040
                                retval=seed1_volatile;
ee00809a:	d887a603          	lw	a2,-632(a5) # f0040d88 <STACK+0xffffeff8>
                                retval=seed2_volatile;
ee00809e:	d840a683          	lw	a3,-636(ra) # f0040d84 <STACK+0xffffeff4>
                                retval=seed3_volatile;
ee0080a2:	0f02a703          	lw	a4,240(t0) # f00400f0 <STACK+0xffffe360>
                                retval=seed4_volatile;
ee0080a6:	f0040337          	lui	t1,0xf0040
MAIN_RETURN_TYPE main(void) {
ee0080aa:	cb26                	sw	s1,148(sp)
                                retval=seed5_volatile;
ee0080ac:	f00413b7          	lui	t2,0xf0041
                                retval=seed4_volatile;
ee0080b0:	0ec32483          	lw	s1,236(t1) # f00400ec <STACK+0xffffe35c>
MAIN_RETURN_TYPE main(void) {
ee0080b4:	cd22                	sw	s0,152(sp)
                                retval=seed5_volatile;
ee0080b6:	d803a803          	lw	a6,-640(t2) # f0040d80 <STACK+0xffffeff0>
        results[0].seed3=get_seed(3);
ee0080ba:	01071413          	slli	s0,a4,0x10
ee0080be:	41045513          	srai	a0,s0,0x10
        p->portable_id=1;
ee0080c2:	4585                	li	a1,1
MAIN_RETURN_TYPE main(void) {
ee0080c4:	c94a                	sw	s2,144(sp)
ee0080c6:	c74e                	sw	s3,140(sp)
ee0080c8:	c552                	sw	s4,136(sp)
ee0080ca:	c356                	sw	s5,132(sp)
ee0080cc:	c15a                	sw	s6,128(sp)
ee0080ce:	dede                	sw	s7,124(sp)
ee0080d0:	dce2                	sw	s8,120(sp)
ee0080d2:	dae6                	sw	s9,116(sp)
ee0080d4:	d8ea                	sw	s10,112(sp)
ee0080d6:	d6ee                	sw	s11,108(sp)
        p->portable_id=1;
ee0080d8:	04b10f23          	sb	a1,94(sp)
        results[0].seed1=get_seed(1);
ee0080dc:	00c11e23          	sh	a2,28(sp)
        results[0].seed2=get_seed(2);
ee0080e0:	00d11f23          	sh	a3,30(sp)
        results[0].seed3=get_seed(3);
ee0080e4:	02a11023          	sh	a0,32(sp)
        results[0].iterations=get_seed_32(4);
ee0080e8:	dc26                	sw	s1,56(sp)
        if (results[0].execs==0) { /* if not supplied, execute all algorithms */
ee0080ea:	00081363          	bnez	a6,ee0080f0 <main+0x66>
                results[0].execs=ALL_ALGORITHMS_MASK;
ee0080ee:	481d                	li	a6,7
        if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
ee0080f0:	48f2                	lw	a7,28(sp)
ee0080f2:	de42                	sw	a6,60(sp)
ee0080f4:	66089f63          	bnez	a7,ee008772 <__perf_end+0x620>
ee0080f8:	68050763          	beqz	a0,ee008786 <__perf_end+0x634>
        results[0].memblock[0]=(void *)static_memblk;
ee0080fc:	f0040b37          	lui	s6,0xf0040
ee008100:	5a8b0593          	addi	a1,s6,1448 # f00405a8 <STACK+0xffffe818>
                if ((1<<(ee_u32)i) & results[0].execs)
ee008104:	00287b93          	andi	s7,a6,2
ee008108:	00187c13          	andi	s8,a6,1
                        num_algorithms++;
ee00810c:	01703cb3          	snez	s9,s7
        results[0].memblock[0]=(void *)static_memblk;
ee008110:	d22e                	sw	a1,36(sp)
        results[0].err=0;
ee008112:	04011e23          	sh	zero,92(sp)
                if ((1<<(ee_u32)i) & results[0].execs)
ee008116:	00487d13          	andi	s10,a6,4
ee00811a:	8de2                	mv	s11,s8
                        num_algorithms++;
ee00811c:	019c0e33          	add	t3,s8,s9
                if ((1<<(ee_u32)i) & results[0].execs)
ee008120:	180d1d63          	bnez	s10,ee0082ba <__perf_end+0x168>
                results[i].size=results[i].size/num_algorithms;
ee008124:	7d000e93          	li	t4,2000
ee008128:	03ced433          	divu	s0,t4,t3
ee00812c:	da22                	sw	s0,52(sp)
                if ((1<<(ee_u32)i) & results[0].execs) {
ee00812e:	680c1163          	bnez	s8,ee0087b0 <__perf_end+0x65e>
ee008132:	440b91e3          	bnez	s7,ee008d74 <__perf_end+0xc22>
        if (results[0].iterations==0) {
ee008136:	1c048463          	beqz	s1,ee0082fe <__perf_end+0x1ac>
ee00813a:	f0041a37          	lui	s4,0xf0041
ee00813e:	f0041ab7          	lui	s5,0xf0041
ee008142:	0864                	addi	s1,sp,28
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
ee008144:	b0002873          	csrr	a6,mcycle
        start_time_val = mcyclel;
ee008148:	d70a2e23          	sw	a6,-644(s4) # f0040d7c <STACK+0xffffefec>

ee00814c <__perf_start>:
        iterate(&results[0]);
ee00814c:	8526                	mv	a0,s1
ee00814e:	fb3fe0ef          	jal	ra,ee007100 <iterate>

ee008152 <__perf_end>:
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
ee008152:	b00024f3          	csrr	s1,mcycle
        return crcu16((ee_u16)newval, crc);
ee008156:	01c15503          	lhu	a0,28(sp)
ee00815a:	4581                	li	a1,0
        stop_time_val = mcyclel;
ee00815c:	d69aac23          	sw	s1,-648(s5) # f0040d78 <STACK+0xffffefe8>
        return crcu16((ee_u16)newval, crc);
ee008160:	d64ff0ef          	jal	ra,ee0076c4 <crcu16>
ee008164:	85aa                	mv	a1,a0
ee008166:	01e15503          	lhu	a0,30(sp)
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
ee00816a:	d7ca2a03          	lw	s4,-644(s4)
        return crcu16((ee_u16)newval, crc);
ee00816e:	d56ff0ef          	jal	ra,ee0076c4 <crcu16>
ee008172:	85aa                	mv	a1,a0
ee008174:	02015503          	lhu	a0,32(sp)
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
ee008178:	41448ab3          	sub	s5,s1,s4
        return crcu16((ee_u16)newval, crc);
ee00817c:	d48ff0ef          	jal	ra,ee0076c4 <crcu16>
        seedcrc=crc16(results[0].size,seedcrc);
ee008180:	58d2                	lw	a7,52(sp)
        return crcu16((ee_u16)newval, crc);
ee008182:	85aa                	mv	a1,a0
ee008184:	01089793          	slli	a5,a7,0x10
ee008188:	0107d513          	srli	a0,a5,0x10
        seedcrc=crc16(results[0].size,seedcrc);
ee00818c:	c646                	sw	a7,12(sp)
        return crcu16((ee_u16)newval, crc);
ee00818e:	d36ff0ef          	jal	ra,ee0076c4 <crcu16>
        switch (seedcrc) { /* test known output for common seeds */
ee008192:	65a1                	lui	a1,0x8
ee008194:	b0558c13          	addi	s8,a1,-1275 # 7b05 <_start-0x7fff84fb>
        return crcu16((ee_u16)newval, crc);
ee008198:	89aa                	mv	s3,a0
        switch (seedcrc) { /* test known output for common seeds */
ee00819a:	43850fe3          	beq	a0,s8,ee008dd8 <__perf_end+0xc86>
ee00819e:	38ac61e3          	bltu	s8,a0,ee008d20 <__perf_end+0xbce>
ee0081a2:	6b09                	lui	s6,0x2
ee0081a4:	8f2b0393          	addi	t2,s6,-1806 # 18f2 <_start-0x7fffe70e>
ee0081a8:	46750ce3          	beq	a0,t2,ee008e20 <__perf_end+0xcce>
ee0081ac:	6c15                	lui	s8,0x5
ee0081ae:	eafc0893          	addi	a7,s8,-337 # 4eaf <_start-0x7fffb151>
ee0081b2:	4b1517e3          	bne	a0,a7,ee008e60 <__perf_end+0xd0e>
                        ee_printf("Profile generation run parameters for coremark.\n");
ee0081b6:	f00407b7          	lui	a5,0xf0040
ee0081ba:	15078513          	addi	a0,a5,336 # f0040150 <STACK+0xffffe3c0>
ee0081be:	923f80ef          	jal	ra,ee000ae0 <whisperPrintf>
                        break;
ee0081c2:	608c0a13          	addi	s4,s8,1544
ee0081c6:	65b9                	lui	a1,0xe
ee0081c8:	6d1d                	lui	s10,0x7
ee0081ca:	5a458493          	addi	s1,a1,1444 # e5a4 <_start-0x7fff1a5c>
ee0081ce:	8b52                	mv	s6,s4
ee0081d0:	a79d0913          	addi	s2,s10,-1415 # 6a79 <_start-0x7fff9587>
                for (i=0 ; i<default_num_contexts; i++) {
ee0081d4:	f0040c37          	lui	s8,0xf0040
ee0081d8:	0e8c2d83          	lw	s11,232(s8) # f00400e8 <STACK+0xffffe358>
ee0081dc:	640d8063          	beqz	s11,ee00881c <__perf_end+0x6ca>
ee0081e0:	4401                	li	s0,0
ee0081e2:	4d01                	li	s10,0
ee0081e4:	a03d                	j	ee008212 <__perf_end+0xc0>
                        total_errors+=results[i].err;
ee0081e6:	01de0f33          	add	t5,t3,t4
ee0081ea:	ffcf5283          	lhu	t0,-4(t5)
                for (i=0 ; i<default_num_contexts; i++) {
ee0081ee:	0d05                	addi	s10,s10,1
ee0081f0:	0e8c2383          	lw	t2,232(s8)
                        total_errors+=results[i].err;
ee0081f4:	9416                	add	s0,s0,t0
                for (i=0 ; i<default_num_contexts; i++) {
ee0081f6:	010d1093          	slli	ra,s10,0x10
                        total_errors+=results[i].err;
ee0081fa:	01041713          	slli	a4,s0,0x10
ee0081fe:	01041b93          	slli	s7,s0,0x10
                for (i=0 ; i<default_num_contexts; i++) {
ee008202:	0100dd13          	srli	s10,ra,0x10
                        total_errors+=results[i].err;
ee008206:	01075c93          	srli	s9,a4,0x10
ee00820a:	410bd413          	srai	s0,s7,0x10
                for (i=0 ; i<default_num_contexts; i++) {
ee00820e:	607d7963          	bgeu	s10,t2,ee008820 <__perf_end+0x6ce>
                        results[i].err=0;
ee008212:	004d1c93          	slli	s9,s10,0x4
ee008216:	01ac8533          	add	a0,s9,s10
ee00821a:	00251e13          	slli	t3,a0,0x2
ee00821e:	050e0e93          	addi	t4,t3,80
ee008222:	01010f13          	addi	t5,sp,16
ee008226:	01ee8bb3          	add	s7,t4,t5
                        if ((results[i].execs & ID_LIST) &&
ee00822a:	fdcbad83          	lw	s11,-36(s7)
                        results[i].err=0;
ee00822e:	fe0b9e23          	sh	zero,-4(s7)
                        if ((results[i].execs & ID_LIST) &&
ee008232:	001dff93          	andi	t6,s11,1
ee008236:	020f8163          	beqz	t6,ee008258 <__perf_end+0x106>
                                (results[i].crclist!=list_known_crc[known_id])) {
ee00823a:	ff6bd603          	lhu	a2,-10(s7)
                        if ((results[i].execs & ID_LIST) &&
ee00823e:	01260d63          	beq	a2,s2,ee008258 <__perf_end+0x106>
                                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
ee008242:	f0040337          	lui	t1,0xf0040
ee008246:	86ca                	mv	a3,s2
ee008248:	85ea                	mv	a1,s10
ee00824a:	1e030513          	addi	a0,t1,480 # f00401e0 <STACK+0xffffe450>
ee00824e:	893f80ef          	jal	ra,ee000ae0 <whisperPrintf>
                                results[i].err++;
ee008252:	4605                	li	a2,1
ee008254:	fecb9e23          	sh	a2,-4(s7)
                        if ((results[i].execs & ID_MATRIX) &&
ee008258:	002df693          	andi	a3,s11,2
ee00825c:	ce85                	beqz	a3,ee008294 <__perf_end+0x142>
                                (results[i].crcmatrix!=matrix_known_crc[known_id])) {
ee00825e:	01ac82b3          	add	t0,s9,s10
ee008262:	00229393          	slli	t2,t0,0x2
ee008266:	05038093          	addi	ra,t2,80
ee00826a:	0818                	addi	a4,sp,16
ee00826c:	00e08bb3          	add	s7,ra,a4
ee008270:	ff8bd603          	lhu	a2,-8(s7)
                        if ((results[i].execs & ID_MATRIX) &&
ee008274:	03660063          	beq	a2,s6,ee008294 <__perf_end+0x142>
                                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
ee008278:	f0040837          	lui	a6,0xf0040
ee00827c:	86d2                	mv	a3,s4
ee00827e:	85ea                	mv	a1,s10
ee008280:	21080513          	addi	a0,a6,528 # f0040210 <STACK+0xffffe480>
ee008284:	85df80ef          	jal	ra,ee000ae0 <whisperPrintf>
                                results[i].err++;
ee008288:	ffcbd883          	lhu	a7,-4(s7)
ee00828c:	00188793          	addi	a5,a7,1
ee008290:	fefb9e23          	sh	a5,-4(s7)
                                (results[i].crcstate!=state_known_crc[known_id])) {
ee008294:	9cea                	add	s9,s9,s10
ee008296:	002c9513          	slli	a0,s9,0x2
                        if ((results[i].execs & ID_STATE) &&
ee00829a:	004df593          	andi	a1,s11,4
                                (results[i].crcstate!=state_known_crc[known_id])) {
ee00829e:	05050e13          	addi	t3,a0,80
ee0082a2:	01010e93          	addi	t4,sp,16
                        if ((results[i].execs & ID_STATE) &&
ee0082a6:	d1a1                	beqz	a1,ee0081e6 <__perf_end+0x94>
                                (results[i].crcstate!=state_known_crc[known_id])) {
ee0082a8:	01de0db3          	add	s11,t3,t4
ee0082ac:	ffadd603          	lhu	a2,-6(s11)
                        if ((results[i].execs & ID_STATE) &&
ee0082b0:	54961363          	bne	a2,s1,ee0087f6 <__perf_end+0x6a4>
                        total_errors+=results[i].err;
ee0082b4:	ffcdd283          	lhu	t0,-4(s11)
ee0082b8:	bf1d                	j	ee0081ee <__perf_end+0x9c>
                results[i].size=results[i].size/num_algorithms;
ee0082ba:	001e0793          	addi	a5,t3,1
ee0082be:	7d000613          	li	a2,2000
ee0082c2:	02f65433          	divu	s0,a2,a5
ee0082c6:	da22                	sw	s0,52(sp)
                if ((1<<(ee_u32)i) & results[0].execs) {
ee0082c8:	4e0c1463          	bnez	s8,ee0087b0 <__perf_end+0x65e>
ee0082cc:	360b9ce3          	bnez	s7,ee008e44 <__perf_end+0xcf2>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
ee0082d0:	028e0b33          	mul	s6,t3,s0
ee0082d4:	95da                	add	a1,a1,s6
ee0082d6:	d82e                	sw	a1,48(sp)
        for (i=0; i<NUM_ALGORITHMS; i++) {
ee0082d8:	4a0b9c63          	bnez	s7,ee008790 <__perf_end+0x63e>
ee0082dc:	000d8963          	beqz	s11,ee0082ee <__perf_end+0x19c>
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
ee0082e0:	01c11603          	lh	a2,28(sp)
ee0082e4:	55a2                	lw	a1,40(sp)
ee0082e6:	8522                	mv	a0,s0
ee0082e8:	9b5f80ef          	jal	ra,ee000c9c <core_list_init>
ee0082ec:	c0aa                	sw	a0,64(sp)
                        core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
ee0082ee:	5642                	lw	a2,48(sp)
ee0082f0:	01c11583          	lh	a1,28(sp)
ee0082f4:	8522                	mv	a0,s0
ee0082f6:	bbefc0ef          	jal	ra,ee0046b4 <core_init_state>
        if (results[0].iterations==0) {
ee0082fa:	e40490e3          	bnez	s1,ee00813a <main+0xb0>
                   crc |= 0x8000;
ee0082fe:	7f69                	lui	t5,0xffffa
ee008300:	4905                	li	s2,1
ee008302:	f0041a37          	lui	s4,0xf0041
ee008306:	f0041ab7          	lui	s5,0xf0041
ee00830a:	0864                	addi	s1,sp,28
ee00830c:	001f0b93          	addi	s7,t5,1 # ffffa001 <STACK+0xffb8271>
                while (secs_passed < (secs_ret)1) {
ee008310:	3e700b13          	li	s6,999
                        results[0].iterations*=10;
ee008314:	00291f93          	slli	t6,s2,0x2
ee008318:	012f87b3          	add	a5,t6,s2
ee00831c:	00179913          	slli	s2,a5,0x1
ee008320:	dc4a                	sw	s2,56(sp)
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
ee008322:	b00029f3          	csrr	s3,mcycle
        start_time_val = mcyclel;
ee008326:	d73a2e23          	sw	s3,-644(s4) # f0040d7c <STACK+0xffffefec>
        res->crc=0;
ee00832a:	ca82                	sw	zero,84(sp)
ee00832c:	cc82                	sw	zero,88(sp)
        for (i=0; i<iterations; i++) {
ee00832e:	4401                	li	s0,0
ee008330:	40090c63          	beqz	s2,ee008748 <__perf_end+0x5f6>
                crc=core_bench_list(res,1);
ee008334:	4585                	li	a1,1
ee008336:	8526                	mv	a0,s1
ee008338:	cc6fe0ef          	jal	ra,ee0067fe <core_bench_list>
                res->crc=crcu16(crc,res->crc);
ee00833c:	05415683          	lhu	a3,84(sp)
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee008340:	0ff57293          	zext.b	t0,a0
                data >>= 1;
ee008344:	0012d313          	srli	t1,t0,0x1
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008348:	00d2c633          	xor	a2,t0,a3
                if (x16 == 1)
ee00834c:	00167713          	andi	a4,a2,1
                crc >>= 1;
ee008350:	0016d813          	srli	a6,a3,0x1
                if (x16 == 1)
ee008354:	c719                	beqz	a4,ee008362 <__perf_end+0x210>
                   crc |= 0x8000;
ee008356:	017840b3          	xor	ra,a6,s7
ee00835a:	01009393          	slli	t2,ra,0x10
ee00835e:	0103d813          	srli	a6,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008362:	010348b3          	xor	a7,t1,a6
                if (x16 == 1)
ee008366:	0018f593          	andi	a1,a7,1
                data >>= 1;
ee00836a:	0022dc13          	srli	s8,t0,0x2
                if (x16 == 1)
ee00836e:	00185d93          	srli	s11,a6,0x1
ee008372:	c599                	beqz	a1,ee008380 <__perf_end+0x22e>
                   crc |= 0x8000;
ee008374:	017dccb3          	xor	s9,s11,s7
ee008378:	010c9d13          	slli	s10,s9,0x10
ee00837c:	010d5d93          	srli	s11,s10,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008380:	01bc4e33          	xor	t3,s8,s11
                if (x16 == 1)
ee008384:	001e7e93          	andi	t4,t3,1
                data >>= 1;
ee008388:	0032df13          	srli	t5,t0,0x3
                if (x16 == 1)
ee00838c:	001dd713          	srli	a4,s11,0x1
ee008390:	000e8863          	beqz	t4,ee0083a0 <__perf_end+0x24e>
                   crc |= 0x8000;
ee008394:	01774fb3          	xor	t6,a4,s7
ee008398:	010f9693          	slli	a3,t6,0x10
ee00839c:	0106d713          	srli	a4,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0083a0:	00ef4633          	xor	a2,t5,a4
                if (x16 == 1)
ee0083a4:	00167313          	andi	t1,a2,1
                data >>= 1;
ee0083a8:	0042d093          	srli	ra,t0,0x4
                if (x16 == 1)
ee0083ac:	00175813          	srli	a6,a4,0x1
ee0083b0:	00030863          	beqz	t1,ee0083c0 <__perf_end+0x26e>
                   crc |= 0x8000;
ee0083b4:	017847b3          	xor	a5,a6,s7
ee0083b8:	01079393          	slli	t2,a5,0x10
ee0083bc:	0103d813          	srli	a6,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0083c0:	0100c8b3          	xor	a7,ra,a6
                if (x16 == 1)
ee0083c4:	0018f593          	andi	a1,a7,1
                data >>= 1;
ee0083c8:	0052dc13          	srli	s8,t0,0x5
                if (x16 == 1)
ee0083cc:	00185d93          	srli	s11,a6,0x1
ee0083d0:	c599                	beqz	a1,ee0083de <__perf_end+0x28c>
                   crc |= 0x8000;
ee0083d2:	017dccb3          	xor	s9,s11,s7
ee0083d6:	010c9d13          	slli	s10,s9,0x10
ee0083da:	010d5d93          	srli	s11,s10,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0083de:	01bc4e33          	xor	t3,s8,s11
                if (x16 == 1)
ee0083e2:	001e7e93          	andi	t4,t3,1
                data >>= 1;
ee0083e6:	0062df13          	srli	t5,t0,0x6
                if (x16 == 1)
ee0083ea:	001dd613          	srli	a2,s11,0x1
ee0083ee:	000e8863          	beqz	t4,ee0083fe <__perf_end+0x2ac>
                   crc |= 0x8000;
ee0083f2:	01764fb3          	xor	t6,a2,s7
ee0083f6:	010f9693          	slli	a3,t6,0x10
ee0083fa:	0106d613          	srli	a2,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0083fe:	00cf4733          	xor	a4,t5,a2
                if (x16 == 1)
ee008402:	00177313          	andi	t1,a4,1
                data >>= 1;
ee008406:	0072d293          	srli	t0,t0,0x7
                if (x16 == 1)
ee00840a:	00165393          	srli	t2,a2,0x1
ee00840e:	00030863          	beqz	t1,ee00841e <__perf_end+0x2cc>
                   crc |= 0x8000;
ee008412:	0173c0b3          	xor	ra,t2,s7
ee008416:	01009793          	slli	a5,ra,0x10
ee00841a:	0107d393          	srli	t2,a5,0x10
                if (x16 == 1)
ee00841e:	0013f813          	andi	a6,t2,1
ee008422:	0013dc13          	srli	s8,t2,0x1
ee008426:	00580863          	beq	a6,t0,ee008436 <__perf_end+0x2e4>
                   crc |= 0x8000;
ee00842a:	017c48b3          	xor	a7,s8,s7
ee00842e:	01089593          	slli	a1,a7,0x10
ee008432:	0105dc13          	srli	s8,a1,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee008436:	8121                	srli	a0,a0,0x8
ee008438:	0ff57c93          	zext.b	s9,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00843c:	018ccd33          	xor	s10,s9,s8
                if (x16 == 1)
ee008440:	001d7d93          	andi	s11,s10,1
                data >>= 1;
ee008444:	001cde13          	srli	t3,s9,0x1
                if (x16 == 1)
ee008448:	001c5f93          	srli	t6,s8,0x1
ee00844c:	000d8863          	beqz	s11,ee00845c <__perf_end+0x30a>
                   crc |= 0x8000;
ee008450:	017fceb3          	xor	t4,t6,s7
ee008454:	010e9f13          	slli	t5,t4,0x10
ee008458:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00845c:	01fe46b3          	xor	a3,t3,t6
                if (x16 == 1)
ee008460:	0016f613          	andi	a2,a3,1
                data >>= 1;
ee008464:	002cd713          	srli	a4,s9,0x2
                if (x16 == 1)
ee008468:	001fd093          	srli	ra,t6,0x1
ee00846c:	c619                	beqz	a2,ee00847a <__perf_end+0x328>
                   crc |= 0x8000;
ee00846e:	0170c333          	xor	t1,ra,s7
ee008472:	01031293          	slli	t0,t1,0x10
ee008476:	0102d093          	srli	ra,t0,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00847a:	001747b3          	xor	a5,a4,ra
                if (x16 == 1)
ee00847e:	0017f393          	andi	t2,a5,1
                data >>= 1;
ee008482:	003cd813          	srli	a6,s9,0x3
                if (x16 == 1)
ee008486:	0010dc13          	srli	s8,ra,0x1
ee00848a:	00038863          	beqz	t2,ee00849a <__perf_end+0x348>
                   crc |= 0x8000;
ee00848e:	017c48b3          	xor	a7,s8,s7
ee008492:	01089593          	slli	a1,a7,0x10
ee008496:	0105dc13          	srli	s8,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee00849a:	01884533          	xor	a0,a6,s8
                if (x16 == 1)
ee00849e:	00157d13          	andi	s10,a0,1
                data >>= 1;
ee0084a2:	004cdd93          	srli	s11,s9,0x4
                if (x16 == 1)
ee0084a6:	001c5f13          	srli	t5,s8,0x1
ee0084aa:	000d0863          	beqz	s10,ee0084ba <__perf_end+0x368>
                   crc |= 0x8000;
ee0084ae:	017f4e33          	xor	t3,t5,s7
ee0084b2:	010e1e93          	slli	t4,t3,0x10
ee0084b6:	010edf13          	srli	t5,t4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0084ba:	01edcfb3          	xor	t6,s11,t5
                if (x16 == 1)
ee0084be:	001ff613          	andi	a2,t6,1
                data >>= 1;
ee0084c2:	005cd693          	srli	a3,s9,0x5
                if (x16 == 1)
ee0084c6:	001f5293          	srli	t0,t5,0x1
ee0084ca:	c619                	beqz	a2,ee0084d8 <__perf_end+0x386>
                   crc |= 0x8000;
ee0084cc:	0172c733          	xor	a4,t0,s7
ee0084d0:	01071313          	slli	t1,a4,0x10
ee0084d4:	01035293          	srli	t0,t1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0084d8:	0056c0b3          	xor	ra,a3,t0
                if (x16 == 1)
ee0084dc:	0010f393          	andi	t2,ra,1
                data >>= 1;
ee0084e0:	006cd813          	srli	a6,s9,0x6
                if (x16 == 1)
ee0084e4:	0012d593          	srli	a1,t0,0x1
ee0084e8:	00038863          	beqz	t2,ee0084f8 <__perf_end+0x3a6>
                   crc |= 0x8000;
ee0084ec:	0175c7b3          	xor	a5,a1,s7
ee0084f0:	01079893          	slli	a7,a5,0x10
ee0084f4:	0108d593          	srli	a1,a7,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0084f8:	00b84c33          	xor	s8,a6,a1
                if (x16 == 1)
ee0084fc:	001c7d13          	andi	s10,s8,1
                data >>= 1;
ee008500:	007cdc93          	srli	s9,s9,0x7
                if (x16 == 1)
ee008504:	0015de13          	srli	t3,a1,0x1
ee008508:	000d0863          	beqz	s10,ee008518 <__perf_end+0x3c6>
                   crc |= 0x8000;
ee00850c:	017e4533          	xor	a0,t3,s7
ee008510:	01051d93          	slli	s11,a0,0x10
ee008514:	010dde13          	srli	t3,s11,0x10
                if (x16 == 1)
ee008518:	001e7e93          	andi	t4,t3,1
ee00851c:	001e5613          	srli	a2,t3,0x1
ee008520:	019e8863          	beq	t4,s9,ee008530 <__perf_end+0x3de>
                   crc |= 0x8000;
ee008524:	01764f33          	xor	t5,a2,s7
ee008528:	010f1f93          	slli	t6,t5,0x10
ee00852c:	010fd613          	srli	a2,t6,0x10
                crc=core_bench_list(res,-1);
ee008530:	55fd                	li	a1,-1
ee008532:	8526                	mv	a0,s1
                res->crc=crcu16(crc,res->crc);
ee008534:	04c11a23          	sh	a2,84(sp)
                crc=core_bench_list(res,-1);
ee008538:	ac6fe0ef          	jal	ra,ee0067fe <core_bench_list>
                res->crc=crcu16(crc,res->crc);
ee00853c:	05415683          	lhu	a3,84(sp)
        crc=crcu8( (ee_u8) (newval)                             ,crc);
ee008540:	0ff57713          	zext.b	a4,a0
                data >>= 1;
ee008544:	00175393          	srli	t2,a4,0x1
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008548:	00d74333          	xor	t1,a4,a3
                if (x16 == 1)
ee00854c:	00137293          	andi	t0,t1,1
                crc >>= 1;
ee008550:	0016d893          	srli	a7,a3,0x1
                if (x16 == 1)
ee008554:	00028863          	beqz	t0,ee008564 <__perf_end+0x412>
                   crc |= 0x8000;
ee008558:	0178c0b3          	xor	ra,a7,s7
ee00855c:	01009813          	slli	a6,ra,0x10
ee008560:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008564:	0113c5b3          	xor	a1,t2,a7
                if (x16 == 1)
ee008568:	0015fc13          	andi	s8,a1,1
                data >>= 1;
ee00856c:	00275d13          	srli	s10,a4,0x2
                if (x16 == 1)
ee008570:	0018de13          	srli	t3,a7,0x1
ee008574:	000c0863          	beqz	s8,ee008584 <__perf_end+0x432>
                   crc |= 0x8000;
ee008578:	017e4cb3          	xor	s9,t3,s7
ee00857c:	010c9d93          	slli	s11,s9,0x10
ee008580:	010dde13          	srli	t3,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008584:	01cd4eb3          	xor	t4,s10,t3
                if (x16 == 1)
ee008588:	001eff13          	andi	t5,t4,1
                data >>= 1;
ee00858c:	00375f93          	srli	t6,a4,0x3
                if (x16 == 1)
ee008590:	001e5313          	srli	t1,t3,0x1
ee008594:	000f0863          	beqz	t5,ee0085a4 <__perf_end+0x452>
                   crc |= 0x8000;
ee008598:	01734633          	xor	a2,t1,s7
ee00859c:	01061693          	slli	a3,a2,0x10
ee0085a0:	0106d313          	srli	t1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0085a4:	006fc2b3          	xor	t0,t6,t1
                if (x16 == 1)
ee0085a8:	0012f393          	andi	t2,t0,1
                data >>= 1;
ee0085ac:	00475093          	srli	ra,a4,0x4
                if (x16 == 1)
ee0085b0:	00135893          	srli	a7,t1,0x1
ee0085b4:	00038863          	beqz	t2,ee0085c4 <__perf_end+0x472>
                   crc |= 0x8000;
ee0085b8:	0178c7b3          	xor	a5,a7,s7
ee0085bc:	01079813          	slli	a6,a5,0x10
ee0085c0:	01085893          	srli	a7,a6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0085c4:	0110c5b3          	xor	a1,ra,a7
                if (x16 == 1)
ee0085c8:	0015fc13          	andi	s8,a1,1
                data >>= 1;
ee0085cc:	00575d13          	srli	s10,a4,0x5
                if (x16 == 1)
ee0085d0:	0018de13          	srli	t3,a7,0x1
ee0085d4:	000c0863          	beqz	s8,ee0085e4 <__perf_end+0x492>
                   crc |= 0x8000;
ee0085d8:	017e4cb3          	xor	s9,t3,s7
ee0085dc:	010c9d93          	slli	s11,s9,0x10
ee0085e0:	010dde13          	srli	t3,s11,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0085e4:	01cd4eb3          	xor	t4,s10,t3
                if (x16 == 1)
ee0085e8:	001eff13          	andi	t5,t4,1
                data >>= 1;
ee0085ec:	00675f93          	srli	t6,a4,0x6
                if (x16 == 1)
ee0085f0:	001e5313          	srli	t1,t3,0x1
ee0085f4:	000f0863          	beqz	t5,ee008604 <__perf_end+0x4b2>
                   crc |= 0x8000;
ee0085f8:	01734633          	xor	a2,t1,s7
ee0085fc:	01061693          	slli	a3,a2,0x10
ee008600:	0106d313          	srli	t1,a3,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008604:	006fc2b3          	xor	t0,t6,t1
                if (x16 == 1)
ee008608:	0012f393          	andi	t2,t0,1
                data >>= 1;
ee00860c:	831d                	srli	a4,a4,0x7
                if (x16 == 1)
ee00860e:	00135813          	srli	a6,t1,0x1
ee008612:	00038863          	beqz	t2,ee008622 <__perf_end+0x4d0>
                   crc |= 0x8000;
ee008616:	017840b3          	xor	ra,a6,s7
ee00861a:	01009793          	slli	a5,ra,0x10
ee00861e:	0107d813          	srli	a6,a5,0x10
                if (x16 == 1)
ee008622:	00187893          	andi	a7,a6,1
ee008626:	00185d13          	srli	s10,a6,0x1
ee00862a:	00e88863          	beq	a7,a4,ee00863a <__perf_end+0x4e8>
                   crc |= 0x8000;
ee00862e:	017d45b3          	xor	a1,s10,s7
ee008632:	01059c13          	slli	s8,a1,0x10
ee008636:	010c5d13          	srli	s10,s8,0x10
        crc=crcu8( (ee_u8) ((newval)>>8)        ,crc);
ee00863a:	8121                	srli	a0,a0,0x8
ee00863c:	0ff57c93          	zext.b	s9,a0
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008640:	01accdb3          	xor	s11,s9,s10
                if (x16 == 1)
ee008644:	001dfe13          	andi	t3,s11,1
                data >>= 1;
ee008648:	001cde93          	srli	t4,s9,0x1
                if (x16 == 1)
ee00864c:	001d5613          	srli	a2,s10,0x1
ee008650:	000e0863          	beqz	t3,ee008660 <__perf_end+0x50e>
                   crc |= 0x8000;
ee008654:	01764f33          	xor	t5,a2,s7
ee008658:	010f1f93          	slli	t6,t5,0x10
ee00865c:	010fd613          	srli	a2,t6,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008660:	00cec6b3          	xor	a3,t4,a2
                if (x16 == 1)
ee008664:	0016f313          	andi	t1,a3,1
                data >>= 1;
ee008668:	002cd293          	srli	t0,s9,0x2
                if (x16 == 1)
ee00866c:	00165093          	srli	ra,a2,0x1
ee008670:	00030863          	beqz	t1,ee008680 <__perf_end+0x52e>
                   crc |= 0x8000;
ee008674:	0170c3b3          	xor	t2,ra,s7
ee008678:	01039713          	slli	a4,t2,0x10
ee00867c:	01075093          	srli	ra,a4,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008680:	0012c7b3          	xor	a5,t0,ra
                if (x16 == 1)
ee008684:	0017f813          	andi	a6,a5,1
                data >>= 1;
ee008688:	003cd893          	srli	a7,s9,0x3
                if (x16 == 1)
ee00868c:	0010dd13          	srli	s10,ra,0x1
ee008690:	00080863          	beqz	a6,ee0086a0 <__perf_end+0x54e>
                   crc |= 0x8000;
ee008694:	017d45b3          	xor	a1,s10,s7
ee008698:	01059c13          	slli	s8,a1,0x10
ee00869c:	010c5d13          	srli	s10,s8,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0086a0:	01a8c533          	xor	a0,a7,s10
                if (x16 == 1)
ee0086a4:	00157d93          	andi	s11,a0,1
                data >>= 1;
ee0086a8:	004cde13          	srli	t3,s9,0x4
                if (x16 == 1)
ee0086ac:	001d5f93          	srli	t6,s10,0x1
ee0086b0:	000d8863          	beqz	s11,ee0086c0 <__perf_end+0x56e>
                   crc |= 0x8000;
ee0086b4:	017fceb3          	xor	t4,t6,s7
ee0086b8:	010e9f13          	slli	t5,t4,0x10
ee0086bc:	010f5f93          	srli	t6,t5,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0086c0:	01fe4633          	xor	a2,t3,t6
                if (x16 == 1)
ee0086c4:	00167313          	andi	t1,a2,1
                data >>= 1;
ee0086c8:	005cd693          	srli	a3,s9,0x5
                if (x16 == 1)
ee0086cc:	001fd093          	srli	ra,t6,0x1
ee0086d0:	00030863          	beqz	t1,ee0086e0 <__perf_end+0x58e>
                   crc |= 0x8000;
ee0086d4:	0170c2b3          	xor	t0,ra,s7
ee0086d8:	01029393          	slli	t2,t0,0x10
ee0086dc:	0103d093          	srli	ra,t2,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee0086e0:	0016c733          	xor	a4,a3,ra
                if (x16 == 1)
ee0086e4:	00177813          	andi	a6,a4,1
                data >>= 1;
ee0086e8:	006cd893          	srli	a7,s9,0x6
                if (x16 == 1)
ee0086ec:	0010dc13          	srli	s8,ra,0x1
ee0086f0:	00080863          	beqz	a6,ee008700 <__perf_end+0x5ae>
                   crc |= 0x8000;
ee0086f4:	017c47b3          	xor	a5,s8,s7
ee0086f8:	01079593          	slli	a1,a5,0x10
ee0086fc:	0105dc13          	srli	s8,a1,0x10
                x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
ee008700:	0188cd33          	xor	s10,a7,s8
                if (x16 == 1)
ee008704:	001d7d93          	andi	s11,s10,1
                data >>= 1;
ee008708:	007cdc93          	srli	s9,s9,0x7
                if (x16 == 1)
ee00870c:	001c5e93          	srli	t4,s8,0x1
ee008710:	000d8863          	beqz	s11,ee008720 <__perf_end+0x5ce>
                   crc |= 0x8000;
ee008714:	017ec533          	xor	a0,t4,s7
ee008718:	01051e13          	slli	t3,a0,0x10
ee00871c:	010e5e93          	srli	t4,t3,0x10
                if (x16 == 1)
ee008720:	001eff13          	andi	t5,t4,1
ee008724:	001ed313          	srli	t1,t4,0x1
ee008728:	019f0863          	beq	t5,s9,ee008738 <__perf_end+0x5e6>
                   crc |= 0x8000;
ee00872c:	01734fb3          	xor	t6,t1,s7
ee008730:	010f9613          	slli	a2,t6,0x10
ee008734:	01065313          	srli	t1,a2,0x10
                res->crc=crcu16(crc,res->crc);
ee008738:	04611a23          	sh	t1,84(sp)
                if (i==0) res->crclist=res->crc;
ee00873c:	60040d63          	beqz	s0,ee008d56 <__perf_end+0xc04>
        for (i=0; i<iterations; i++) {
ee008740:	0405                	addi	s0,s0,1
ee008742:	be8919e3          	bne	s2,s0,ee008334 <__perf_end+0x1e2>
ee008746:	5962                	lw	s2,56(sp)
        asm volatile ("csrr %0,mcycle"  : "=r" (mcyclel) );
ee008748:	b00026f3          	csrr	a3,mcycle
        stop_time_val = mcyclel;
ee00874c:	d6daac23          	sw	a3,-648(s5) # f0040d78 <STACK+0xffffefe8>
        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
ee008750:	413689b3          	sub	s3,a3,s3
                while (secs_passed < (secs_ret)1) {
ee008754:	bd3b70e3          	bgeu	s6,s3,ee008314 <__perf_end+0x1c2>
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
ee008758:	3e800b93          	li	s7,1000
ee00875c:	0379db33          	divu	s6,s3,s7
                results[0].iterations*=1+10/divisor;
ee008760:	42a9                	li	t0,10
ee008762:	0362d3b3          	divu	t2,t0,s6
ee008766:	00138093          	addi	ra,t2,1
ee00876a:	02190733          	mul	a4,s2,ra
ee00876e:	dc3a                	sw	a4,56(sp)
ee008770:	bad1                	j	ee008144 <main+0xba>
        if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
ee008772:	4905                	li	s2,1
ee008774:	992894e3          	bne	a7,s2,ee0080fc <main+0x72>
ee008778:	980512e3          	bnez	a0,ee0080fc <main+0x72>
                results[0].seed1=0x3415;
ee00877c:	341539b7          	lui	s3,0x34153
ee008780:	41598a13          	addi	s4,s3,1045 # 34153415 <_start-0x4beacbeb>
ee008784:	ce52                	sw	s4,28(sp)
                results[0].seed3=0x66;
ee008786:	06600a93          	li	s5,102
ee00878a:	03511023          	sh	s5,32(sp)
ee00878e:	b2bd                	j	ee0080fc <main+0x72>
ee008790:	020d9e63          	bnez	s11,ee0087cc <__perf_end+0x67a>
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
ee008794:	01e11d83          	lh	s11,30(sp)
ee008798:	01c11e03          	lh	t3,28(sp)
ee00879c:	55b2                	lw	a1,44(sp)
ee00879e:	010d9e93          	slli	t4,s11,0x10
ee0087a2:	00d4                	addi	a3,sp,68
ee0087a4:	01cee633          	or	a2,t4,t3
ee0087a8:	8522                	mv	a0,s0
ee0087aa:	f5ffa0ef          	jal	ra,ee003708 <core_init_matrix>
                if (results[i].execs & ID_STATE) {
ee0087ae:	b681                	j	ee0082ee <__perf_end+0x19c>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
ee0087b0:	d42e                	sw	a1,40(sp)
                if ((1<<(ee_u32)i) & results[0].execs) {
ee0087b2:	5e0b9563          	bnez	s7,ee008d9c <__perf_end+0xc4a>
ee0087b6:	680d1e63          	bnez	s10,ee008e52 <__perf_end+0xd00>
ee0087ba:	960d8ee3          	beqz	s11,ee008136 <main+0xac>
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
ee0087be:	01c11603          	lh	a2,28(sp)
ee0087c2:	8522                	mv	a0,s0
ee0087c4:	cd8f80ef          	jal	ra,ee000c9c <core_list_init>
ee0087c8:	c0aa                	sw	a0,64(sp)
        for (i=0 ; i<MULTITHREAD; i++) {
ee0087ca:	b2b5                	j	ee008136 <main+0xac>
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
ee0087cc:	01c11b83          	lh	s7,28(sp)
ee0087d0:	55a2                	lw	a1,40(sp)
ee0087d2:	8522                	mv	a0,s0
ee0087d4:	865e                	mv	a2,s7
ee0087d6:	cc6f80ef          	jal	ra,ee000c9c <core_list_init>
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
ee0087da:	01e11c83          	lh	s9,30(sp)
ee0087de:	55b2                	lw	a1,44(sp)
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
ee0087e0:	8c2a                	mv	s8,a0
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
ee0087e2:	010c9d13          	slli	s10,s9,0x10
ee0087e6:	00d4                	addi	a3,sp,68
ee0087e8:	017d6633          	or	a2,s10,s7
ee0087ec:	8522                	mv	a0,s0
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
ee0087ee:	c0e2                	sw	s8,64(sp)
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
ee0087f0:	f19fa0ef          	jal	ra,ee003708 <core_init_matrix>
                if (results[i].execs & ID_STATE) {
ee0087f4:	bced                	j	ee0082ee <__perf_end+0x19c>
                                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
ee0087f6:	f0040fb7          	lui	t6,0xf0040
ee0087fa:	86a6                	mv	a3,s1
ee0087fc:	85ea                	mv	a1,s10
ee0087fe:	244f8513          	addi	a0,t6,580 # f0040244 <STACK+0xffffe4b4>
ee008802:	adef80ef          	jal	ra,ee000ae0 <whisperPrintf>
                                results[i].err++;
ee008806:	ffcdd303          	lhu	t1,-4(s11)
ee00880a:	00130613          	addi	a2,t1,1
ee00880e:	01061693          	slli	a3,a2,0x10
ee008812:	0106d293          	srli	t0,a3,0x10
ee008816:	fe5d9e23          	sh	t0,-4(s11)
ee00881a:	bad1                	j	ee0081ee <__perf_end+0x9c>
                for (i=0 ; i<default_num_contexts; i++) {
ee00881c:	4c81                	li	s9,0
ee00881e:	4401                	li	s0,0
        ee_printf("CoreMark Size    : %u\n",(ee_u32)results[0].size);
ee008820:	45b2                	lw	a1,12(sp)
ee008822:	f0040a37          	lui	s4,0xf0040
ee008826:	274a0513          	addi	a0,s4,628 # f0040274 <STACK+0xffffe4e4>
ee00882a:	ab6f80ef          	jal	ra,ee000ae0 <whisperPrintf>
        ee_printf("Total ticks      : %u\n",(ee_u32)total_time);
ee00882e:	f0040b37          	lui	s6,0xf0040
ee008832:	85d6                	mv	a1,s5
ee008834:	28cb0513          	addi	a0,s6,652 # f004028c <STACK+0xffffe4fc>
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
ee008838:	3e800d93          	li	s11,1000
        ee_printf("Total ticks      : %u\n",(ee_u32)total_time);
ee00883c:	aa4f80ef          	jal	ra,ee000ae0 <whisperPrintf>
        secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
ee008840:	03badd33          	divu	s10,s5,s11
        ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
ee008844:	f0040937          	lui	s2,0xf0040
ee008848:	2a490513          	addi	a0,s2,676 # f00402a4 <STACK+0xffffe514>
ee00884c:	85ea                	mv	a1,s10
ee00884e:	a92f80ef          	jal	ra,ee000ae0 <whisperPrintf>
        if (time_in_secs(total_time) > 0)
ee008852:	3e700813          	li	a6,999
                ee_printf("Iterat/Sec/MHz   : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
ee008856:	5be2                	lw	s7,56(sp)
        if (time_in_secs(total_time) > 0)
ee008858:	05587063          	bgeu	a6,s5,ee008898 <__perf_end+0x746>
                ee_printf("Iterat/Sec/MHz   : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
ee00885c:	0e8c2883          	lw	a7,232(s8)
                             100000*default_num_contexts*results[0].iterations/time_in_secs(total_time) % 100);
ee008860:	6e61                	lui	t3,0x18
ee008862:	6a0e0e93          	addi	t4,t3,1696 # 186a0 <_start-0x7ffe7960>
                ee_printf("Iterat/Sec/MHz   : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
ee008866:	031b85b3          	mul	a1,s7,a7
ee00886a:	06400613          	li	a2,100
ee00886e:	f00407b7          	lui	a5,0xf0040
ee008872:	2fc78513          	addi	a0,a5,764 # f00402fc <STACK+0xffffe56c>
                             100000*default_num_contexts*results[0].iterations/time_in_secs(total_time) % 100);
ee008876:	03d58f33          	mul	t5,a1,t4
ee00887a:	03af5fb3          	divu	t6,t5,s10
                ee_printf("Iterat/Sec/MHz   : %d.%02d\n",1000*default_num_contexts*results[0].iterations/time_in_secs(total_time),
ee00887e:	03b58333          	mul	t1,a1,s11
ee008882:	02cff633          	remu	a2,t6,a2
ee008886:	03a355b3          	divu	a1,t1,s10
ee00888a:	a56f80ef          	jal	ra,ee000ae0 <whisperPrintf>
        if (time_in_secs(total_time) < 10) {
ee00888e:	6509                	lui	a0,0x2
ee008890:	70f50693          	addi	a3,a0,1807 # 270f <_start-0x7fffd8f1>
ee008894:	0156ed63          	bltu	a3,s5,ee0088ae <__perf_end+0x75c>
                ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
ee008898:	f0040ab7          	lui	s5,0xf0040
ee00889c:	2bca8513          	addi	a0,s5,700 # f00402bc <STACK+0xffffe52c>
ee0088a0:	a40f80ef          	jal	ra,ee000ae0 <whisperPrintf>
                total_errors++;
ee0088a4:	0c85                	addi	s9,s9,1
ee0088a6:	010c9293          	slli	t0,s9,0x10
ee0088aa:	4102d413          	srai	s0,t0,0x10
        ee_printf("Iterations       : %u\n",(ee_u32)default_num_contexts*results[0].iterations);
ee0088ae:	0e8c2383          	lw	t2,232(s8)
ee0088b2:	f00400b7          	lui	ra,0xf0040
ee0088b6:	31808513          	addi	a0,ra,792 # f0040318 <STACK+0xffffe588>
ee0088ba:	027b85b3          	mul	a1,s7,t2
        ee_printf("Compiler version : %s\n",COMPILER_VERSION);
ee0088be:	f00404b7          	lui	s1,0xf0040
        ee_printf("Compiler flags   : %s\n",COMPILER_FLAGS);
ee0088c2:	f0040a37          	lui	s4,0xf0040
ee0088c6:	f0040b37          	lui	s6,0xf0040
        ee_printf("Memory location  : %s\n",MEM_LOCATION);
ee0088ca:	f0040db7          	lui	s11,0xf0040
ee0088ce:	f0040d37          	lui	s10,0xf0040
        ee_printf("Iterations       : %u\n",(ee_u32)default_num_contexts*results[0].iterations);
ee0088d2:	a0ef80ef          	jal	ra,ee000ae0 <whisperPrintf>
        ee_printf("Compiler version : %s\n",COMPILER_VERSION);
ee0088d6:	f0040737          	lui	a4,0xf0040
ee0088da:	33070593          	addi	a1,a4,816 # f0040330 <STACK+0xffffe5a0>
ee0088de:	33c48513          	addi	a0,s1,828 # f004033c <STACK+0xffffe5ac>
ee0088e2:	9fef80ef          	jal	ra,ee000ae0 <whisperPrintf>
        ee_printf("Compiler flags   : %s\n",COMPILER_FLAGS);
ee0088e6:	354a0593          	addi	a1,s4,852 # f0040354 <STACK+0xffffe5c4>
ee0088ea:	358b0513          	addi	a0,s6,856 # f0040358 <STACK+0xffffe5c8>
ee0088ee:	9f2f80ef          	jal	ra,ee000ae0 <whisperPrintf>
        ee_printf("Memory location  : %s\n",MEM_LOCATION);
ee0088f2:	370d8593          	addi	a1,s11,880 # f0040370 <STACK+0xffffe5e0>
ee0088f6:	378d0513          	addi	a0,s10,888 # f0040378 <STACK+0xffffe5e8>
ee0088fa:	9e6f80ef          	jal	ra,ee000ae0 <whisperPrintf>
        ee_printf("seedcrc          : 0x%04x\n",seedcrc);
ee0088fe:	85ce                	mv	a1,s3
ee008900:	f00409b7          	lui	s3,0xf0040
ee008904:	39098513          	addi	a0,s3,912 # f0040390 <STACK+0xffffe600>
ee008908:	9d8f80ef          	jal	ra,ee000ae0 <whisperPrintf>
        if (results[0].execs & ID_LIST)
ee00890c:	5972                	lw	s2,60(sp)
ee00890e:	00197813          	andi	a6,s2,1
ee008912:	0e080b63          	beqz	a6,ee008a08 <__perf_end+0x8b6>
                for (i=0 ; i<default_num_contexts; i++)
ee008916:	0e8c2b83          	lw	s7,232(s8)
ee00891a:	0e0b8763          	beqz	s7,ee008a08 <__perf_end+0x8b6>
ee00891e:	4b01                	li	s6,0
ee008920:	f0040ab7          	lui	s5,0xf0040
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee008924:	004b1893          	slli	a7,s6,0x4
ee008928:	016885b3          	add	a1,a7,s6
ee00892c:	00259793          	slli	a5,a1,0x2
ee008930:	05078e13          	addi	t3,a5,80
ee008934:	01010e93          	addi	t4,sp,16
ee008938:	01de0f33          	add	t5,t3,t4
ee00893c:	ff6f5603          	lhu	a2,-10(t5)
ee008940:	85da                	mv	a1,s6
ee008942:	3aca8513          	addi	a0,s5,940 # f00403ac <STACK+0xffffe61c>
ee008946:	99af80ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee00894a:	001b0313          	addi	t1,s6,1
ee00894e:	01031613          	slli	a2,t1,0x10
ee008952:	01065c93          	srli	s9,a2,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee008956:	004c9693          	slli	a3,s9,0x4
ee00895a:	019682b3          	add	t0,a3,s9
                for (i=0 ; i<default_num_contexts; i++)
ee00895e:	0e8c2f83          	lw	t6,232(s8)
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee008962:	00229393          	slli	t2,t0,0x2
ee008966:	05038713          	addi	a4,t2,80
ee00896a:	0804                	addi	s1,sp,16
ee00896c:	3aca8513          	addi	a0,s5,940
ee008970:	00970a33          	add	s4,a4,s1
ee008974:	85e6                	mv	a1,s9
                for (i=0 ; i<default_num_contexts; i++)
ee008976:	09fcf963          	bgeu	s9,t6,ee008a08 <__perf_end+0x8b6>
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee00897a:	ff6a5603          	lhu	a2,-10(s4)
                for (i=0 ; i<default_num_contexts; i++)
ee00897e:	001c8d93          	addi	s11,s9,1
ee008982:	010d9d13          	slli	s10,s11,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee008986:	95af80ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee00898a:	010d5993          	srli	s3,s10,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee00898e:	00499813          	slli	a6,s3,0x4
ee008992:	01380bb3          	add	s7,a6,s3
                for (i=0 ; i<default_num_contexts; i++)
ee008996:	0e8c2b03          	lw	s6,232(s8)
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee00899a:	002b9893          	slli	a7,s7,0x2
ee00899e:	05088593          	addi	a1,a7,80
ee0089a2:	081c                	addi	a5,sp,16
ee0089a4:	00f58e33          	add	t3,a1,a5
ee0089a8:	3aca8513          	addi	a0,s5,940
ee0089ac:	85ce                	mv	a1,s3
                for (i=0 ; i<default_num_contexts; i++)
ee0089ae:	0569fd63          	bgeu	s3,s6,ee008a08 <__perf_end+0x8b6>
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee0089b2:	ff6e5603          	lhu	a2,-10(t3)
ee0089b6:	92af80ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee0089ba:	00198f13          	addi	t5,s3,1
ee0089be:	010f1f93          	slli	t6,t5,0x10
ee0089c2:	010fdc93          	srli	s9,t6,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee0089c6:	004c9313          	slli	t1,s9,0x4
ee0089ca:	01930633          	add	a2,t1,s9
                for (i=0 ; i<default_num_contexts; i++)
ee0089ce:	0e8c2e83          	lw	t4,232(s8)
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee0089d2:	00261693          	slli	a3,a2,0x2
ee0089d6:	05068293          	addi	t0,a3,80
ee0089da:	01010393          	addi	t2,sp,16
ee0089de:	3aca8513          	addi	a0,s5,940
ee0089e2:	00728733          	add	a4,t0,t2
ee0089e6:	85e6                	mv	a1,s9
                for (i=0 ; i<default_num_contexts; i++)
ee0089e8:	03dcf063          	bgeu	s9,t4,ee008a08 <__perf_end+0x8b6>
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee0089ec:	ff675603          	lhu	a2,-10(a4)
                for (i=0 ; i<default_num_contexts; i++)
ee0089f0:	001c8493          	addi	s1,s9,1
ee0089f4:	01049a13          	slli	s4,s1,0x10
                        ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
ee0089f8:	8e8f80ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee0089fc:	0e8c2503          	lw	a0,232(s8)
ee008a00:	010a5b13          	srli	s6,s4,0x10
ee008a04:	f2ab60e3          	bltu	s6,a0,ee008924 <__perf_end+0x7d2>
        if (results[0].execs & ID_MATRIX)
ee008a08:	00297093          	andi	ra,s2,2
ee008a0c:	0e008c63          	beqz	ra,ee008b04 <__perf_end+0x9b2>
                for (i=0 ; i<default_num_contexts; i++)
ee008a10:	0e8c2a83          	lw	s5,232(s8)
ee008a14:	2c0a8f63          	beqz	s5,ee008cf2 <__perf_end+0xba0>
ee008a18:	4481                	li	s1,0
ee008a1a:	f0040db7          	lui	s11,0xf0040
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
ee008a1e:	00449d13          	slli	s10,s1,0x4
ee008a22:	009d09b3          	add	s3,s10,s1
ee008a26:	00299813          	slli	a6,s3,0x2
ee008a2a:	05080b93          	addi	s7,a6,80
ee008a2e:	01010893          	addi	a7,sp,16
ee008a32:	011b85b3          	add	a1,s7,a7
ee008a36:	ff85d603          	lhu	a2,-8(a1)
ee008a3a:	3c8d8513          	addi	a0,s11,968 # f00403c8 <STACK+0xffffe638>
ee008a3e:	85a6                	mv	a1,s1
ee008a40:	8a0f80ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee008a44:	00148793          	addi	a5,s1,1
ee008a48:	01079e93          	slli	t4,a5,0x10
ee008a4c:	010edc93          	srli	s9,t4,0x10
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
ee008a50:	004c9f13          	slli	t5,s9,0x4
ee008a54:	019f0fb3          	add	t6,t5,s9
                for (i=0 ; i<default_num_contexts; i++)
ee008a58:	0e8c2e03          	lw	t3,232(s8)
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
ee008a5c:	002f9313          	slli	t1,t6,0x2
ee008a60:	05030613          	addi	a2,t1,80
ee008a64:	0814                	addi	a3,sp,16
ee008a66:	3c8d8513          	addi	a0,s11,968
ee008a6a:	00d602b3          	add	t0,a2,a3
ee008a6e:	85e6                	mv	a1,s9
                for (i=0 ; i<default_num_contexts; i++)
ee008a70:	09ccfa63          	bgeu	s9,t3,ee008b04 <__perf_end+0x9b2>
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
ee008a74:	ff82d603          	lhu	a2,-8(t0)
ee008a78:	868f80ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee008a7c:	001c8713          	addi	a4,s9,1
ee008a80:	01071493          	slli	s1,a4,0x10
ee008a84:	0104da13          	srli	s4,s1,0x10
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
ee008a88:	004a1b13          	slli	s6,s4,0x4
ee008a8c:	014b0ab3          	add	s5,s6,s4
                for (i=0 ; i<default_num_contexts; i++)
ee008a90:	0e8c2383          	lw	t2,232(s8)
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
ee008a94:	002a9d13          	slli	s10,s5,0x2
ee008a98:	050d0993          	addi	s3,s10,80
ee008a9c:	01010813          	addi	a6,sp,16
ee008aa0:	3c8d8513          	addi	a0,s11,968
ee008aa4:	01098bb3          	add	s7,s3,a6
ee008aa8:	85d2                	mv	a1,s4
                for (i=0 ; i<default_num_contexts; i++)
ee008aaa:	047a7d63          	bgeu	s4,t2,ee008b04 <__perf_end+0x9b2>
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
ee008aae:	ff8bd603          	lhu	a2,-8(s7)
ee008ab2:	82ef80ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee008ab6:	001a0593          	addi	a1,s4,1
ee008aba:	01059e13          	slli	t3,a1,0x10
ee008abe:	010e5c93          	srli	s9,t3,0x10
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
ee008ac2:	004c9793          	slli	a5,s9,0x4
ee008ac6:	01978eb3          	add	t4,a5,s9
                for (i=0 ; i<default_num_contexts; i++)
ee008aca:	0e8c2883          	lw	a7,232(s8)
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
ee008ace:	002e9f13          	slli	t5,t4,0x2
ee008ad2:	050f0f93          	addi	t6,t5,80
ee008ad6:	01010313          	addi	t1,sp,16
ee008ada:	3c8d8513          	addi	a0,s11,968
ee008ade:	006f8633          	add	a2,t6,t1
ee008ae2:	85e6                	mv	a1,s9
                for (i=0 ; i<default_num_contexts; i++)
ee008ae4:	031cf063          	bgeu	s9,a7,ee008b04 <__perf_end+0x9b2>
                        ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
ee008ae8:	ff865603          	lhu	a2,-8(a2)
ee008aec:	ff5f70ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee008af0:	001c8693          	addi	a3,s9,1
ee008af4:	0e8c2503          	lw	a0,232(s8)
ee008af8:	01069293          	slli	t0,a3,0x10
ee008afc:	0102d493          	srli	s1,t0,0x10
ee008b00:	f0a4efe3          	bltu	s1,a0,ee008a1e <__perf_end+0x8cc>
        if (results[0].execs & ID_STATE)
ee008b04:	00497913          	andi	s2,s2,4
                for (i=0 ; i<default_num_contexts; i++)
ee008b08:	0e8c2083          	lw	ra,232(s8)
        if (results[0].execs & ID_STATE)
ee008b0c:	0e090963          	beqz	s2,ee008bfe <__perf_end+0xaac>
                for (i=0 ; i<default_num_contexts; i++)
ee008b10:	1e008163          	beqz	ra,ee008cf2 <__perf_end+0xba0>
ee008b14:	4481                	li	s1,0
ee008b16:	f0040db7          	lui	s11,0xf0040
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008b1a:	00449393          	slli	t2,s1,0x4
ee008b1e:	00938733          	add	a4,t2,s1
ee008b22:	00271a13          	slli	s4,a4,0x2
ee008b26:	050a0b13          	addi	s6,s4,80
ee008b2a:	01010a93          	addi	s5,sp,16
ee008b2e:	015b0d33          	add	s10,s6,s5
ee008b32:	ffad5603          	lhu	a2,-6(s10)
ee008b36:	85a6                	mv	a1,s1
ee008b38:	3e4d8513          	addi	a0,s11,996 # f00403e4 <STACK+0xffffe654>
ee008b3c:	fa5f70ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee008b40:	00148813          	addi	a6,s1,1
ee008b44:	01081b93          	slli	s7,a6,0x10
ee008b48:	010bdc93          	srli	s9,s7,0x10
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008b4c:	004c9893          	slli	a7,s9,0x4
ee008b50:	019885b3          	add	a1,a7,s9
                for (i=0 ; i<default_num_contexts; i++)
ee008b54:	0e8c2983          	lw	s3,232(s8)
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008b58:	00259e13          	slli	t3,a1,0x2
ee008b5c:	050e0793          	addi	a5,t3,80
ee008b60:	01010e93          	addi	t4,sp,16
ee008b64:	3e4d8513          	addi	a0,s11,996
ee008b68:	01d78f33          	add	t5,a5,t4
ee008b6c:	85e6                	mv	a1,s9
                for (i=0 ; i<default_num_contexts; i++)
ee008b6e:	093cf863          	bgeu	s9,s3,ee008bfe <__perf_end+0xaac>
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008b72:	ffaf5603          	lhu	a2,-6(t5)
ee008b76:	f6bf70ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee008b7a:	001c8313          	addi	t1,s9,1
ee008b7e:	01031613          	slli	a2,t1,0x10
ee008b82:	01065493          	srli	s1,a2,0x10
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008b86:	00449693          	slli	a3,s1,0x4
ee008b8a:	009682b3          	add	t0,a3,s1
                for (i=0 ; i<default_num_contexts; i++)
ee008b8e:	0e8c2f83          	lw	t6,232(s8)
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008b92:	00229913          	slli	s2,t0,0x2
ee008b96:	05090393          	addi	t2,s2,80
ee008b9a:	0818                	addi	a4,sp,16
ee008b9c:	3e4d8513          	addi	a0,s11,996
ee008ba0:	00e38a33          	add	s4,t2,a4
ee008ba4:	85a6                	mv	a1,s1
                for (i=0 ; i<default_num_contexts; i++)
ee008ba6:	05f4fc63          	bgeu	s1,t6,ee008bfe <__perf_end+0xaac>
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008baa:	ffaa5603          	lhu	a2,-6(s4)
                for (i=0 ; i<default_num_contexts; i++)
ee008bae:	00148a93          	addi	s5,s1,1
ee008bb2:	010a9d13          	slli	s10,s5,0x10
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008bb6:	f2bf70ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee008bba:	010d5993          	srli	s3,s10,0x10
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008bbe:	00499813          	slli	a6,s3,0x4
ee008bc2:	01380bb3          	add	s7,a6,s3
                for (i=0 ; i<default_num_contexts; i++)
ee008bc6:	0e8c2b03          	lw	s6,232(s8)
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008bca:	002b9c93          	slli	s9,s7,0x2
ee008bce:	080c                	addi	a1,sp,16
ee008bd0:	050c8893          	addi	a7,s9,80
ee008bd4:	00b88e33          	add	t3,a7,a1
ee008bd8:	3e4d8513          	addi	a0,s11,996
ee008bdc:	85ce                	mv	a1,s3
                for (i=0 ; i<default_num_contexts; i++)
ee008bde:	0369f063          	bgeu	s3,s6,ee008bfe <__perf_end+0xaac>
                        ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
ee008be2:	ffae5603          	lhu	a2,-6(t3)
ee008be6:	efbf70ef          	jal	ra,ee000ae0 <whisperPrintf>
                for (i=0 ; i<default_num_contexts; i++)
ee008bea:	00198793          	addi	a5,s3,1
ee008bee:	0e8c2503          	lw	a0,232(s8)
ee008bf2:	01079e93          	slli	t4,a5,0x10
ee008bf6:	010ed493          	srli	s1,t4,0x10
ee008bfa:	f2a4e0e3          	bltu	s1,a0,ee008b1a <__perf_end+0x9c8>
        for (i=0 ; i<default_num_contexts; i++)
ee008bfe:	0e8c2083          	lw	ra,232(s8)
ee008c02:	4b81                	li	s7,0
ee008c04:	f0040db7          	lui	s11,0xf0040
ee008c08:	0e008563          	beqz	ra,ee008cf2 <__perf_end+0xba0>
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008c0c:	004b9f13          	slli	t5,s7,0x4
ee008c10:	017f0fb3          	add	t6,t5,s7
ee008c14:	002f9313          	slli	t1,t6,0x2
ee008c18:	05030613          	addi	a2,t1,80
ee008c1c:	0814                	addi	a3,sp,16
ee008c1e:	00d602b3          	add	t0,a2,a3
ee008c22:	ff42d603          	lhu	a2,-12(t0)
ee008c26:	85de                	mv	a1,s7
ee008c28:	400d8513          	addi	a0,s11,1024 # f0040400 <STACK+0xffffe670>
ee008c2c:	eb5f70ef          	jal	ra,ee000ae0 <whisperPrintf>
        for (i=0 ; i<default_num_contexts; i++)
ee008c30:	001b8393          	addi	t2,s7,1
ee008c34:	01039713          	slli	a4,t2,0x10
ee008c38:	01075a13          	srli	s4,a4,0x10
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008c3c:	004a1b13          	slli	s6,s4,0x4
ee008c40:	014b0ab3          	add	s5,s6,s4
        for (i=0 ; i<default_num_contexts; i++)
ee008c44:	0e8c2903          	lw	s2,232(s8)
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008c48:	002a9d13          	slli	s10,s5,0x2
ee008c4c:	050d0993          	addi	s3,s10,80
ee008c50:	01010813          	addi	a6,sp,16
ee008c54:	400d8513          	addi	a0,s11,1024
ee008c58:	01098bb3          	add	s7,s3,a6
ee008c5c:	85d2                	mv	a1,s4
        for (i=0 ; i<default_num_contexts; i++)
ee008c5e:	092a7a63          	bgeu	s4,s2,ee008cf2 <__perf_end+0xba0>
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008c62:	ff4bd603          	lhu	a2,-12(s7)
ee008c66:	e7bf70ef          	jal	ra,ee000ae0 <whisperPrintf>
        for (i=0 ; i<default_num_contexts; i++)
ee008c6a:	001a0893          	addi	a7,s4,1
ee008c6e:	01089593          	slli	a1,a7,0x10
ee008c72:	0105d493          	srli	s1,a1,0x10
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008c76:	00449e13          	slli	t3,s1,0x4
ee008c7a:	009e07b3          	add	a5,t3,s1
        for (i=0 ; i<default_num_contexts; i++)
ee008c7e:	0e8c2c83          	lw	s9,232(s8)
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008c82:	00279e93          	slli	t4,a5,0x2
ee008c86:	050e8f13          	addi	t5,t4,80
ee008c8a:	01010f93          	addi	t6,sp,16
ee008c8e:	400d8513          	addi	a0,s11,1024
ee008c92:	01ff0333          	add	t1,t5,t6
ee008c96:	85a6                	mv	a1,s1
        for (i=0 ; i<default_num_contexts; i++)
ee008c98:	0594fd63          	bgeu	s1,s9,ee008cf2 <__perf_end+0xba0>
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008c9c:	ff435603          	lhu	a2,-12(t1)
ee008ca0:	01010a93          	addi	s5,sp,16
ee008ca4:	e3df70ef          	jal	ra,ee000ae0 <whisperPrintf>
        for (i=0 ; i<default_num_contexts; i++)
ee008ca8:	00148693          	addi	a3,s1,1
ee008cac:	01069293          	slli	t0,a3,0x10
ee008cb0:	0102d913          	srli	s2,t0,0x10
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008cb4:	00491393          	slli	t2,s2,0x4
ee008cb8:	01238733          	add	a4,t2,s2
        for (i=0 ; i<default_num_contexts; i++)
ee008cbc:	0e8c2603          	lw	a2,232(s8)
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008cc0:	00271a13          	slli	s4,a4,0x2
ee008cc4:	050a0b13          	addi	s6,s4,80
ee008cc8:	400d8513          	addi	a0,s11,1024
ee008ccc:	015b0d33          	add	s10,s6,s5
ee008cd0:	85ca                	mv	a1,s2
        for (i=0 ; i<default_num_contexts; i++)
ee008cd2:	02c97063          	bgeu	s2,a2,ee008cf2 <__perf_end+0xba0>
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008cd6:	ff4d5603          	lhu	a2,-12(s10)
        for (i=0 ; i<default_num_contexts; i++)
ee008cda:	00190993          	addi	s3,s2,1
                ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
ee008cde:	e03f70ef          	jal	ra,ee000ae0 <whisperPrintf>
        for (i=0 ; i<default_num_contexts; i++)
ee008ce2:	0e8c2503          	lw	a0,232(s8)
ee008ce6:	01099813          	slli	a6,s3,0x10
ee008cea:	01085b93          	srli	s7,a6,0x10
ee008cee:	f0abefe3          	bltu	s7,a0,ee008c0c <__perf_end+0xaba>
        if (total_errors==0) {
ee008cf2:	cc25                	beqz	s0,ee008d6a <__perf_end+0xc18>
        if (total_errors>0)
ee008cf4:	06804663          	bgtz	s0,ee008d60 <__perf_end+0xc0e>
                ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");
ee008cf8:	f0040c37          	lui	s8,0xf0040
ee008cfc:	468c0513          	addi	a0,s8,1128 # f0040468 <STACK+0xffffe6d8>
}
ee008d00:	446a                	lw	s0,152(sp)
ee008d02:	40fa                	lw	ra,156(sp)
ee008d04:	44da                	lw	s1,148(sp)
ee008d06:	494a                	lw	s2,144(sp)
ee008d08:	49ba                	lw	s3,140(sp)
ee008d0a:	4a2a                	lw	s4,136(sp)
ee008d0c:	4a9a                	lw	s5,132(sp)
ee008d0e:	4b0a                	lw	s6,128(sp)
ee008d10:	5bf6                	lw	s7,124(sp)
ee008d12:	5c66                	lw	s8,120(sp)
ee008d14:	5cd6                	lw	s9,116(sp)
ee008d16:	5d46                	lw	s10,112(sp)
ee008d18:	5db6                	lw	s11,108(sp)
ee008d1a:	610d                	addi	sp,sp,160
                ee_printf("Errors detected\n");
ee008d1c:	dc5f706f          	j	ee000ae0 <whisperPrintf>
        switch (seedcrc) { /* test known output for common seeds */
ee008d20:	6425                	lui	s0,0x9
ee008d22:	a0240e13          	addi	t3,s0,-1534 # 8a02 <_start-0x7fff75fe>
ee008d26:	0dc50b63          	beq	a0,t3,ee008dfc <__perf_end+0xcaa>
ee008d2a:	633d                	lui	t1,0xf
ee008d2c:	9f530913          	addi	s2,t1,-1547 # e9f5 <_start-0x7fff160b>
ee008d30:	13251863          	bne	a0,s2,ee008e60 <__perf_end+0xd0e>
                        ee_printf("2K performance run parameters for coremark.\n");
ee008d34:	f00406b7          	lui	a3,0xf0040
ee008d38:	18468513          	addi	a0,a3,388 # f0040184 <STACK+0xffffe3f4>
ee008d3c:	da5f70ef          	jal	ra,ee000ae0 <whisperPrintf>
                        break;
ee008d40:	6b89                	lui	s7,0x2
ee008d42:	fd7b8a13          	addi	s4,s7,-41 # 1fd7 <_start-0x7fffe029>
ee008d46:	62b9                	lui	t0,0xe
ee008d48:	e3a40493          	addi	s1,s0,-454
ee008d4c:	8b52                	mv	s6,s4
ee008d4e:	71428913          	addi	s2,t0,1812 # e714 <_start-0x7fff18ec>
ee008d52:	c82ff06f          	j	ee0081d4 <__perf_end+0x82>
                if (i==0) res->crclist=res->crc;
ee008d56:	04611b23          	sh	t1,86(sp)
        for (i=0; i<iterations; i++) {
ee008d5a:	4405                	li	s0,1
ee008d5c:	dd8ff06f          	j	ee008334 <__perf_end+0x1e2>
                ee_printf("Errors detected\n");
ee008d60:	f0040437          	lui	s0,0xf0040
ee008d64:	4cc40513          	addi	a0,s0,1228 # f00404cc <STACK+0xffffe73c>
ee008d68:	bf61                	j	ee008d00 <__perf_end+0xbae>
                ee_printf("Correct operation validated. See readme.txt for run and reporting rules.\n");
ee008d6a:	f00400b7          	lui	ra,0xf0040
ee008d6e:	41c08513          	addi	a0,ra,1052 # f004041c <STACK+0xffffe68c>
ee008d72:	b779                	j	ee008d00 <__perf_end+0xbae>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
ee008d74:	028c0f33          	mul	t5,s8,s0
ee008d78:	01e58fb3          	add	t6,a1,t5
ee008d7c:	d67e                	sw	t6,44(sp)
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
ee008d7e:	01e11983          	lh	s3,30(sp)
ee008d82:	01c11a03          	lh	s4,28(sp)
ee008d86:	55b2                	lw	a1,44(sp)
ee008d88:	01099a93          	slli	s5,s3,0x10
ee008d8c:	00d4                	addi	a3,sp,68
ee008d8e:	014ae633          	or	a2,s5,s4
ee008d92:	8522                	mv	a0,s0
ee008d94:	975fa0ef          	jal	ra,ee003708 <core_init_matrix>
        for (i=0 ; i<MULTITHREAD; i++) {
ee008d98:	b9eff06f          	j	ee008136 <main+0xac>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
ee008d9c:	028c0333          	mul	t1,s8,s0
ee008da0:	006583b3          	add	t2,a1,t1
ee008da4:	d61e                	sw	t2,44(sp)
                if ((1<<(ee_u32)i) & results[0].execs) {
ee008da6:	d20d1563          	bnez	s10,ee0082d0 <__perf_end+0x17e>
ee008daa:	fc0d8ae3          	beqz	s11,ee008d7e <__perf_end+0xc2c>
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
ee008dae:	01c11903          	lh	s2,28(sp)
ee008db2:	8522                	mv	a0,s0
ee008db4:	864a                	mv	a2,s2
ee008db6:	ee7f70ef          	jal	ra,ee000c9c <core_list_init>
ee008dba:	882a                	mv	a6,a0
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
ee008dbc:	01e11503          	lh	a0,30(sp)
ee008dc0:	55b2                	lw	a1,44(sp)
ee008dc2:	00d4                	addi	a3,sp,68
ee008dc4:	01051893          	slli	a7,a0,0x10
ee008dc8:	0128e633          	or	a2,a7,s2
ee008dcc:	8522                	mv	a0,s0
                        results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
ee008dce:	c0c2                	sw	a6,64(sp)
                        core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
ee008dd0:	939fa0ef          	jal	ra,ee003708 <core_init_matrix>
        for (i=0 ; i<MULTITHREAD; i++) {
ee008dd4:	b62ff06f          	j	ee008136 <main+0xac>
                        ee_printf("6k validation run parameters for coremark.\n");
ee008dd8:	f0040d37          	lui	s10,0xf0040
ee008ddc:	124d0513          	addi	a0,s10,292 # f0040124 <STACK+0xffffe394>
ee008de0:	d01f70ef          	jal	ra,ee000ae0 <whisperPrintf>
                        break;
ee008de4:	6d85                	lui	s11,0x1
ee008de6:	199d8a13          	addi	s4,s11,409 # 1199 <_start-0x7fffee67>
ee008dea:	6c91                	lui	s9,0x4
ee008dec:	650d                	lui	a0,0x3
ee008dee:	9bfc8493          	addi	s1,s9,-1601 # 39bf <_start-0x7fffc641>
ee008df2:	8b52                	mv	s6,s4
ee008df4:	34050913          	addi	s2,a0,832 # 3340 <_start-0x7fffccc0>
ee008df8:	bdcff06f          	j	ee0081d4 <__perf_end+0x82>
                        ee_printf("6k performance run parameters for coremark.\n");
ee008dfc:	f0040eb7          	lui	t4,0xf0040
ee008e00:	0f4e8513          	addi	a0,t4,244 # f00400f4 <STACK+0xffffe364>
ee008e04:	cddf70ef          	jal	ra,ee000ae0 <whisperPrintf>
                        break;
ee008e08:	6f31                	lui	t5,0xc
ee008e0a:	e52f0a13          	addi	s4,t5,-430 # be52 <_start-0x7fff41ae>
ee008e0e:	6f99                	lui	t6,0x6
ee008e10:	6635                	lui	a2,0xd
ee008e12:	e47f8493          	addi	s1,t6,-441 # 5e47 <_start-0x7fffa1b9>
ee008e16:	8b52                	mv	s6,s4
ee008e18:	4b060913          	addi	s2,a2,1200 # d4b0 <_start-0x7fff2b50>
ee008e1c:	bb8ff06f          	j	ee0081d4 <__perf_end+0x82>
                        ee_printf("2K validation run parameters for coremark.\n");
ee008e20:	f00400b7          	lui	ra,0xf0040
ee008e24:	1b408513          	addi	a0,ra,436 # f00401b4 <STACK+0xffffe424>
ee008e28:	cb9f70ef          	jal	ra,ee000ae0 <whisperPrintf>
                        break;
ee008e2c:	6725                	lui	a4,0x9
ee008e2e:	6839                	lui	a6,0xe
ee008e30:	d8470493          	addi	s1,a4,-636 # 8d84 <_start-0x7fff727c>
ee008e34:	74700a13          	li	s4,1863
ee008e38:	74700b13          	li	s6,1863
ee008e3c:	3c180913          	addi	s2,a6,961 # e3c1 <_start-0x7fff1c3f>
ee008e40:	b94ff06f          	j	ee0081d4 <__perf_end+0x82>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
ee008e44:	028c00b3          	mul	ra,s8,s0
ee008e48:	001586b3          	add	a3,a1,ra
ee008e4c:	d636                	sw	a3,44(sp)
                if ((1<<(ee_u32)i) & results[0].execs) {
ee008e4e:	c82ff06f          	j	ee0082d0 <__perf_end+0x17e>
                                results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
ee008e52:	028e02b3          	mul	t0,t3,s0
ee008e56:	00558733          	add	a4,a1,t0
ee008e5a:	d83a                	sw	a4,48(sp)
        for (i=0; i<NUM_ALGORITHMS; i++) {
ee008e5c:	c80ff06f          	j	ee0082dc <__perf_end+0x18a>
        switch (seedcrc) { /* test known output for common seeds */
ee008e60:	64c1                	lui	s1,0x10
ee008e62:	fff48c93          	addi	s9,s1,-1 # ffff <_start-0x7fff0001>
ee008e66:	547d                	li	s0,-1
ee008e68:	f0040c37          	lui	s8,0xf0040
ee008e6c:	ba55                	j	ee008820 <__perf_end+0x6ce>
